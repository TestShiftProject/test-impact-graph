{
  "nodes": [
    {
      "signature": "    public void annotated_mg37_failAssert0() throws Exception {",
      "className": "com.squareup.javapoet.AnnotatedTypeNameTest",
      "id": "root",
      "lines": [
        {
          "code": "        try {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            TypeName simpleString \u003d TypeName.get(String.class);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            simpleString.isAnnotated();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            TypeName.get(String.class);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            TypeName annotated \u003d simpleString.annotated(NEVER_NULL);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            annotated.unbox();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            Assert.fail(\"annotated_mg37 should have thrown UnsupportedOperationException\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        } catch (UnsupportedOperationException expected) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            Assert.assertEquals(\"cannot unbox java.lang. @com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull String\", expected.getMessage());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": true,
      "nodeLevel": 0
    },
    {
      "signature": "  public static TypeName get(Type type) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type])_-767997747",
      "lines": [
        {
          "code": "    return get(type, new LinkedHashMap\u003c\u003e());",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 1
    },
    {
      "signature": "  public boolean isAnnotated() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: isAnnotated([])_2066538373",
      "lines": [
        {
          "code": "    return !annotations.isEmpty();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 1
    },
    {
      "signature": "  public static TypeName get(Type type) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type])_-549491437",
      "lines": [
        {
          "code": "    return get(type, new LinkedHashMap\u003c\u003e());",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 1
    },
    {
      "signature": "  public final TypeName annotated(AnnotationSpec... annotations) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: annotated([PsiType:AnnotationSpec[]])_801719558",
      "lines": [
        {
          "code": "    return annotated(Arrays.asList(annotations));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 1
    },
    {
      "signature": "  public TypeName unbox() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: unbox([])_-1869273632",
      "lines": [
        {
          "code": "    if (keyword !\u003d null) return this; // Already unboxed.",
          "callsMethod": false,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    if (this.equals(BOXED_VOID)) return VOID;",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    if (this.equals(BOXED_BOOLEAN)) return BOOLEAN;",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    if (this.equals(BOXED_BYTE)) return BYTE;",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    if (this.equals(BOXED_SHORT)) return SHORT;",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    if (this.equals(BOXED_INT)) return INT;",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    if (this.equals(BOXED_LONG)) return LONG;",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    if (this.equals(BOXED_CHAR)) return CHAR;",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    if (this.equals(BOXED_FLOAT)) return FLOAT;",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    if (this.equals(BOXED_DOUBLE)) return DOUBLE;",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    throw new UnsupportedOperationException(\"cannot unbox \" + this);",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        }
      ],
      "addCovered": true,
      "nodeLevel": 1
    },
    {
      "signature": "fail",
      "className": "org.junit.Assert",
      "id": "MethodSignatureBackedByPsiMethod: fail([PsiType:String])_268536818",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 1
    },
    {
      "signature": "assertEquals",
      "className": "org.junit.Assert",
      "id": "MethodSignatureBackedByPsiMethod: assertEquals([PsiType:Object, PsiType:Object])_-787738798",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 1
    },
    {
      "signature": "getMessage",
      "className": "java.lang.Throwable",
      "id": "MethodSignatureBackedByPsiMethod: getMessage([])_1897567104",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 1
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_941722651",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "LinkedHashMap",
      "className": "java.util.LinkedHashMap",
      "id": "MethodSignatureBackedByPsiMethod: LinkedHashMap([])_-2100327540",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "isEmpty",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: isEmpty([])_-1728789616",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1471242733",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "LinkedHashMap",
      "className": "java.util.LinkedHashMap",
      "id": "MethodSignatureBackedByPsiMethod: LinkedHashMap([])_1472480114",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  public TypeName annotated(List\u003cAnnotationSpec\u003e annotations) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: annotated([PsiType:List\u003cAnnotationSpec\u003e])_95768977",
      "lines": [
        {
          "code": "    Util.checkNotNull(annotations, \"annotations \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return new TypeName(keyword, concatAnnotations(annotations));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "asList",
      "className": "java.util.Arrays",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003easList([PsiType:T[]])_1733525394",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  @Override public final boolean equals(Object o) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_461932963",
      "lines": [
        {
          "code": "    if (this \u003d\u003d o) return true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (o \u003d\u003d null) return false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (getClass() !\u003d o.getClass()) return false;",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return toString().equals(o.toString());",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  @Override public final boolean equals(Object o) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-2081141632",
      "lines": [
        {
          "code": "    if (this \u003d\u003d o) return true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (o \u003d\u003d null) return false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (getClass() !\u003d o.getClass()) return false;",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return toString().equals(o.toString());",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  @Override public final boolean equals(Object o) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1578152537",
      "lines": [
        {
          "code": "    if (this \u003d\u003d o) return true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (o \u003d\u003d null) return false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (getClass() !\u003d o.getClass()) return false;",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return toString().equals(o.toString());",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  @Override public final boolean equals(Object o) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_176236506",
      "lines": [
        {
          "code": "    if (this \u003d\u003d o) return true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (o \u003d\u003d null) return false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (getClass() !\u003d o.getClass()) return false;",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return toString().equals(o.toString());",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  @Override public final boolean equals(Object o) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-722720476",
      "lines": [
        {
          "code": "    if (this \u003d\u003d o) return true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (o \u003d\u003d null) return false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (getClass() !\u003d o.getClass()) return false;",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return toString().equals(o.toString());",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  @Override public final boolean equals(Object o) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1409026046",
      "lines": [
        {
          "code": "    if (this \u003d\u003d o) return true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (o \u003d\u003d null) return false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (getClass() !\u003d o.getClass()) return false;",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return toString().equals(o.toString());",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  @Override public final boolean equals(Object o) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_1348870212",
      "lines": [
        {
          "code": "    if (this \u003d\u003d o) return true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (o \u003d\u003d null) return false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (getClass() !\u003d o.getClass()) return false;",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return toString().equals(o.toString());",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  @Override public final boolean equals(Object o) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_715372093",
      "lines": [
        {
          "code": "    if (this \u003d\u003d o) return true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (o \u003d\u003d null) return false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (getClass() !\u003d o.getClass()) return false;",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return toString().equals(o.toString());",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  @Override public final boolean equals(Object o) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_947741349",
      "lines": [
        {
          "code": "    if (this \u003d\u003d o) return true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (o \u003d\u003d null) return false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (getClass() !\u003d o.getClass()) return false;",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return toString().equals(o.toString());",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "UnsupportedOperationException",
      "className": "java.lang.UnsupportedOperationException",
      "id": "MethodSignatureBackedByPsiMethod: UnsupportedOperationException([PsiType:String])_917537161",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_-574541489",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  public static ArrayTypeName of(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_807384499",
      "lines": [
        {
          "code": "    return new ArrayTypeName(componentType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_388128912",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getComponentType",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getComponentType([])_1963204971",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_364481799",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static ParameterizedTypeName get(ParameterizedType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2105202835",
      "lines": [
        {
          "code": "    ClassName rawType \u003d ClassName.get((Class\u003c?\u003e) type.getRawType());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    ParameterizedType ownerType \u003d (type.getOwnerType() instanceof ParameterizedType)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        \u0026\u0026 !Modifier.isStatic(((Class\u003c?\u003e) type.getRawType()).getModifiers())",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (ParameterizedType) type.getOwnerType() : null;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    List\u003cTypeName\u003e typeArguments \u003d TypeName.list(type.getActualTypeArguments(), map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return (ownerType !\u003d null)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? get(ownerType, map).nestedClass(rawType.simpleName(), typeArguments)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : new ParameterizedTypeName(null, rawType, typeArguments);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static TypeName get(WildcardType wildcardName, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.WildcardTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-708766929",
      "lines": [
        {
          "code": "    return new WildcardTypeName(",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getUpperBounds(), map),",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getLowerBounds(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static TypeVariableName get(java.lang.reflect.TypeVariable\u003c?\u003e type,",
      "className": "com.squareup.javapoet.TypeVariableName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-1443706374",
      "lines": [
        {
          "code": "      Map\u003cType, TypeVariableName\u003e map) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    TypeVariableName result \u003d map.get(type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e bounds \u003d new ArrayList\u003c\u003e();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e visibleBounds \u003d Collections.unmodifiableList(bounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result \u003d new TypeVariableName(type.getName(), visibleBounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      map.put(type, result);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      for (Type bound : type.getBounds()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        bounds.add(TypeName.get(bound, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      bounds.remove(OBJECT);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static ArrayTypeName get(GenericArrayType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_1455631139",
      "lines": [
        {
          "code": "    return ArrayTypeName.of(get(type.getGenericComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1253909805",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_-1745566094",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  public static ArrayTypeName of(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_1726546936",
      "lines": [
        {
          "code": "    return new ArrayTypeName(componentType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_669058107",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getComponentType",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getComponentType([])_968807633",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1382076399",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static ParameterizedTypeName get(ParameterizedType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2063098295",
      "lines": [
        {
          "code": "    ClassName rawType \u003d ClassName.get((Class\u003c?\u003e) type.getRawType());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    ParameterizedType ownerType \u003d (type.getOwnerType() instanceof ParameterizedType)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        \u0026\u0026 !Modifier.isStatic(((Class\u003c?\u003e) type.getRawType()).getModifiers())",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (ParameterizedType) type.getOwnerType() : null;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    List\u003cTypeName\u003e typeArguments \u003d TypeName.list(type.getActualTypeArguments(), map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return (ownerType !\u003d null)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? get(ownerType, map).nestedClass(rawType.simpleName(), typeArguments)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : new ParameterizedTypeName(null, rawType, typeArguments);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static TypeName get(WildcardType wildcardName, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.WildcardTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_148543846",
      "lines": [
        {
          "code": "    return new WildcardTypeName(",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getUpperBounds(), map),",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getLowerBounds(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static TypeVariableName get(java.lang.reflect.TypeVariable\u003c?\u003e type,",
      "className": "com.squareup.javapoet.TypeVariableName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-1972928209",
      "lines": [
        {
          "code": "      Map\u003cType, TypeVariableName\u003e map) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    TypeVariableName result \u003d map.get(type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e bounds \u003d new ArrayList\u003c\u003e();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e visibleBounds \u003d Collections.unmodifiableList(bounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result \u003d new TypeVariableName(type.getName(), visibleBounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      map.put(type, result);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      for (Type bound : type.getBounds()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        bounds.add(TypeName.get(bound, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      bounds.remove(OBJECT);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static ArrayTypeName get(GenericArrayType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_1970379049",
      "lines": [
        {
          "code": "    return ArrayTypeName.of(get(type.getGenericComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-1220664086",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1353723357",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  private TypeName(String keyword, List\u003cAnnotationSpec\u003e annotations) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: TypeName([PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_578481192",
      "lines": [
        {
          "code": "    this.keyword \u003d keyword;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.annotations \u003d Util.immutableList(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  protected final List\u003cAnnotationSpec\u003e concatAnnotations(List\u003cAnnotationSpec\u003e annotations) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: concatAnnotations([PsiType:List\u003cAnnotationSpec\u003e])_1185778196",
      "lines": [
        {
          "code": "    List\u003cAnnotationSpec\u003e allAnnotations \u003d new ArrayList\u003c\u003e(this.annotations);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    allAnnotations.addAll(annotations);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return allAnnotations;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_-299805918",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_-1819126660",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "equals",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_1234054647",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  @Override public final String toString() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_-2134140968",
      "lines": [
        {
          "code": "    String result \u003d cachedString;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      try {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        StringBuilder resultBuilder \u003d new StringBuilder();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        CodeWriter codeWriter \u003d new CodeWriter(resultBuilder);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emit(codeWriter);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        result \u003d resultBuilder.toString();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        cachedString \u003d result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      } catch (IOException e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "toString",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_1517942006",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_-721831064",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_1710273994",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "equals",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-102925355",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  @Override public final String toString() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_1247538145",
      "lines": [
        {
          "code": "    String result \u003d cachedString;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      try {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        StringBuilder resultBuilder \u003d new StringBuilder();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        CodeWriter codeWriter \u003d new CodeWriter(resultBuilder);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emit(codeWriter);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        result \u003d resultBuilder.toString();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        cachedString \u003d result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      } catch (IOException e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "toString",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_2027573105",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_-456376429",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_-1489512729",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "equals",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-581154108",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  @Override public final String toString() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_530326934",
      "lines": [
        {
          "code": "    String result \u003d cachedString;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      try {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        StringBuilder resultBuilder \u003d new StringBuilder();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        CodeWriter codeWriter \u003d new CodeWriter(resultBuilder);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emit(codeWriter);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        result \u003d resultBuilder.toString();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        cachedString \u003d result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      } catch (IOException e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "toString",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_1290654495",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_-1331510038",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_1249426715",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "equals",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-353712015",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  @Override public final String toString() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_943136870",
      "lines": [
        {
          "code": "    String result \u003d cachedString;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      try {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        StringBuilder resultBuilder \u003d new StringBuilder();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        CodeWriter codeWriter \u003d new CodeWriter(resultBuilder);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emit(codeWriter);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        result \u003d resultBuilder.toString();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        cachedString \u003d result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      } catch (IOException e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "toString",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_1946264704",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_1286712689",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_1154731932",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "equals",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-539439835",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  @Override public final String toString() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_2018055953",
      "lines": [
        {
          "code": "    String result \u003d cachedString;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      try {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        StringBuilder resultBuilder \u003d new StringBuilder();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        CodeWriter codeWriter \u003d new CodeWriter(resultBuilder);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emit(codeWriter);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        result \u003d resultBuilder.toString();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        cachedString \u003d result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      } catch (IOException e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "toString",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_360439573",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_-198375087",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_812353450",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "equals",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1232700141",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  @Override public final String toString() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_-1522176242",
      "lines": [
        {
          "code": "    String result \u003d cachedString;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      try {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        StringBuilder resultBuilder \u003d new StringBuilder();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        CodeWriter codeWriter \u003d new CodeWriter(resultBuilder);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emit(codeWriter);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        result \u003d resultBuilder.toString();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        cachedString \u003d result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      } catch (IOException e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "toString",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_-989783472",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_906425070",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_841773707",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "equals",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1651150773",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  @Override public final String toString() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_2118891525",
      "lines": [
        {
          "code": "    String result \u003d cachedString;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      try {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        StringBuilder resultBuilder \u003d new StringBuilder();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        CodeWriter codeWriter \u003d new CodeWriter(resultBuilder);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emit(codeWriter);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        result \u003d resultBuilder.toString();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        cachedString \u003d result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      } catch (IOException e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "toString",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_-1429028888",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_990646226",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_-183724258",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "equals",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-952311575",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  @Override public final String toString() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_-1384151009",
      "lines": [
        {
          "code": "    String result \u003d cachedString;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      try {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        StringBuilder resultBuilder \u003d new StringBuilder();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        CodeWriter codeWriter \u003d new CodeWriter(resultBuilder);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emit(codeWriter);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        result \u003d resultBuilder.toString();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        cachedString \u003d result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      } catch (IOException e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "toString",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_-1952779620",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_-1895782421",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_2144122664",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "equals",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_366624129",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  @Override public final String toString() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_-1314761930",
      "lines": [
        {
          "code": "    String result \u003d cachedString;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      try {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        StringBuilder resultBuilder \u003d new StringBuilder();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        CodeWriter codeWriter \u003d new CodeWriter(resultBuilder);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emit(codeWriter);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        result \u003d resultBuilder.toString();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        cachedString \u003d result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      } catch (IOException e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "toString",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_-1378640612",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  private ArrayTypeName(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: ArrayTypeName([PsiType:TypeName])_1356849539",
      "lines": [
        {
          "code": "    this(componentType, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_-1920580749",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public static ArrayTypeName of(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_1047767566",
      "lines": [
        {
          "code": "    return new ArrayTypeName(componentType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-742213545",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getComponentType",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getComponentType([])_1641453175",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-552106711",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static ParameterizedTypeName get(ParameterizedType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1384360312",
      "lines": [
        {
          "code": "    ClassName rawType \u003d ClassName.get((Class\u003c?\u003e) type.getRawType());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    ParameterizedType ownerType \u003d (type.getOwnerType() instanceof ParameterizedType)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        \u0026\u0026 !Modifier.isStatic(((Class\u003c?\u003e) type.getRawType()).getModifiers())",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (ParameterizedType) type.getOwnerType() : null;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    List\u003cTypeName\u003e typeArguments \u003d TypeName.list(type.getActualTypeArguments(), map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return (ownerType !\u003d null)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? get(ownerType, map).nestedClass(rawType.simpleName(), typeArguments)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : new ParameterizedTypeName(null, rawType, typeArguments);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static TypeName get(WildcardType wildcardName, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.WildcardTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1460079885",
      "lines": [
        {
          "code": "    return new WildcardTypeName(",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getUpperBounds(), map),",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getLowerBounds(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static TypeVariableName get(java.lang.reflect.TypeVariable\u003c?\u003e type,",
      "className": "com.squareup.javapoet.TypeVariableName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_576632222",
      "lines": [
        {
          "code": "      Map\u003cType, TypeVariableName\u003e map) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    TypeVariableName result \u003d map.get(type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e bounds \u003d new ArrayList\u003c\u003e();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e visibleBounds \u003d Collections.unmodifiableList(bounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result \u003d new TypeVariableName(type.getName(), visibleBounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      map.put(type, result);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      for (Type bound : type.getBounds()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        bounds.add(TypeName.get(bound, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      bounds.remove(OBJECT);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static ArrayTypeName get(GenericArrayType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_-947446474",
      "lines": [
        {
          "code": "    return ArrayTypeName.of(get(type.getGenericComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1863618478",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1517519271",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-2113694890",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-1030593946",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1952115431",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_50225028",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_964450976",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_-1556255285",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_1013545678",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1451617243",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-1906038455",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_2075094549",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_124288346",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1157310756",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_924142158",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_607149095",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1624363070",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-882441521",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_1544761980",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_762635494",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1465711932",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_1228476442",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1392172201",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-539059117",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2051703709",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getRawType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getRawType([])_1280738776",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getOwnerType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getOwnerType([])_-1023567812",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isStatic",
      "className": "java.lang.reflect.Modifier",
      "id": "MethodSignatureBackedByPsiMethod: isStatic([PsiType:int])_354667995",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getModifiers",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getModifiers([])_-1402379358",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getRawType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getRawType([])_-410642139",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getOwnerType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getOwnerType([])_-1494687287",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static List\u003cTypeName\u003e list(Type[] types, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-852263443",
      "lines": [
        {
          "code": "    List\u003cTypeName\u003e result \u003d new ArrayList\u003c\u003e(types.length);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (Type type : types) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result.add(get(type, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getActualTypeArguments",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getActualTypeArguments([])_-1312332657",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public ParameterizedTypeName nestedClass(String name, List\u003cTypeName\u003e typeArguments) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String, PsiType:List\u003cTypeName\u003e])_1401187623",
      "lines": [
        {
          "code": "    checkNotNull(name, \"name \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return new ParameterizedTypeName(this, rawType.nestedClass(name), typeArguments,",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static ParameterizedTypeName get(ParameterizedType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-71330948",
      "lines": [
        {
          "code": "    ClassName rawType \u003d ClassName.get((Class\u003c?\u003e) type.getRawType());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    ParameterizedType ownerType \u003d (type.getOwnerType() instanceof ParameterizedType)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        \u0026\u0026 !Modifier.isStatic(((Class\u003c?\u003e) type.getRawType()).getModifiers())",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (ParameterizedType) type.getOwnerType() : null;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    List\u003cTypeName\u003e typeArguments \u003d TypeName.list(type.getActualTypeArguments(), map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return (ownerType !\u003d null)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? get(ownerType, map).nestedClass(rawType.simpleName(), typeArguments)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : new ParameterizedTypeName(null, rawType, typeArguments);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public String simpleName() {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: simpleName([])_-1084264243",
      "lines": [
        {
          "code": "    return simpleName;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  ParameterizedTypeName(ParameterizedTypeName enclosingType, ClassName rawType,",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: ParameterizedTypeName([PsiType:ParameterizedTypeName, PsiType:ClassName, PsiType:List\u003cTypeName\u003e])_-28020606",
      "lines": [
        {
          "code": "      List\u003cTypeName\u003e typeArguments) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this(enclosingType, rawType, typeArguments, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private WildcardTypeName(List\u003cTypeName\u003e upperBounds, List\u003cTypeName\u003e lowerBounds) {",
      "className": "com.squareup.javapoet.WildcardTypeName",
      "id": "MethodSignatureBackedByPsiMethod: WildcardTypeName([PsiType:List\u003cTypeName\u003e, PsiType:List\u003cTypeName\u003e])_-1123735563",
      "lines": [
        {
          "code": "    this(upperBounds, lowerBounds, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static List\u003cTypeName\u003e list(Type[] types, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-1765824614",
      "lines": [
        {
          "code": "    List\u003cTypeName\u003e result \u003d new ArrayList\u003c\u003e(types.length);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (Type type : types) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result.add(get(type, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getUpperBounds",
      "className": "java.lang.reflect.WildcardType",
      "id": "MethodSignatureBackedByPsiMethod: getUpperBounds([])_1327450791",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static List\u003cTypeName\u003e list(Type[] types, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_1047027366",
      "lines": [
        {
          "code": "    List\u003cTypeName\u003e result \u003d new ArrayList\u003c\u003e(types.length);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (Type type : types) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result.add(get(type, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getLowerBounds",
      "className": "java.lang.reflect.WildcardType",
      "id": "MethodSignatureBackedByPsiMethod: getLowerBounds([])_1601954518",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "get",
      "className": "java.util.Map",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Object])_-155615919",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "ArrayList",
      "className": "java.util.ArrayList",
      "id": "MethodSignatureBackedByPsiMethod: ArrayList([])_89988327",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "unmodifiableList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eunmodifiableList([PsiType:List\u003c? extends T\u003e])_-265318216",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private TypeVariableName(String name, List\u003cTypeName\u003e bounds) {",
      "className": "com.squareup.javapoet.TypeVariableName",
      "id": "MethodSignatureBackedByPsiMethod: TypeVariableName([PsiType:String, PsiType:List\u003cTypeName\u003e])_1384606126",
      "lines": [
        {
          "code": "    this(name, bounds, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.reflect.TypeVariable",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_749475104",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "put",
      "className": "java.util.Map",
      "id": "MethodSignatureBackedByPsiMethod: put([PsiType:K, PsiType:V])_1567421639",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getBounds",
      "className": "java.lang.reflect.TypeVariable",
      "id": "MethodSignatureBackedByPsiMethod: getBounds([])_-610557937",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "add",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_-829620812",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_633220982",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "remove",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: remove([PsiType:Object])_-1932116183",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public static ArrayTypeName of(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_-230467877",
      "lines": [
        {
          "code": "    return new ArrayTypeName(componentType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_2075692904",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getGenericComponentType",
      "className": "java.lang.reflect.GenericArrayType",
      "id": "MethodSignatureBackedByPsiMethod: getGenericComponentType([])_-2024263271",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private ArrayTypeName(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: ArrayTypeName([PsiType:TypeName])_942609830",
      "lines": [
        {
          "code": "    this(componentType, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_-1099793999",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public static ArrayTypeName of(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_678568900",
      "lines": [
        {
          "code": "    return new ArrayTypeName(componentType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1006433481",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getComponentType",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getComponentType([])_1656146150",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1649531578",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static ParameterizedTypeName get(ParameterizedType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_145217713",
      "lines": [
        {
          "code": "    ClassName rawType \u003d ClassName.get((Class\u003c?\u003e) type.getRawType());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    ParameterizedType ownerType \u003d (type.getOwnerType() instanceof ParameterizedType)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        \u0026\u0026 !Modifier.isStatic(((Class\u003c?\u003e) type.getRawType()).getModifiers())",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (ParameterizedType) type.getOwnerType() : null;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    List\u003cTypeName\u003e typeArguments \u003d TypeName.list(type.getActualTypeArguments(), map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return (ownerType !\u003d null)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? get(ownerType, map).nestedClass(rawType.simpleName(), typeArguments)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : new ParameterizedTypeName(null, rawType, typeArguments);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static TypeName get(WildcardType wildcardName, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.WildcardTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1732385884",
      "lines": [
        {
          "code": "    return new WildcardTypeName(",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getUpperBounds(), map),",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getLowerBounds(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static TypeVariableName get(java.lang.reflect.TypeVariable\u003c?\u003e type,",
      "className": "com.squareup.javapoet.TypeVariableName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-2090976207",
      "lines": [
        {
          "code": "      Map\u003cType, TypeVariableName\u003e map) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    TypeVariableName result \u003d map.get(type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e bounds \u003d new ArrayList\u003c\u003e();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e visibleBounds \u003d Collections.unmodifiableList(bounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result \u003d new TypeVariableName(type.getName(), visibleBounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      map.put(type, result);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      for (Type bound : type.getBounds()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        bounds.add(TypeName.get(bound, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      bounds.remove(OBJECT);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static ArrayTypeName get(GenericArrayType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_-67451782",
      "lines": [
        {
          "code": "    return ArrayTypeName.of(get(type.getGenericComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_290405564",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_2047412684",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1916672442",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_1585242776",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-898109943",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1856636474",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_25332587",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_-2049024548",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_-378227577",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_908111141",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_598148293",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_1333116469",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_2067762020",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1578122521",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_1703061737",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1204139083",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_1620069827",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1930805278",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-2143213134",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1707541698",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1348795052",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_1790129874",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-588121260",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-187735104",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1372208060",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getRawType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getRawType([])_-2105936091",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getOwnerType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getOwnerType([])_-1141204815",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isStatic",
      "className": "java.lang.reflect.Modifier",
      "id": "MethodSignatureBackedByPsiMethod: isStatic([PsiType:int])_-552860500",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getModifiers",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getModifiers([])_-570532291",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getRawType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getRawType([])_-66081096",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getOwnerType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getOwnerType([])_91764971",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static List\u003cTypeName\u003e list(Type[] types, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-324083143",
      "lines": [
        {
          "code": "    List\u003cTypeName\u003e result \u003d new ArrayList\u003c\u003e(types.length);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (Type type : types) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result.add(get(type, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getActualTypeArguments",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getActualTypeArguments([])_-1259782257",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public ParameterizedTypeName nestedClass(String name, List\u003cTypeName\u003e typeArguments) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String, PsiType:List\u003cTypeName\u003e])_-521102771",
      "lines": [
        {
          "code": "    checkNotNull(name, \"name \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return new ParameterizedTypeName(this, rawType.nestedClass(name), typeArguments,",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static ParameterizedTypeName get(ParameterizedType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1670302266",
      "lines": [
        {
          "code": "    ClassName rawType \u003d ClassName.get((Class\u003c?\u003e) type.getRawType());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    ParameterizedType ownerType \u003d (type.getOwnerType() instanceof ParameterizedType)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        \u0026\u0026 !Modifier.isStatic(((Class\u003c?\u003e) type.getRawType()).getModifiers())",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (ParameterizedType) type.getOwnerType() : null;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    List\u003cTypeName\u003e typeArguments \u003d TypeName.list(type.getActualTypeArguments(), map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return (ownerType !\u003d null)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? get(ownerType, map).nestedClass(rawType.simpleName(), typeArguments)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : new ParameterizedTypeName(null, rawType, typeArguments);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public String simpleName() {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: simpleName([])_5898914",
      "lines": [
        {
          "code": "    return simpleName;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  ParameterizedTypeName(ParameterizedTypeName enclosingType, ClassName rawType,",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: ParameterizedTypeName([PsiType:ParameterizedTypeName, PsiType:ClassName, PsiType:List\u003cTypeName\u003e])_2030095207",
      "lines": [
        {
          "code": "      List\u003cTypeName\u003e typeArguments) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this(enclosingType, rawType, typeArguments, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private WildcardTypeName(List\u003cTypeName\u003e upperBounds, List\u003cTypeName\u003e lowerBounds) {",
      "className": "com.squareup.javapoet.WildcardTypeName",
      "id": "MethodSignatureBackedByPsiMethod: WildcardTypeName([PsiType:List\u003cTypeName\u003e, PsiType:List\u003cTypeName\u003e])_1687760302",
      "lines": [
        {
          "code": "    this(upperBounds, lowerBounds, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static List\u003cTypeName\u003e list(Type[] types, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-114539010",
      "lines": [
        {
          "code": "    List\u003cTypeName\u003e result \u003d new ArrayList\u003c\u003e(types.length);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (Type type : types) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result.add(get(type, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getUpperBounds",
      "className": "java.lang.reflect.WildcardType",
      "id": "MethodSignatureBackedByPsiMethod: getUpperBounds([])_1078213686",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static List\u003cTypeName\u003e list(Type[] types, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_269849952",
      "lines": [
        {
          "code": "    List\u003cTypeName\u003e result \u003d new ArrayList\u003c\u003e(types.length);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (Type type : types) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result.add(get(type, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getLowerBounds",
      "className": "java.lang.reflect.WildcardType",
      "id": "MethodSignatureBackedByPsiMethod: getLowerBounds([])_-1245194804",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "get",
      "className": "java.util.Map",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Object])_-1062948329",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "ArrayList",
      "className": "java.util.ArrayList",
      "id": "MethodSignatureBackedByPsiMethod: ArrayList([])_-1723384297",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "unmodifiableList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eunmodifiableList([PsiType:List\u003c? extends T\u003e])_1967666416",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private TypeVariableName(String name, List\u003cTypeName\u003e bounds) {",
      "className": "com.squareup.javapoet.TypeVariableName",
      "id": "MethodSignatureBackedByPsiMethod: TypeVariableName([PsiType:String, PsiType:List\u003cTypeName\u003e])_1695955242",
      "lines": [
        {
          "code": "    this(name, bounds, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.reflect.TypeVariable",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-17013900",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "put",
      "className": "java.util.Map",
      "id": "MethodSignatureBackedByPsiMethod: put([PsiType:K, PsiType:V])_1170137406",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getBounds",
      "className": "java.lang.reflect.TypeVariable",
      "id": "MethodSignatureBackedByPsiMethod: getBounds([])_-258450396",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "add",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_-1589929349",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1208265238",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "remove",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: remove([PsiType:Object])_1780352449",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public static ArrayTypeName of(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_1942103439",
      "lines": [
        {
          "code": "    return new ArrayTypeName(componentType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_171983242",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getGenericComponentType",
      "className": "java.lang.reflect.GenericArrayType",
      "id": "MethodSignatureBackedByPsiMethod: getGenericComponentType([])_897428806",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_1553825880",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1228026497",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static \u003cT\u003e List\u003cT\u003e immutableList(Collection\u003cT\u003e collection) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eimmutableList([PsiType:Collection\u003cT\u003e])_-821817767",
      "lines": [
        {
          "code": "    return Collections.unmodifiableList(new ArrayList\u003c\u003e(collection));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "ArrayList",
      "className": "java.util.ArrayList",
      "id": "MethodSignatureBackedByPsiMethod: ArrayList([PsiType:Collection\u003c? extends E\u003e])_1596109733",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "addAll",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: addAll([PsiType:Collection\u003c? extends E\u003e])_-2136089571",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "StringBuilder",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: StringBuilder([])_1950698098",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter(Appendable out) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-1711760755",
      "lines": [
        {
          "code": "    this(out, \"  \", Collections.emptySet(), Collections.emptySet());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter emit(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1069345026",
      "lines": [
        {
          "code": "    if (keyword \u003d\u003d null) throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (isAnnotated()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.emit(\"\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      emitAnnotations(out);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return out.emitAndIndent(keyword);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "toString",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_2048717970",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_1816557768",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "StringBuilder",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: StringBuilder([])_-1794011896",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter(Appendable out) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-251987953",
      "lines": [
        {
          "code": "    this(out, \"  \", Collections.emptySet(), Collections.emptySet());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter emit(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-613635096",
      "lines": [
        {
          "code": "    if (keyword \u003d\u003d null) throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (isAnnotated()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.emit(\"\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      emitAnnotations(out);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return out.emitAndIndent(keyword);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "toString",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_-2048930375",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_2012480471",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "StringBuilder",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: StringBuilder([])_-1796561847",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter(Appendable out) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-689421954",
      "lines": [
        {
          "code": "    this(out, \"  \", Collections.emptySet(), Collections.emptySet());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter emit(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-1701788280",
      "lines": [
        {
          "code": "    if (keyword \u003d\u003d null) throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (isAnnotated()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.emit(\"\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      emitAnnotations(out);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return out.emitAndIndent(keyword);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "toString",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_1083717711",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_-1250687674",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "StringBuilder",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: StringBuilder([])_651824295",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter(Appendable out) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-1079607048",
      "lines": [
        {
          "code": "    this(out, \"  \", Collections.emptySet(), Collections.emptySet());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter emit(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1679737202",
      "lines": [
        {
          "code": "    if (keyword \u003d\u003d null) throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (isAnnotated()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.emit(\"\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      emitAnnotations(out);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return out.emitAndIndent(keyword);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "toString",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_-1795382447",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_-1625579600",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "StringBuilder",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: StringBuilder([])_2143307263",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter(Appendable out) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_365762710",
      "lines": [
        {
          "code": "    this(out, \"  \", Collections.emptySet(), Collections.emptySet());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter emit(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-968406728",
      "lines": [
        {
          "code": "    if (keyword \u003d\u003d null) throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (isAnnotated()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.emit(\"\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      emitAnnotations(out);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return out.emitAndIndent(keyword);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "toString",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_894867232",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_-1555114055",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "StringBuilder",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: StringBuilder([])_-1153743800",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter(Appendable out) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-308371613",
      "lines": [
        {
          "code": "    this(out, \"  \", Collections.emptySet(), Collections.emptySet());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter emit(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-705914559",
      "lines": [
        {
          "code": "    if (keyword \u003d\u003d null) throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (isAnnotated()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.emit(\"\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      emitAnnotations(out);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return out.emitAndIndent(keyword);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "toString",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_1285347743",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_-252261011",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "StringBuilder",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: StringBuilder([])_1470489640",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter(Appendable out) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-438220321",
      "lines": [
        {
          "code": "    this(out, \"  \", Collections.emptySet(), Collections.emptySet());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter emit(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_706589176",
      "lines": [
        {
          "code": "    if (keyword \u003d\u003d null) throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (isAnnotated()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.emit(\"\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      emitAnnotations(out);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return out.emitAndIndent(keyword);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "toString",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_813523626",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_739005790",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "StringBuilder",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: StringBuilder([])_-1232521649",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter(Appendable out) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-341598321",
      "lines": [
        {
          "code": "    this(out, \"  \", Collections.emptySet(), Collections.emptySet());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter emit(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1773391365",
      "lines": [
        {
          "code": "    if (keyword \u003d\u003d null) throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (isAnnotated()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.emit(\"\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      emitAnnotations(out);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return out.emitAndIndent(keyword);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "toString",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_1360338735",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_-1972568654",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "StringBuilder",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: StringBuilder([])_-2081098075",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter(Appendable out) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-853270324",
      "lines": [
        {
          "code": "    this(out, \"  \", Collections.emptySet(), Collections.emptySet());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter emit(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-1850809294",
      "lines": [
        {
          "code": "    if (keyword \u003d\u003d null) throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (isAnnotated()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.emit(\"\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      emitAnnotations(out);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return out.emitAndIndent(keyword);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "toString",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_-1140835973",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_-884754135",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private ArrayTypeName(TypeName componentType, List\u003cAnnotationSpec\u003e annotations) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: ArrayTypeName([PsiType:TypeName, PsiType:List\u003cAnnotationSpec\u003e])_-744998475",
      "lines": [
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.componentType \u003d checkNotNull(componentType, \"rawType \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "ArrayList",
      "className": "java.util.ArrayList",
      "id": "MethodSignatureBackedByPsiMethod: ArrayList([])_-1879887175",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ArrayTypeName(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: ArrayTypeName([PsiType:TypeName])_-2101351890",
      "lines": [
        {
          "code": "    this(componentType, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_-7733722",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ArrayTypeName of(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_-514586298",
      "lines": [
        {
          "code": "    return new ArrayTypeName(componentType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1654094694",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getComponentType",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getComponentType([])_574909545",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1224793212",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static ParameterizedTypeName get(ParameterizedType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-108709770",
      "lines": [
        {
          "code": "    ClassName rawType \u003d ClassName.get((Class\u003c?\u003e) type.getRawType());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    ParameterizedType ownerType \u003d (type.getOwnerType() instanceof ParameterizedType)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        \u0026\u0026 !Modifier.isStatic(((Class\u003c?\u003e) type.getRawType()).getModifiers())",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (ParameterizedType) type.getOwnerType() : null;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    List\u003cTypeName\u003e typeArguments \u003d TypeName.list(type.getActualTypeArguments(), map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return (ownerType !\u003d null)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? get(ownerType, map).nestedClass(rawType.simpleName(), typeArguments)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : new ParameterizedTypeName(null, rawType, typeArguments);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(WildcardType wildcardName, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.WildcardTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_576609540",
      "lines": [
        {
          "code": "    return new WildcardTypeName(",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getUpperBounds(), map),",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getLowerBounds(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeVariableName get(java.lang.reflect.TypeVariable\u003c?\u003e type,",
      "className": "com.squareup.javapoet.TypeVariableName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-1391511001",
      "lines": [
        {
          "code": "      Map\u003cType, TypeVariableName\u003e map) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    TypeVariableName result \u003d map.get(type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e bounds \u003d new ArrayList\u003c\u003e();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e visibleBounds \u003d Collections.unmodifiableList(bounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result \u003d new TypeVariableName(type.getName(), visibleBounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      map.put(type, result);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      for (Type bound : type.getBounds()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        bounds.add(TypeName.get(bound, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      bounds.remove(OBJECT);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static ArrayTypeName get(GenericArrayType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1441870638",
      "lines": [
        {
          "code": "    return ArrayTypeName.of(get(type.getGenericComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-139192940",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-298755693",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_580713539",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-1503283510",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-77862040",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_645417124",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-2117554117",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_-203940489",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_-879810921",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-2084234521",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1712645687",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_-470802677",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1206775115",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1086340350",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_742153033",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_248134612",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1216606957",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1571248035",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_683373556",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_2036406377",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1196253959",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-1116028200",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1239917838",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-896094432",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_281944623",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getRawType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getRawType([])_1328321181",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getOwnerType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getOwnerType([])_1355270193",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isStatic",
      "className": "java.lang.reflect.Modifier",
      "id": "MethodSignatureBackedByPsiMethod: isStatic([PsiType:int])_-1508203326",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getModifiers",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getModifiers([])_-337732572",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getRawType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getRawType([])_812302006",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getOwnerType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getOwnerType([])_1743303711",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static List\u003cTypeName\u003e list(Type[] types, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_1779741825",
      "lines": [
        {
          "code": "    List\u003cTypeName\u003e result \u003d new ArrayList\u003c\u003e(types.length);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (Type type : types) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result.add(get(type, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getActualTypeArguments",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getActualTypeArguments([])_1783656440",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public ParameterizedTypeName nestedClass(String name, List\u003cTypeName\u003e typeArguments) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String, PsiType:List\u003cTypeName\u003e])_-1430489153",
      "lines": [
        {
          "code": "    checkNotNull(name, \"name \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return new ParameterizedTypeName(this, rawType.nestedClass(name), typeArguments,",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static ParameterizedTypeName get(ParameterizedType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1290894119",
      "lines": [
        {
          "code": "    ClassName rawType \u003d ClassName.get((Class\u003c?\u003e) type.getRawType());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    ParameterizedType ownerType \u003d (type.getOwnerType() instanceof ParameterizedType)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        \u0026\u0026 !Modifier.isStatic(((Class\u003c?\u003e) type.getRawType()).getModifiers())",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (ParameterizedType) type.getOwnerType() : null;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    List\u003cTypeName\u003e typeArguments \u003d TypeName.list(type.getActualTypeArguments(), map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return (ownerType !\u003d null)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? get(ownerType, map).nestedClass(rawType.simpleName(), typeArguments)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : new ParameterizedTypeName(null, rawType, typeArguments);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public String simpleName() {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: simpleName([])_-9083094",
      "lines": [
        {
          "code": "    return simpleName;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  ParameterizedTypeName(ParameterizedTypeName enclosingType, ClassName rawType,",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: ParameterizedTypeName([PsiType:ParameterizedTypeName, PsiType:ClassName, PsiType:List\u003cTypeName\u003e])_181224275",
      "lines": [
        {
          "code": "      List\u003cTypeName\u003e typeArguments) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this(enclosingType, rawType, typeArguments, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private WildcardTypeName(List\u003cTypeName\u003e upperBounds, List\u003cTypeName\u003e lowerBounds) {",
      "className": "com.squareup.javapoet.WildcardTypeName",
      "id": "MethodSignatureBackedByPsiMethod: WildcardTypeName([PsiType:List\u003cTypeName\u003e, PsiType:List\u003cTypeName\u003e])_256201601",
      "lines": [
        {
          "code": "    this(upperBounds, lowerBounds, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static List\u003cTypeName\u003e list(Type[] types, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-720554630",
      "lines": [
        {
          "code": "    List\u003cTypeName\u003e result \u003d new ArrayList\u003c\u003e(types.length);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (Type type : types) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result.add(get(type, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getUpperBounds",
      "className": "java.lang.reflect.WildcardType",
      "id": "MethodSignatureBackedByPsiMethod: getUpperBounds([])_1279166870",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static List\u003cTypeName\u003e list(Type[] types, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-955422243",
      "lines": [
        {
          "code": "    List\u003cTypeName\u003e result \u003d new ArrayList\u003c\u003e(types.length);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (Type type : types) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result.add(get(type, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getLowerBounds",
      "className": "java.lang.reflect.WildcardType",
      "id": "MethodSignatureBackedByPsiMethod: getLowerBounds([])_1721657990",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "get",
      "className": "java.util.Map",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Object])_-443529454",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "ArrayList",
      "className": "java.util.ArrayList",
      "id": "MethodSignatureBackedByPsiMethod: ArrayList([])_-164096410",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "unmodifiableList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eunmodifiableList([PsiType:List\u003c? extends T\u003e])_247930595",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private TypeVariableName(String name, List\u003cTypeName\u003e bounds) {",
      "className": "com.squareup.javapoet.TypeVariableName",
      "id": "MethodSignatureBackedByPsiMethod: TypeVariableName([PsiType:String, PsiType:List\u003cTypeName\u003e])_-1851049233",
      "lines": [
        {
          "code": "    this(name, bounds, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.reflect.TypeVariable",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-1512608781",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "put",
      "className": "java.util.Map",
      "id": "MethodSignatureBackedByPsiMethod: put([PsiType:K, PsiType:V])_1251837678",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getBounds",
      "className": "java.lang.reflect.TypeVariable",
      "id": "MethodSignatureBackedByPsiMethod: getBounds([])_1545942324",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "add",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_5858436",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1280623795",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "remove",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: remove([PsiType:Object])_1201323889",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ArrayTypeName of(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_1377722700",
      "lines": [
        {
          "code": "    return new ArrayTypeName(componentType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1701342708",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getGenericComponentType",
      "className": "java.lang.reflect.GenericArrayType",
      "id": "MethodSignatureBackedByPsiMethod: getGenericComponentType([])_381855548",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_1580141199",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1628143180",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-4119586",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1632880687",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-1317021702",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_800426408",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-830378057",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1341656654",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName,",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_1930179184",
      "lines": [
        {
          "code": "      List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.packageName \u003d Objects.requireNonNull(packageName, \"packageName \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.enclosingClassName \u003d enclosingClassName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.simpleName \u003d simpleName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.canonicalName \u003d enclosingClassName !\u003d null",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (enclosingClassName.canonicalName + \u0027.\u0027 + simpleName)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : (packageName.isEmpty() ? simpleName : packageName + \u0027.\u0027 + simpleName);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptyList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_51245561",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1141549518",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1088328781",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-858971931",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-1537813451",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1968583899",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_747684834",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1381918462",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_-104328188",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_1988233506",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-498294873",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-1542563642",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_744045268",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-120606114",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-985130247",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_829076891",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_2070014392",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_398165179",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1814332287",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_2009841257",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1672807821",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-406531909",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_378526549",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1010959590",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1610612386",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1655046641",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1027455985",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_624845645",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-789976311",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-425966226",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1714984445",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_-1513890235",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_-1794892254",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-3886168",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-1947555920",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_-817082845",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_760791318",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1567476218",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-1591735875",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1806525865",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1988005741",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-395948125",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_1659779776",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-1124700844",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1878179111",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_65480887",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-979920989",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_754293123",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "ArrayList",
      "className": "java.util.ArrayList",
      "id": "MethodSignatureBackedByPsiMethod: ArrayList([PsiType:int])_47144743",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "add",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_1783580210",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1957858336",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-610117255",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ParameterizedTypeName(ParameterizedTypeName enclosingType, ClassName rawType,",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: ParameterizedTypeName([PsiType:ParameterizedTypeName, PsiType:ClassName, PsiType:List\u003cTypeName\u003e, PsiType:List\u003cAnnotationSpec\u003e])_-648002350",
      "lines": [
        {
          "code": "      List\u003cTypeName\u003e typeArguments, List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.rawType \u003d checkNotNull(rawType, \"rawType \u003d\u003d null\").annotated(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.enclosingType \u003d enclosingType;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.typeArguments \u003d Util.immutableList(typeArguments);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!this.typeArguments.isEmpty() || enclosingType !\u003d null,",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        \"no type arguments: %s\", rawType);",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (TypeName typeArgument : this.typeArguments) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      checkArgument(!typeArgument.isPrimitive() \u0026\u0026 typeArgument !\u003d VOID,",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          \"invalid type parameter: %s\", typeArgument);",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_589693776",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "ArrayList",
      "className": "java.util.ArrayList",
      "id": "MethodSignatureBackedByPsiMethod: ArrayList([])_-1821063292",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-503259285",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getRawType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getRawType([])_1753013941",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getOwnerType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getOwnerType([])_-799701990",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isStatic",
      "className": "java.lang.reflect.Modifier",
      "id": "MethodSignatureBackedByPsiMethod: isStatic([PsiType:int])_-1745454668",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getModifiers",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getModifiers([])_-152442911",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getRawType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getRawType([])_1124159056",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getOwnerType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getOwnerType([])_-2053904060",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static List\u003cTypeName\u003e list(Type[] types, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_654171253",
      "lines": [
        {
          "code": "    List\u003cTypeName\u003e result \u003d new ArrayList\u003c\u003e(types.length);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (Type type : types) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result.add(get(type, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getActualTypeArguments",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getActualTypeArguments([])_1689732009",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public ParameterizedTypeName nestedClass(String name, List\u003cTypeName\u003e typeArguments) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String, PsiType:List\u003cTypeName\u003e])_2099665657",
      "lines": [
        {
          "code": "    checkNotNull(name, \"name \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return new ParameterizedTypeName(this, rawType.nestedClass(name), typeArguments,",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static ParameterizedTypeName get(ParameterizedType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1794413258",
      "lines": [
        {
          "code": "    ClassName rawType \u003d ClassName.get((Class\u003c?\u003e) type.getRawType());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    ParameterizedType ownerType \u003d (type.getOwnerType() instanceof ParameterizedType)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        \u0026\u0026 !Modifier.isStatic(((Class\u003c?\u003e) type.getRawType()).getModifiers())",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (ParameterizedType) type.getOwnerType() : null;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    List\u003cTypeName\u003e typeArguments \u003d TypeName.list(type.getActualTypeArguments(), map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return (ownerType !\u003d null)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? get(ownerType, map).nestedClass(rawType.simpleName(), typeArguments)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : new ParameterizedTypeName(null, rawType, typeArguments);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public String simpleName() {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: simpleName([])_1747160295",
      "lines": [
        {
          "code": "    return simpleName;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  ParameterizedTypeName(ParameterizedTypeName enclosingType, ClassName rawType,",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: ParameterizedTypeName([PsiType:ParameterizedTypeName, PsiType:ClassName, PsiType:List\u003cTypeName\u003e])_-2099606258",
      "lines": [
        {
          "code": "      List\u003cTypeName\u003e typeArguments) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this(enclosingType, rawType, typeArguments, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ParameterizedTypeName(ParameterizedTypeName enclosingType, ClassName rawType,",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: ParameterizedTypeName([PsiType:ParameterizedTypeName, PsiType:ClassName, PsiType:List\u003cTypeName\u003e, PsiType:List\u003cAnnotationSpec\u003e])_-60206848",
      "lines": [
        {
          "code": "      List\u003cTypeName\u003e typeArguments, List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.rawType \u003d checkNotNull(rawType, \"rawType \u003d\u003d null\").annotated(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.enclosingType \u003d enclosingType;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.typeArguments \u003d Util.immutableList(typeArguments);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!this.typeArguments.isEmpty() || enclosingType !\u003d null,",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        \"no type arguments: %s\", rawType);",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (TypeName typeArgument : this.typeArguments) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      checkArgument(!typeArgument.isPrimitive() \u0026\u0026 typeArgument !\u003d VOID,",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          \"invalid type parameter: %s\", typeArgument);",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "ArrayList",
      "className": "java.util.ArrayList",
      "id": "MethodSignatureBackedByPsiMethod: ArrayList([])_-725696920",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private WildcardTypeName(List\u003cTypeName\u003e upperBounds, List\u003cTypeName\u003e lowerBounds,",
      "className": "com.squareup.javapoet.WildcardTypeName",
      "id": "MethodSignatureBackedByPsiMethod: WildcardTypeName([PsiType:List\u003cTypeName\u003e, PsiType:List\u003cTypeName\u003e, PsiType:List\u003cAnnotationSpec\u003e])_-668698286",
      "lines": [
        {
          "code": "      List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.upperBounds \u003d Util.immutableList(upperBounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.lowerBounds \u003d Util.immutableList(lowerBounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(this.upperBounds.size() \u003d\u003d 1, \"unexpected extends bounds: %s\", upperBounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (TypeName upperBound : this.upperBounds) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      checkArgument(!upperBound.isPrimitive() \u0026\u0026 upperBound !\u003d VOID,",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          \"invalid upper bound: %s\", upperBound);",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (TypeName lowerBound : this.lowerBounds) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      checkArgument(!lowerBound.isPrimitive() \u0026\u0026 lowerBound !\u003d VOID,",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          \"invalid lower bound: %s\", lowerBound);",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "ArrayList",
      "className": "java.util.ArrayList",
      "id": "MethodSignatureBackedByPsiMethod: ArrayList([])_118324297",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "ArrayList",
      "className": "java.util.ArrayList",
      "id": "MethodSignatureBackedByPsiMethod: ArrayList([PsiType:int])_-403689709",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "add",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_170404594",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1589745884",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "ArrayList",
      "className": "java.util.ArrayList",
      "id": "MethodSignatureBackedByPsiMethod: ArrayList([PsiType:int])_-925987016",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "add",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_-1791441436",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1785164131",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private TypeVariableName(String name, List\u003cTypeName\u003e bounds, List\u003cAnnotationSpec\u003e annotations) {",
      "className": "com.squareup.javapoet.TypeVariableName",
      "id": "MethodSignatureBackedByPsiMethod: TypeVariableName([PsiType:String, PsiType:List\u003cTypeName\u003e, PsiType:List\u003cAnnotationSpec\u003e])_-1279240902",
      "lines": [
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.name \u003d checkNotNull(name, \"name \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.bounds \u003d bounds;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (TypeName bound : this.bounds) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      checkArgument(!bound.isPrimitive() \u0026\u0026 bound !\u003d VOID, \"invalid bound: %s\", bound);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "ArrayList",
      "className": "java.util.ArrayList",
      "id": "MethodSignatureBackedByPsiMethod: ArrayList([])_2111043661",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_-391664120",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ArrayTypeName of(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_-1908716848",
      "lines": [
        {
          "code": "    return new ArrayTypeName(componentType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_2076720734",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getComponentType",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getComponentType([])_1649019080",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_192296994",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static ParameterizedTypeName get(ParameterizedType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1195442736",
      "lines": [
        {
          "code": "    ClassName rawType \u003d ClassName.get((Class\u003c?\u003e) type.getRawType());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    ParameterizedType ownerType \u003d (type.getOwnerType() instanceof ParameterizedType)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        \u0026\u0026 !Modifier.isStatic(((Class\u003c?\u003e) type.getRawType()).getModifiers())",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (ParameterizedType) type.getOwnerType() : null;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    List\u003cTypeName\u003e typeArguments \u003d TypeName.list(type.getActualTypeArguments(), map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return (ownerType !\u003d null)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? get(ownerType, map).nestedClass(rawType.simpleName(), typeArguments)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : new ParameterizedTypeName(null, rawType, typeArguments);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(WildcardType wildcardName, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.WildcardTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_683409424",
      "lines": [
        {
          "code": "    return new WildcardTypeName(",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getUpperBounds(), map),",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getLowerBounds(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeVariableName get(java.lang.reflect.TypeVariable\u003c?\u003e type,",
      "className": "com.squareup.javapoet.TypeVariableName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-78542296",
      "lines": [
        {
          "code": "      Map\u003cType, TypeVariableName\u003e map) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    TypeVariableName result \u003d map.get(type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e bounds \u003d new ArrayList\u003c\u003e();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e visibleBounds \u003d Collections.unmodifiableList(bounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result \u003d new TypeVariableName(type.getName(), visibleBounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      map.put(type, result);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      for (Type bound : type.getBounds()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        bounds.add(TypeName.get(bound, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      bounds.remove(OBJECT);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static ArrayTypeName get(GenericArrayType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_-825443520",
      "lines": [
        {
          "code": "    return ArrayTypeName.of(get(type.getGenericComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1892003047",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ArrayTypeName(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: ArrayTypeName([PsiType:TypeName])_262367625",
      "lines": [
        {
          "code": "    this(componentType, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_814070494",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ArrayTypeName of(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_-121051772",
      "lines": [
        {
          "code": "    return new ArrayTypeName(componentType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-149301088",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getComponentType",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getComponentType([])_258324220",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-778509756",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static ParameterizedTypeName get(ParameterizedType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-771362042",
      "lines": [
        {
          "code": "    ClassName rawType \u003d ClassName.get((Class\u003c?\u003e) type.getRawType());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    ParameterizedType ownerType \u003d (type.getOwnerType() instanceof ParameterizedType)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        \u0026\u0026 !Modifier.isStatic(((Class\u003c?\u003e) type.getRawType()).getModifiers())",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (ParameterizedType) type.getOwnerType() : null;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    List\u003cTypeName\u003e typeArguments \u003d TypeName.list(type.getActualTypeArguments(), map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return (ownerType !\u003d null)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? get(ownerType, map).nestedClass(rawType.simpleName(), typeArguments)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : new ParameterizedTypeName(null, rawType, typeArguments);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(WildcardType wildcardName, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.WildcardTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-837696929",
      "lines": [
        {
          "code": "    return new WildcardTypeName(",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getUpperBounds(), map),",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getLowerBounds(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeVariableName get(java.lang.reflect.TypeVariable\u003c?\u003e type,",
      "className": "com.squareup.javapoet.TypeVariableName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-716374754",
      "lines": [
        {
          "code": "      Map\u003cType, TypeVariableName\u003e map) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    TypeVariableName result \u003d map.get(type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e bounds \u003d new ArrayList\u003c\u003e();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e visibleBounds \u003d Collections.unmodifiableList(bounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result \u003d new TypeVariableName(type.getName(), visibleBounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      map.put(type, result);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      for (Type bound : type.getBounds()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        bounds.add(TypeName.get(bound, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      bounds.remove(OBJECT);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static ArrayTypeName get(GenericArrayType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_1787932620",
      "lines": [
        {
          "code": "    return ArrayTypeName.of(get(type.getGenericComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-2093551879",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ArrayTypeName(TypeName componentType, List\u003cAnnotationSpec\u003e annotations) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: ArrayTypeName([PsiType:TypeName, PsiType:List\u003cAnnotationSpec\u003e])_-1486263595",
      "lines": [
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.componentType \u003d checkNotNull(componentType, \"rawType \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "ArrayList",
      "className": "java.util.ArrayList",
      "id": "MethodSignatureBackedByPsiMethod: ArrayList([])_89540840",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ArrayTypeName(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: ArrayTypeName([PsiType:TypeName])_-1423779460",
      "lines": [
        {
          "code": "    this(componentType, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_2025939723",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ArrayTypeName of(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_-1117447178",
      "lines": [
        {
          "code": "    return new ArrayTypeName(componentType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_889026459",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getComponentType",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getComponentType([])_-281432679",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_139008274",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static ParameterizedTypeName get(ParameterizedType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1703136312",
      "lines": [
        {
          "code": "    ClassName rawType \u003d ClassName.get((Class\u003c?\u003e) type.getRawType());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    ParameterizedType ownerType \u003d (type.getOwnerType() instanceof ParameterizedType)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        \u0026\u0026 !Modifier.isStatic(((Class\u003c?\u003e) type.getRawType()).getModifiers())",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (ParameterizedType) type.getOwnerType() : null;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    List\u003cTypeName\u003e typeArguments \u003d TypeName.list(type.getActualTypeArguments(), map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return (ownerType !\u003d null)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? get(ownerType, map).nestedClass(rawType.simpleName(), typeArguments)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : new ParameterizedTypeName(null, rawType, typeArguments);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(WildcardType wildcardName, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.WildcardTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_882903812",
      "lines": [
        {
          "code": "    return new WildcardTypeName(",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getUpperBounds(), map),",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getLowerBounds(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeVariableName get(java.lang.reflect.TypeVariable\u003c?\u003e type,",
      "className": "com.squareup.javapoet.TypeVariableName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-277378142",
      "lines": [
        {
          "code": "      Map\u003cType, TypeVariableName\u003e map) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    TypeVariableName result \u003d map.get(type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e bounds \u003d new ArrayList\u003c\u003e();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e visibleBounds \u003d Collections.unmodifiableList(bounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result \u003d new TypeVariableName(type.getName(), visibleBounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      map.put(type, result);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      for (Type bound : type.getBounds()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        bounds.add(TypeName.get(bound, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      bounds.remove(OBJECT);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static ArrayTypeName get(GenericArrayType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_-805055772",
      "lines": [
        {
          "code": "    return ArrayTypeName.of(get(type.getGenericComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_627394686",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1283293695",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1022003072",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-1279910779",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1857550789",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_20438339",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_418398714",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_1437113479",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_1808401244",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1260148651",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-2039552658",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_1962378926",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1722967274",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1010155812",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-1747178051",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1668016942",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-21581045",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-47948257",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-1175995257",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_292170249",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-65804885",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-1385270583",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1586623128",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1620739076",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1733638039",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getRawType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getRawType([])_263504621",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getOwnerType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getOwnerType([])_-603362399",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isStatic",
      "className": "java.lang.reflect.Modifier",
      "id": "MethodSignatureBackedByPsiMethod: isStatic([PsiType:int])_1658592953",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getModifiers",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getModifiers([])_-1937708207",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getRawType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getRawType([])_736736331",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getOwnerType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getOwnerType([])_1496842538",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static List\u003cTypeName\u003e list(Type[] types, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-165827006",
      "lines": [
        {
          "code": "    List\u003cTypeName\u003e result \u003d new ArrayList\u003c\u003e(types.length);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (Type type : types) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result.add(get(type, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getActualTypeArguments",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getActualTypeArguments([])_780929315",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public ParameterizedTypeName nestedClass(String name, List\u003cTypeName\u003e typeArguments) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String, PsiType:List\u003cTypeName\u003e])_1315156689",
      "lines": [
        {
          "code": "    checkNotNull(name, \"name \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return new ParameterizedTypeName(this, rawType.nestedClass(name), typeArguments,",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static ParameterizedTypeName get(ParameterizedType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-987199289",
      "lines": [
        {
          "code": "    ClassName rawType \u003d ClassName.get((Class\u003c?\u003e) type.getRawType());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    ParameterizedType ownerType \u003d (type.getOwnerType() instanceof ParameterizedType)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        \u0026\u0026 !Modifier.isStatic(((Class\u003c?\u003e) type.getRawType()).getModifiers())",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (ParameterizedType) type.getOwnerType() : null;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    List\u003cTypeName\u003e typeArguments \u003d TypeName.list(type.getActualTypeArguments(), map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return (ownerType !\u003d null)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? get(ownerType, map).nestedClass(rawType.simpleName(), typeArguments)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : new ParameterizedTypeName(null, rawType, typeArguments);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public String simpleName() {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: simpleName([])_749359876",
      "lines": [
        {
          "code": "    return simpleName;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  ParameterizedTypeName(ParameterizedTypeName enclosingType, ClassName rawType,",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: ParameterizedTypeName([PsiType:ParameterizedTypeName, PsiType:ClassName, PsiType:List\u003cTypeName\u003e])_-586978698",
      "lines": [
        {
          "code": "      List\u003cTypeName\u003e typeArguments) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this(enclosingType, rawType, typeArguments, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private WildcardTypeName(List\u003cTypeName\u003e upperBounds, List\u003cTypeName\u003e lowerBounds) {",
      "className": "com.squareup.javapoet.WildcardTypeName",
      "id": "MethodSignatureBackedByPsiMethod: WildcardTypeName([PsiType:List\u003cTypeName\u003e, PsiType:List\u003cTypeName\u003e])_-1435206812",
      "lines": [
        {
          "code": "    this(upperBounds, lowerBounds, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static List\u003cTypeName\u003e list(Type[] types, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-481443447",
      "lines": [
        {
          "code": "    List\u003cTypeName\u003e result \u003d new ArrayList\u003c\u003e(types.length);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (Type type : types) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result.add(get(type, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getUpperBounds",
      "className": "java.lang.reflect.WildcardType",
      "id": "MethodSignatureBackedByPsiMethod: getUpperBounds([])_-1079841772",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static List\u003cTypeName\u003e list(Type[] types, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_1575593571",
      "lines": [
        {
          "code": "    List\u003cTypeName\u003e result \u003d new ArrayList\u003c\u003e(types.length);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (Type type : types) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result.add(get(type, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getLowerBounds",
      "className": "java.lang.reflect.WildcardType",
      "id": "MethodSignatureBackedByPsiMethod: getLowerBounds([])_1088671455",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "get",
      "className": "java.util.Map",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Object])_709239991",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "ArrayList",
      "className": "java.util.ArrayList",
      "id": "MethodSignatureBackedByPsiMethod: ArrayList([])_1406118869",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "unmodifiableList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eunmodifiableList([PsiType:List\u003c? extends T\u003e])_-2052148342",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private TypeVariableName(String name, List\u003cTypeName\u003e bounds) {",
      "className": "com.squareup.javapoet.TypeVariableName",
      "id": "MethodSignatureBackedByPsiMethod: TypeVariableName([PsiType:String, PsiType:List\u003cTypeName\u003e])_1463013723",
      "lines": [
        {
          "code": "    this(name, bounds, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.reflect.TypeVariable",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-1002467906",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "put",
      "className": "java.util.Map",
      "id": "MethodSignatureBackedByPsiMethod: put([PsiType:K, PsiType:V])_-1713122587",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getBounds",
      "className": "java.lang.reflect.TypeVariable",
      "id": "MethodSignatureBackedByPsiMethod: getBounds([])_-803253470",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "add",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_-1103783503",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-623317659",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "remove",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: remove([PsiType:Object])_-1333283527",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ArrayTypeName of(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_343382354",
      "lines": [
        {
          "code": "    return new ArrayTypeName(componentType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1445415620",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getGenericComponentType",
      "className": "java.lang.reflect.GenericArrayType",
      "id": "MethodSignatureBackedByPsiMethod: getGenericComponentType([])_1536130116",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-48534138",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-710596930",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-913792029",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_547889270",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_577168098",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-612702365",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-1005088682",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1818032781",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName,",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-393083733",
      "lines": [
        {
          "code": "      List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.packageName \u003d Objects.requireNonNull(packageName, \"packageName \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.enclosingClassName \u003d enclosingClassName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.simpleName \u003d simpleName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.canonicalName \u003d enclosingClassName !\u003d null",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (enclosingClassName.canonicalName + \u0027.\u0027 + simpleName)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : (packageName.isEmpty() ? simpleName : packageName + \u0027.\u0027 + simpleName);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptyList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_-345937241",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-731527018",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1541255738",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_168452263",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-332650325",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1760148155",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_1733638013",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1951828116",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_1651329252",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_-1070302735",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_1524230626",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-842960126",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_-1238974999",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_868945859",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_693525997",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_99361734",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-514798963",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_1768758683",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1360113807",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-1731041392",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_496714800",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-312110455",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-464543959",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2048893160",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1739577774",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1089832637",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1836918975",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_389879189",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1567405208",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_1465721452",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1328024946",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_-2069725530",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_-609984782",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_1762406169",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_298258340",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_-1977815434",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1602575565",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1926414448",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_1219905149",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-628658150",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1749470779",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-920892846",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_823155223",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_856464956",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_989024622",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_608886619",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-787288589",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-280370690",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "ArrayList",
      "className": "java.util.ArrayList",
      "id": "MethodSignatureBackedByPsiMethod: ArrayList([PsiType:int])_-1127590605",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "add",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_-1331045465",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_2048436268",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1087554536",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ParameterizedTypeName(ParameterizedTypeName enclosingType, ClassName rawType,",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: ParameterizedTypeName([PsiType:ParameterizedTypeName, PsiType:ClassName, PsiType:List\u003cTypeName\u003e, PsiType:List\u003cAnnotationSpec\u003e])_-1525876561",
      "lines": [
        {
          "code": "      List\u003cTypeName\u003e typeArguments, List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.rawType \u003d checkNotNull(rawType, \"rawType \u003d\u003d null\").annotated(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.enclosingType \u003d enclosingType;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.typeArguments \u003d Util.immutableList(typeArguments);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!this.typeArguments.isEmpty() || enclosingType !\u003d null,",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        \"no type arguments: %s\", rawType);",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (TypeName typeArgument : this.typeArguments) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      checkArgument(!typeArgument.isPrimitive() \u0026\u0026 typeArgument !\u003d VOID,",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          \"invalid type parameter: %s\", typeArgument);",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-1979952904",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "ArrayList",
      "className": "java.util.ArrayList",
      "id": "MethodSignatureBackedByPsiMethod: ArrayList([])_-1680869393",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1451490371",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getRawType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getRawType([])_1350174523",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getOwnerType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getOwnerType([])_-2146785834",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isStatic",
      "className": "java.lang.reflect.Modifier",
      "id": "MethodSignatureBackedByPsiMethod: isStatic([PsiType:int])_645091114",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getModifiers",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getModifiers([])_213060313",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getRawType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getRawType([])_-1617883449",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getOwnerType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getOwnerType([])_-1181142569",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static List\u003cTypeName\u003e list(Type[] types, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-2065775741",
      "lines": [
        {
          "code": "    List\u003cTypeName\u003e result \u003d new ArrayList\u003c\u003e(types.length);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (Type type : types) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result.add(get(type, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getActualTypeArguments",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getActualTypeArguments([])_-1082677060",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public ParameterizedTypeName nestedClass(String name, List\u003cTypeName\u003e typeArguments) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String, PsiType:List\u003cTypeName\u003e])_1295707117",
      "lines": [
        {
          "code": "    checkNotNull(name, \"name \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return new ParameterizedTypeName(this, rawType.nestedClass(name), typeArguments,",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static ParameterizedTypeName get(ParameterizedType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2106205664",
      "lines": [
        {
          "code": "    ClassName rawType \u003d ClassName.get((Class\u003c?\u003e) type.getRawType());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    ParameterizedType ownerType \u003d (type.getOwnerType() instanceof ParameterizedType)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        \u0026\u0026 !Modifier.isStatic(((Class\u003c?\u003e) type.getRawType()).getModifiers())",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (ParameterizedType) type.getOwnerType() : null;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    List\u003cTypeName\u003e typeArguments \u003d TypeName.list(type.getActualTypeArguments(), map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return (ownerType !\u003d null)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? get(ownerType, map).nestedClass(rawType.simpleName(), typeArguments)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : new ParameterizedTypeName(null, rawType, typeArguments);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public String simpleName() {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: simpleName([])_1420446347",
      "lines": [
        {
          "code": "    return simpleName;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  ParameterizedTypeName(ParameterizedTypeName enclosingType, ClassName rawType,",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: ParameterizedTypeName([PsiType:ParameterizedTypeName, PsiType:ClassName, PsiType:List\u003cTypeName\u003e])_1612302711",
      "lines": [
        {
          "code": "      List\u003cTypeName\u003e typeArguments) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this(enclosingType, rawType, typeArguments, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ParameterizedTypeName(ParameterizedTypeName enclosingType, ClassName rawType,",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: ParameterizedTypeName([PsiType:ParameterizedTypeName, PsiType:ClassName, PsiType:List\u003cTypeName\u003e, PsiType:List\u003cAnnotationSpec\u003e])_-1687780541",
      "lines": [
        {
          "code": "      List\u003cTypeName\u003e typeArguments, List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.rawType \u003d checkNotNull(rawType, \"rawType \u003d\u003d null\").annotated(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.enclosingType \u003d enclosingType;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.typeArguments \u003d Util.immutableList(typeArguments);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!this.typeArguments.isEmpty() || enclosingType !\u003d null,",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        \"no type arguments: %s\", rawType);",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (TypeName typeArgument : this.typeArguments) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      checkArgument(!typeArgument.isPrimitive() \u0026\u0026 typeArgument !\u003d VOID,",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          \"invalid type parameter: %s\", typeArgument);",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "ArrayList",
      "className": "java.util.ArrayList",
      "id": "MethodSignatureBackedByPsiMethod: ArrayList([])_1243902507",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private WildcardTypeName(List\u003cTypeName\u003e upperBounds, List\u003cTypeName\u003e lowerBounds,",
      "className": "com.squareup.javapoet.WildcardTypeName",
      "id": "MethodSignatureBackedByPsiMethod: WildcardTypeName([PsiType:List\u003cTypeName\u003e, PsiType:List\u003cTypeName\u003e, PsiType:List\u003cAnnotationSpec\u003e])_-517012173",
      "lines": [
        {
          "code": "      List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.upperBounds \u003d Util.immutableList(upperBounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.lowerBounds \u003d Util.immutableList(lowerBounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(this.upperBounds.size() \u003d\u003d 1, \"unexpected extends bounds: %s\", upperBounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (TypeName upperBound : this.upperBounds) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      checkArgument(!upperBound.isPrimitive() \u0026\u0026 upperBound !\u003d VOID,",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          \"invalid upper bound: %s\", upperBound);",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (TypeName lowerBound : this.lowerBounds) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      checkArgument(!lowerBound.isPrimitive() \u0026\u0026 lowerBound !\u003d VOID,",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          \"invalid lower bound: %s\", lowerBound);",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "ArrayList",
      "className": "java.util.ArrayList",
      "id": "MethodSignatureBackedByPsiMethod: ArrayList([])_1030187940",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "ArrayList",
      "className": "java.util.ArrayList",
      "id": "MethodSignatureBackedByPsiMethod: ArrayList([PsiType:int])_-660128784",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "add",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_1122624713",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_701582974",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "ArrayList",
      "className": "java.util.ArrayList",
      "id": "MethodSignatureBackedByPsiMethod: ArrayList([PsiType:int])_-530410612",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "add",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_-324530303",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-26056342",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private TypeVariableName(String name, List\u003cTypeName\u003e bounds, List\u003cAnnotationSpec\u003e annotations) {",
      "className": "com.squareup.javapoet.TypeVariableName",
      "id": "MethodSignatureBackedByPsiMethod: TypeVariableName([PsiType:String, PsiType:List\u003cTypeName\u003e, PsiType:List\u003cAnnotationSpec\u003e])_-78610056",
      "lines": [
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.name \u003d checkNotNull(name, \"name \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.bounds \u003d bounds;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (TypeName bound : this.bounds) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      checkArgument(!bound.isPrimitive() \u0026\u0026 bound !\u003d VOID, \"invalid bound: %s\", bound);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "ArrayList",
      "className": "java.util.ArrayList",
      "id": "MethodSignatureBackedByPsiMethod: ArrayList([])_-1811821548",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_-1558232323",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ArrayTypeName of(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_1179601308",
      "lines": [
        {
          "code": "    return new ArrayTypeName(componentType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1434932634",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getComponentType",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getComponentType([])_-67284522",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_857480502",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static ParameterizedTypeName get(ParameterizedType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_2001533649",
      "lines": [
        {
          "code": "    ClassName rawType \u003d ClassName.get((Class\u003c?\u003e) type.getRawType());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    ParameterizedType ownerType \u003d (type.getOwnerType() instanceof ParameterizedType)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        \u0026\u0026 !Modifier.isStatic(((Class\u003c?\u003e) type.getRawType()).getModifiers())",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (ParameterizedType) type.getOwnerType() : null;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    List\u003cTypeName\u003e typeArguments \u003d TypeName.list(type.getActualTypeArguments(), map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return (ownerType !\u003d null)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? get(ownerType, map).nestedClass(rawType.simpleName(), typeArguments)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : new ParameterizedTypeName(null, rawType, typeArguments);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(WildcardType wildcardName, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.WildcardTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_195139390",
      "lines": [
        {
          "code": "    return new WildcardTypeName(",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getUpperBounds(), map),",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getLowerBounds(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeVariableName get(java.lang.reflect.TypeVariable\u003c?\u003e type,",
      "className": "com.squareup.javapoet.TypeVariableName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_1637960846",
      "lines": [
        {
          "code": "      Map\u003cType, TypeVariableName\u003e map) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    TypeVariableName result \u003d map.get(type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e bounds \u003d new ArrayList\u003c\u003e();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e visibleBounds \u003d Collections.unmodifiableList(bounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result \u003d new TypeVariableName(type.getName(), visibleBounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      map.put(type, result);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      for (Type bound : type.getBounds()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        bounds.add(TypeName.get(bound, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      bounds.remove(OBJECT);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static ArrayTypeName get(GenericArrayType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_1950953058",
      "lines": [
        {
          "code": "    return ArrayTypeName.of(get(type.getGenericComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_258642020",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ArrayTypeName(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: ArrayTypeName([PsiType:TypeName])_-919995559",
      "lines": [
        {
          "code": "    this(componentType, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_708819639",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ArrayTypeName of(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_441646313",
      "lines": [
        {
          "code": "    return new ArrayTypeName(componentType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1665649118",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getComponentType",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getComponentType([])_-1563125146",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1218251915",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static ParameterizedTypeName get(ParameterizedType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_21769087",
      "lines": [
        {
          "code": "    ClassName rawType \u003d ClassName.get((Class\u003c?\u003e) type.getRawType());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    ParameterizedType ownerType \u003d (type.getOwnerType() instanceof ParameterizedType)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        \u0026\u0026 !Modifier.isStatic(((Class\u003c?\u003e) type.getRawType()).getModifiers())",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (ParameterizedType) type.getOwnerType() : null;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    List\u003cTypeName\u003e typeArguments \u003d TypeName.list(type.getActualTypeArguments(), map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return (ownerType !\u003d null)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? get(ownerType, map).nestedClass(rawType.simpleName(), typeArguments)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : new ParameterizedTypeName(null, rawType, typeArguments);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(WildcardType wildcardName, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.WildcardTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1854979724",
      "lines": [
        {
          "code": "    return new WildcardTypeName(",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getUpperBounds(), map),",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getLowerBounds(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeVariableName get(java.lang.reflect.TypeVariable\u003c?\u003e type,",
      "className": "com.squareup.javapoet.TypeVariableName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_64532129",
      "lines": [
        {
          "code": "      Map\u003cType, TypeVariableName\u003e map) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    TypeVariableName result \u003d map.get(type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e bounds \u003d new ArrayList\u003c\u003e();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e visibleBounds \u003d Collections.unmodifiableList(bounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result \u003d new TypeVariableName(type.getName(), visibleBounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      map.put(type, result);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      for (Type bound : type.getBounds()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        bounds.add(TypeName.get(bound, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      bounds.remove(OBJECT);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static ArrayTypeName get(GenericArrayType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_1468785333",
      "lines": [
        {
          "code": "    return ArrayTypeName.of(get(type.getGenericComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1105554549",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "unmodifiableList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eunmodifiableList([PsiType:List\u003c? extends T\u003e])_-1942585644",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "ArrayList",
      "className": "java.util.ArrayList",
      "id": "MethodSignatureBackedByPsiMethod: ArrayList([PsiType:Collection\u003c? extends E\u003e])_-858390971",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter(Appendable out, String indent, Set\u003cString\u003e staticImports, Set\u003cString\u003e alwaysQualify) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-313171054",
      "lines": [
        {
          "code": "    this(out, indent, Collections.emptyMap(), staticImports, alwaysQualify);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_719377996",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_1044771360",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_-319794113",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public boolean isAnnotated() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: isAnnotated([])_747134202",
      "lines": [
        {
          "code": "    return !annotations.isEmpty();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public CodeWriter emit(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_-208835189",
      "lines": [
        {
          "code": "    return emitAndIndent(s);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAnnotations(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_1853299514",
      "lines": [
        {
          "code": "    for (AnnotationSpec annotation : annotations) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      annotation.emit(out, true);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      out.emit(\" \");",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return out;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAndIndent(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_693981219",
      "lines": [
        {
          "code": "    boolean first \u003d true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    for (String line : s.split(\"\\\\R\", -1)) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      // Emit a newline character. Make sure blank lines in Javadoc \u0026 comments look good.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (!first) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        if ((javadoc || comment) \u0026\u0026 trailingNewline) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(javadoc ? \" *\" : \"//\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        out.append(\"\\n\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        trailingNewline \u003d true;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (statementLine !\u003d -1) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (statementLine \u003d\u003d 0) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            indent(2); // Begin multiple-line statement. Increase the indentation level.",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          statementLine++;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      first \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (line.isEmpty()) continue; // Don\u0027t indent empty lines.",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Emit indentation and comment prefix if necessary.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (trailingNewline) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (javadoc) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\" * \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        } else if (comment) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\"// \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.append(line);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      trailingNewline \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return this;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter(Appendable out, String indent, Set\u003cString\u003e staticImports, Set\u003cString\u003e alwaysQualify) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_1195541649",
      "lines": [
        {
          "code": "    this(out, indent, Collections.emptyMap(), staticImports, alwaysQualify);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-1433339950",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-1378393790",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_669696355",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public boolean isAnnotated() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: isAnnotated([])_1259072468",
      "lines": [
        {
          "code": "    return !annotations.isEmpty();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public CodeWriter emit(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_-1978438610",
      "lines": [
        {
          "code": "    return emitAndIndent(s);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAnnotations(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_-1702732196",
      "lines": [
        {
          "code": "    for (AnnotationSpec annotation : annotations) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      annotation.emit(out, true);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      out.emit(\" \");",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return out;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAndIndent(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_-692911683",
      "lines": [
        {
          "code": "    boolean first \u003d true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    for (String line : s.split(\"\\\\R\", -1)) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      // Emit a newline character. Make sure blank lines in Javadoc \u0026 comments look good.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (!first) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        if ((javadoc || comment) \u0026\u0026 trailingNewline) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(javadoc ? \" *\" : \"//\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        out.append(\"\\n\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        trailingNewline \u003d true;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (statementLine !\u003d -1) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (statementLine \u003d\u003d 0) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            indent(2); // Begin multiple-line statement. Increase the indentation level.",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          statementLine++;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      first \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (line.isEmpty()) continue; // Don\u0027t indent empty lines.",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Emit indentation and comment prefix if necessary.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (trailingNewline) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (javadoc) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\" * \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        } else if (comment) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\"// \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.append(line);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      trailingNewline \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return this;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter(Appendable out, String indent, Set\u003cString\u003e staticImports, Set\u003cString\u003e alwaysQualify) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_1289075585",
      "lines": [
        {
          "code": "    this(out, indent, Collections.emptyMap(), staticImports, alwaysQualify);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_130061485",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_1945019318",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_-1265106187",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public boolean isAnnotated() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: isAnnotated([])_-1918975690",
      "lines": [
        {
          "code": "    return !annotations.isEmpty();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public CodeWriter emit(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_290043189",
      "lines": [
        {
          "code": "    return emitAndIndent(s);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAnnotations(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_-42714679",
      "lines": [
        {
          "code": "    for (AnnotationSpec annotation : annotations) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      annotation.emit(out, true);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      out.emit(\" \");",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return out;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAndIndent(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_1383400388",
      "lines": [
        {
          "code": "    boolean first \u003d true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    for (String line : s.split(\"\\\\R\", -1)) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      // Emit a newline character. Make sure blank lines in Javadoc \u0026 comments look good.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (!first) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        if ((javadoc || comment) \u0026\u0026 trailingNewline) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(javadoc ? \" *\" : \"//\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        out.append(\"\\n\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        trailingNewline \u003d true;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (statementLine !\u003d -1) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (statementLine \u003d\u003d 0) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            indent(2); // Begin multiple-line statement. Increase the indentation level.",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          statementLine++;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      first \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (line.isEmpty()) continue; // Don\u0027t indent empty lines.",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Emit indentation and comment prefix if necessary.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (trailingNewline) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (javadoc) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\" * \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        } else if (comment) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\"// \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.append(line);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      trailingNewline \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return this;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter(Appendable out, String indent, Set\u003cString\u003e staticImports, Set\u003cString\u003e alwaysQualify) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-1910459560",
      "lines": [
        {
          "code": "    this(out, indent, Collections.emptyMap(), staticImports, alwaysQualify);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_1717193617",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_444883166",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_-545120240",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public boolean isAnnotated() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: isAnnotated([])_1353928502",
      "lines": [
        {
          "code": "    return !annotations.isEmpty();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public CodeWriter emit(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_-1265615668",
      "lines": [
        {
          "code": "    return emitAndIndent(s);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAnnotations(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_1367234003",
      "lines": [
        {
          "code": "    for (AnnotationSpec annotation : annotations) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      annotation.emit(out, true);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      out.emit(\" \");",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return out;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAndIndent(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_1667510364",
      "lines": [
        {
          "code": "    boolean first \u003d true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    for (String line : s.split(\"\\\\R\", -1)) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      // Emit a newline character. Make sure blank lines in Javadoc \u0026 comments look good.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (!first) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        if ((javadoc || comment) \u0026\u0026 trailingNewline) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(javadoc ? \" *\" : \"//\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        out.append(\"\\n\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        trailingNewline \u003d true;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (statementLine !\u003d -1) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (statementLine \u003d\u003d 0) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            indent(2); // Begin multiple-line statement. Increase the indentation level.",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          statementLine++;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      first \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (line.isEmpty()) continue; // Don\u0027t indent empty lines.",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Emit indentation and comment prefix if necessary.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (trailingNewline) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (javadoc) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\" * \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        } else if (comment) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\"// \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.append(line);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      trailingNewline \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return this;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter(Appendable out, String indent, Set\u003cString\u003e staticImports, Set\u003cString\u003e alwaysQualify) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-339692179",
      "lines": [
        {
          "code": "    this(out, indent, Collections.emptyMap(), staticImports, alwaysQualify);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_1647903682",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_1585782558",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_-787043199",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public boolean isAnnotated() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: isAnnotated([])_-822564723",
      "lines": [
        {
          "code": "    return !annotations.isEmpty();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public CodeWriter emit(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_110802163",
      "lines": [
        {
          "code": "    return emitAndIndent(s);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAnnotations(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_1668720146",
      "lines": [
        {
          "code": "    for (AnnotationSpec annotation : annotations) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      annotation.emit(out, true);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      out.emit(\" \");",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return out;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAndIndent(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_-1232829026",
      "lines": [
        {
          "code": "    boolean first \u003d true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    for (String line : s.split(\"\\\\R\", -1)) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      // Emit a newline character. Make sure blank lines in Javadoc \u0026 comments look good.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (!first) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        if ((javadoc || comment) \u0026\u0026 trailingNewline) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(javadoc ? \" *\" : \"//\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        out.append(\"\\n\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        trailingNewline \u003d true;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (statementLine !\u003d -1) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (statementLine \u003d\u003d 0) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            indent(2); // Begin multiple-line statement. Increase the indentation level.",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          statementLine++;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      first \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (line.isEmpty()) continue; // Don\u0027t indent empty lines.",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Emit indentation and comment prefix if necessary.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (trailingNewline) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (javadoc) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\" * \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        } else if (comment) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\"// \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.append(line);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      trailingNewline \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return this;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter(Appendable out, String indent, Set\u003cString\u003e staticImports, Set\u003cString\u003e alwaysQualify) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_1613140476",
      "lines": [
        {
          "code": "    this(out, indent, Collections.emptyMap(), staticImports, alwaysQualify);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-1280775270",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-1117478815",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_-2139083956",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public boolean isAnnotated() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: isAnnotated([])_-1536659174",
      "lines": [
        {
          "code": "    return !annotations.isEmpty();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public CodeWriter emit(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_175305725",
      "lines": [
        {
          "code": "    return emitAndIndent(s);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAnnotations(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_-1896608287",
      "lines": [
        {
          "code": "    for (AnnotationSpec annotation : annotations) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      annotation.emit(out, true);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      out.emit(\" \");",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return out;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAndIndent(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_421146646",
      "lines": [
        {
          "code": "    boolean first \u003d true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    for (String line : s.split(\"\\\\R\", -1)) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      // Emit a newline character. Make sure blank lines in Javadoc \u0026 comments look good.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (!first) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        if ((javadoc || comment) \u0026\u0026 trailingNewline) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(javadoc ? \" *\" : \"//\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        out.append(\"\\n\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        trailingNewline \u003d true;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (statementLine !\u003d -1) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (statementLine \u003d\u003d 0) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            indent(2); // Begin multiple-line statement. Increase the indentation level.",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          statementLine++;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      first \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (line.isEmpty()) continue; // Don\u0027t indent empty lines.",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Emit indentation and comment prefix if necessary.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (trailingNewline) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (javadoc) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\" * \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        } else if (comment) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\"// \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.append(line);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      trailingNewline \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return this;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter(Appendable out, String indent, Set\u003cString\u003e staticImports, Set\u003cString\u003e alwaysQualify) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-1245505370",
      "lines": [
        {
          "code": "    this(out, indent, Collections.emptyMap(), staticImports, alwaysQualify);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-895891705",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_437276306",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_-1034338009",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public boolean isAnnotated() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: isAnnotated([])_-1645060513",
      "lines": [
        {
          "code": "    return !annotations.isEmpty();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public CodeWriter emit(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_720481043",
      "lines": [
        {
          "code": "    return emitAndIndent(s);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAnnotations(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_-827648801",
      "lines": [
        {
          "code": "    for (AnnotationSpec annotation : annotations) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      annotation.emit(out, true);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      out.emit(\" \");",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return out;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAndIndent(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_541943109",
      "lines": [
        {
          "code": "    boolean first \u003d true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    for (String line : s.split(\"\\\\R\", -1)) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      // Emit a newline character. Make sure blank lines in Javadoc \u0026 comments look good.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (!first) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        if ((javadoc || comment) \u0026\u0026 trailingNewline) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(javadoc ? \" *\" : \"//\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        out.append(\"\\n\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        trailingNewline \u003d true;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (statementLine !\u003d -1) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (statementLine \u003d\u003d 0) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            indent(2); // Begin multiple-line statement. Increase the indentation level.",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          statementLine++;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      first \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (line.isEmpty()) continue; // Don\u0027t indent empty lines.",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Emit indentation and comment prefix if necessary.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (trailingNewline) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (javadoc) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\" * \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        } else if (comment) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\"// \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.append(line);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      trailingNewline \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return this;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter(Appendable out, String indent, Set\u003cString\u003e staticImports, Set\u003cString\u003e alwaysQualify) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-1944444690",
      "lines": [
        {
          "code": "    this(out, indent, Collections.emptyMap(), staticImports, alwaysQualify);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-413364726",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-1072515036",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_1185134334",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public boolean isAnnotated() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: isAnnotated([])_367478786",
      "lines": [
        {
          "code": "    return !annotations.isEmpty();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public CodeWriter emit(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_-81302353",
      "lines": [
        {
          "code": "    return emitAndIndent(s);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAnnotations(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_50113392",
      "lines": [
        {
          "code": "    for (AnnotationSpec annotation : annotations) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      annotation.emit(out, true);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      out.emit(\" \");",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return out;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAndIndent(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_-1635840480",
      "lines": [
        {
          "code": "    boolean first \u003d true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    for (String line : s.split(\"\\\\R\", -1)) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      // Emit a newline character. Make sure blank lines in Javadoc \u0026 comments look good.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (!first) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        if ((javadoc || comment) \u0026\u0026 trailingNewline) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(javadoc ? \" *\" : \"//\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        out.append(\"\\n\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        trailingNewline \u003d true;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (statementLine !\u003d -1) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (statementLine \u003d\u003d 0) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            indent(2); // Begin multiple-line statement. Increase the indentation level.",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          statementLine++;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      first \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (line.isEmpty()) continue; // Don\u0027t indent empty lines.",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Emit indentation and comment prefix if necessary.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (trailingNewline) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (javadoc) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\" * \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        } else if (comment) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\"// \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.append(line);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      trailingNewline \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return this;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter(Appendable out, String indent, Set\u003cString\u003e staticImports, Set\u003cString\u003e alwaysQualify) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-1946279235",
      "lines": [
        {
          "code": "    this(out, indent, Collections.emptyMap(), staticImports, alwaysQualify);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_2030459705",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_1408900235",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_-1666364307",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public boolean isAnnotated() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: isAnnotated([])_1065732174",
      "lines": [
        {
          "code": "    return !annotations.isEmpty();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public CodeWriter emit(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_-1351613663",
      "lines": [
        {
          "code": "    return emitAndIndent(s);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAnnotations(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_-1662451910",
      "lines": [
        {
          "code": "    for (AnnotationSpec annotation : annotations) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      annotation.emit(out, true);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      out.emit(\" \");",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return out;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAndIndent(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_2107130255",
      "lines": [
        {
          "code": "    boolean first \u003d true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    for (String line : s.split(\"\\\\R\", -1)) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      // Emit a newline character. Make sure blank lines in Javadoc \u0026 comments look good.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (!first) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        if ((javadoc || comment) \u0026\u0026 trailingNewline) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(javadoc ? \" *\" : \"//\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        out.append(\"\\n\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        trailingNewline \u003d true;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (statementLine !\u003d -1) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (statementLine \u003d\u003d 0) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            indent(2); // Begin multiple-line statement. Increase the indentation level.",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          statementLine++;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      first \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (line.isEmpty()) continue; // Don\u0027t indent empty lines.",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Emit indentation and comment prefix if necessary.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (trailingNewline) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (javadoc) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\" * \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        } else if (comment) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\"// \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.append(line);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      trailingNewline \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return this;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    }
  ],
  "edges": [
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type])_-767997747",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: isAnnotated([])_2066538373",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type])_-549491437",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: annotated([PsiType:AnnotationSpec[]])_801719558",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: unbox([])_-1869273632",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: fail([PsiType:String])_268536818",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: assertEquals([PsiType:Object, PsiType:Object])_-787738798",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: getMessage([])_1897567104",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type])_-767997747",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_941722651",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type])_-767997747",
      "target": "MethodSignatureBackedByPsiMethod: LinkedHashMap([])_-2100327540",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: isAnnotated([])_2066538373",
      "target": "MethodSignatureBackedByPsiMethod: isEmpty([])_-1728789616",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type])_-549491437",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1471242733",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type])_-549491437",
      "target": "MethodSignatureBackedByPsiMethod: LinkedHashMap([])_1472480114",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: annotated([PsiType:AnnotationSpec[]])_801719558",
      "target": "MethodSignatureBackedByPsiMethod: annotated([PsiType:List\u003cAnnotationSpec\u003e])_95768977",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: annotated([PsiType:AnnotationSpec[]])_801719558",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003easList([PsiType:T[]])_1733525394",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: unbox([])_-1869273632",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_461932963",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: unbox([])_-1869273632",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-2081141632",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: unbox([])_-1869273632",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1578152537",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: unbox([])_-1869273632",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_176236506",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: unbox([])_-1869273632",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-722720476",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: unbox([])_-1869273632",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1409026046",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: unbox([])_-1869273632",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_1348870212",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: unbox([])_-1869273632",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_715372093",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: unbox([])_-1869273632",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_947741349",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: unbox([])_-1869273632",
      "target": "MethodSignatureBackedByPsiMethod: UnsupportedOperationException([PsiType:String])_917537161",
      "sourceAnchor": 11,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_941722651",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_-574541489",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_941722651",
      "target": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_807384499",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_941722651",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_388128912",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_941722651",
      "target": "MethodSignatureBackedByPsiMethod: getComponentType([])_1963204971",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_941722651",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_364481799",
      "sourceAnchor": 13,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_941722651",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2105202835",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_941722651",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-708766929",
      "sourceAnchor": 19,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_941722651",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-1443706374",
      "sourceAnchor": 22,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_941722651",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_1455631139",
      "sourceAnchor": 25,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_941722651",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1253909805",
      "sourceAnchor": 28,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1471242733",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_-1745566094",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1471242733",
      "target": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_1726546936",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1471242733",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_669058107",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1471242733",
      "target": "MethodSignatureBackedByPsiMethod: getComponentType([])_968807633",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1471242733",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1382076399",
      "sourceAnchor": 13,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1471242733",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2063098295",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1471242733",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_148543846",
      "sourceAnchor": 19,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1471242733",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-1972928209",
      "sourceAnchor": 22,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1471242733",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_1970379049",
      "sourceAnchor": 25,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1471242733",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-1220664086",
      "sourceAnchor": 28,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: annotated([PsiType:List\u003cAnnotationSpec\u003e])_95768977",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1353723357",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: annotated([PsiType:List\u003cAnnotationSpec\u003e])_95768977",
      "target": "MethodSignatureBackedByPsiMethod: TypeName([PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_578481192",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: annotated([PsiType:List\u003cAnnotationSpec\u003e])_95768977",
      "target": "MethodSignatureBackedByPsiMethod: concatAnnotations([PsiType:List\u003cAnnotationSpec\u003e])_1185778196",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_461932963",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_-299805918",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_461932963",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_-1819126660",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_461932963",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_1234054647",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_461932963",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_-2134140968",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_461932963",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_1517942006",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-2081141632",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_-721831064",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-2081141632",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_1710273994",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-2081141632",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-102925355",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-2081141632",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_1247538145",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-2081141632",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_2027573105",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1578152537",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_-456376429",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1578152537",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_-1489512729",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1578152537",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-581154108",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1578152537",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_530326934",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1578152537",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_1290654495",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_176236506",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_-1331510038",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_176236506",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_1249426715",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_176236506",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-353712015",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_176236506",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_943136870",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_176236506",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_1946264704",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-722720476",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_1286712689",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-722720476",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_1154731932",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-722720476",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-539439835",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-722720476",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_2018055953",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-722720476",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_360439573",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1409026046",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_-198375087",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1409026046",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_812353450",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1409026046",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1232700141",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1409026046",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_-1522176242",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1409026046",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_-989783472",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_1348870212",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_906425070",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_1348870212",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_841773707",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_1348870212",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1651150773",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_1348870212",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_2118891525",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_1348870212",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_-1429028888",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_715372093",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_990646226",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_715372093",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_-183724258",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_715372093",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-952311575",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_715372093",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_-1384151009",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_715372093",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_-1952779620",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_947741349",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_-1895782421",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_947741349",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_2144122664",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_947741349",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_366624129",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_947741349",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_-1314761930",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_947741349",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_-1378640612",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_807384499",
      "target": "MethodSignatureBackedByPsiMethod: ArrayTypeName([PsiType:TypeName])_1356849539",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_388128912",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_-1920580749",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_388128912",
      "target": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_1047767566",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_388128912",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-742213545",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_388128912",
      "target": "MethodSignatureBackedByPsiMethod: getComponentType([])_1641453175",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_388128912",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-552106711",
      "sourceAnchor": 13,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_388128912",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1384360312",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_388128912",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1460079885",
      "sourceAnchor": 19,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_388128912",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_576632222",
      "sourceAnchor": 22,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_388128912",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_-947446474",
      "sourceAnchor": 25,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_388128912",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1863618478",
      "sourceAnchor": 28,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_364481799",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1517519271",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_364481799",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-2113694890",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_364481799",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-1030593946",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_364481799",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1952115431",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_364481799",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_50225028",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_364481799",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_964450976",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_364481799",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_-1556255285",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_364481799",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_1013545678",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_364481799",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1451617243",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_364481799",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-1906038455",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_364481799",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_2075094549",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_364481799",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_124288346",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_364481799",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1157310756",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_364481799",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_924142158",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_364481799",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_607149095",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_364481799",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1624363070",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_364481799",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-882441521",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_364481799",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_1544761980",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_364481799",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_762635494",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_364481799",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1465711932",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_364481799",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_1228476442",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_364481799",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1392172201",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_364481799",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-539059117",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2105202835",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2051703709",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2105202835",
      "target": "MethodSignatureBackedByPsiMethod: getRawType([])_1280738776",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2105202835",
      "target": "MethodSignatureBackedByPsiMethod: getOwnerType([])_-1023567812",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2105202835",
      "target": "MethodSignatureBackedByPsiMethod: isStatic([PsiType:int])_354667995",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2105202835",
      "target": "MethodSignatureBackedByPsiMethod: getModifiers([])_-1402379358",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2105202835",
      "target": "MethodSignatureBackedByPsiMethod: getRawType([])_-410642139",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2105202835",
      "target": "MethodSignatureBackedByPsiMethod: getOwnerType([])_-1494687287",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2105202835",
      "target": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-852263443",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2105202835",
      "target": "MethodSignatureBackedByPsiMethod: getActualTypeArguments([])_-1312332657",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2105202835",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String, PsiType:List\u003cTypeName\u003e])_1401187623",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2105202835",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-71330948",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2105202835",
      "target": "MethodSignatureBackedByPsiMethod: simpleName([])_-1084264243",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2105202835",
      "target": "MethodSignatureBackedByPsiMethod: ParameterizedTypeName([PsiType:ParameterizedTypeName, PsiType:ClassName, PsiType:List\u003cTypeName\u003e])_-28020606",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-708766929",
      "target": "MethodSignatureBackedByPsiMethod: WildcardTypeName([PsiType:List\u003cTypeName\u003e, PsiType:List\u003cTypeName\u003e])_-1123735563",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-708766929",
      "target": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-1765824614",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-708766929",
      "target": "MethodSignatureBackedByPsiMethod: getUpperBounds([])_1327450791",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-708766929",
      "target": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_1047027366",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-708766929",
      "target": "MethodSignatureBackedByPsiMethod: getLowerBounds([])_1601954518",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-1443706374",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Object])_-155615919",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-1443706374",
      "target": "MethodSignatureBackedByPsiMethod: ArrayList([])_89988327",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-1443706374",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eunmodifiableList([PsiType:List\u003c? extends T\u003e])_-265318216",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-1443706374",
      "target": "MethodSignatureBackedByPsiMethod: TypeVariableName([PsiType:String, PsiType:List\u003cTypeName\u003e])_1384606126",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-1443706374",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_749475104",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-1443706374",
      "target": "MethodSignatureBackedByPsiMethod: put([PsiType:K, PsiType:V])_1567421639",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-1443706374",
      "target": "MethodSignatureBackedByPsiMethod: getBounds([])_-610557937",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-1443706374",
      "target": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_-829620812",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-1443706374",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_633220982",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-1443706374",
      "target": "MethodSignatureBackedByPsiMethod: remove([PsiType:Object])_-1932116183",
      "sourceAnchor": 11,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_1455631139",
      "target": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_-230467877",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_1455631139",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_2075692904",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_1455631139",
      "target": "MethodSignatureBackedByPsiMethod: getGenericComponentType([])_-2024263271",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_1726546936",
      "target": "MethodSignatureBackedByPsiMethod: ArrayTypeName([PsiType:TypeName])_942609830",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_669058107",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_-1099793999",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_669058107",
      "target": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_678568900",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_669058107",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1006433481",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_669058107",
      "target": "MethodSignatureBackedByPsiMethod: getComponentType([])_1656146150",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_669058107",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1649531578",
      "sourceAnchor": 13,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_669058107",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_145217713",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_669058107",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1732385884",
      "sourceAnchor": 19,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_669058107",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-2090976207",
      "sourceAnchor": 22,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_669058107",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_-67451782",
      "sourceAnchor": 25,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_669058107",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_290405564",
      "sourceAnchor": 28,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1382076399",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_2047412684",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1382076399",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1916672442",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1382076399",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_1585242776",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1382076399",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-898109943",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1382076399",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1856636474",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1382076399",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_25332587",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1382076399",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_-2049024548",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1382076399",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_-378227577",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1382076399",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_908111141",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1382076399",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_598148293",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1382076399",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_1333116469",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1382076399",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_2067762020",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1382076399",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1578122521",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1382076399",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_1703061737",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1382076399",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1204139083",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1382076399",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_1620069827",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1382076399",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1930805278",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1382076399",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-2143213134",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1382076399",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1707541698",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1382076399",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1348795052",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1382076399",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_1790129874",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1382076399",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-588121260",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1382076399",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-187735104",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2063098295",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1372208060",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2063098295",
      "target": "MethodSignatureBackedByPsiMethod: getRawType([])_-2105936091",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2063098295",
      "target": "MethodSignatureBackedByPsiMethod: getOwnerType([])_-1141204815",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2063098295",
      "target": "MethodSignatureBackedByPsiMethod: isStatic([PsiType:int])_-552860500",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2063098295",
      "target": "MethodSignatureBackedByPsiMethod: getModifiers([])_-570532291",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2063098295",
      "target": "MethodSignatureBackedByPsiMethod: getRawType([])_-66081096",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2063098295",
      "target": "MethodSignatureBackedByPsiMethod: getOwnerType([])_91764971",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2063098295",
      "target": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-324083143",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2063098295",
      "target": "MethodSignatureBackedByPsiMethod: getActualTypeArguments([])_-1259782257",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2063098295",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String, PsiType:List\u003cTypeName\u003e])_-521102771",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2063098295",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1670302266",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2063098295",
      "target": "MethodSignatureBackedByPsiMethod: simpleName([])_5898914",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2063098295",
      "target": "MethodSignatureBackedByPsiMethod: ParameterizedTypeName([PsiType:ParameterizedTypeName, PsiType:ClassName, PsiType:List\u003cTypeName\u003e])_2030095207",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_148543846",
      "target": "MethodSignatureBackedByPsiMethod: WildcardTypeName([PsiType:List\u003cTypeName\u003e, PsiType:List\u003cTypeName\u003e])_1687760302",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_148543846",
      "target": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-114539010",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_148543846",
      "target": "MethodSignatureBackedByPsiMethod: getUpperBounds([])_1078213686",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_148543846",
      "target": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_269849952",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_148543846",
      "target": "MethodSignatureBackedByPsiMethod: getLowerBounds([])_-1245194804",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-1972928209",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Object])_-1062948329",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-1972928209",
      "target": "MethodSignatureBackedByPsiMethod: ArrayList([])_-1723384297",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-1972928209",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eunmodifiableList([PsiType:List\u003c? extends T\u003e])_1967666416",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-1972928209",
      "target": "MethodSignatureBackedByPsiMethod: TypeVariableName([PsiType:String, PsiType:List\u003cTypeName\u003e])_1695955242",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-1972928209",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-17013900",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-1972928209",
      "target": "MethodSignatureBackedByPsiMethod: put([PsiType:K, PsiType:V])_1170137406",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-1972928209",
      "target": "MethodSignatureBackedByPsiMethod: getBounds([])_-258450396",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-1972928209",
      "target": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_-1589929349",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-1972928209",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1208265238",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-1972928209",
      "target": "MethodSignatureBackedByPsiMethod: remove([PsiType:Object])_1780352449",
      "sourceAnchor": 11,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_1970379049",
      "target": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_1942103439",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_1970379049",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_171983242",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_1970379049",
      "target": "MethodSignatureBackedByPsiMethod: getGenericComponentType([])_897428806",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1353723357",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_1553825880",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1353723357",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1228026497",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: TypeName([PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_578481192",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eimmutableList([PsiType:Collection\u003cT\u003e])_-821817767",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: concatAnnotations([PsiType:List\u003cAnnotationSpec\u003e])_1185778196",
      "target": "MethodSignatureBackedByPsiMethod: ArrayList([PsiType:Collection\u003c? extends E\u003e])_1596109733",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: concatAnnotations([PsiType:List\u003cAnnotationSpec\u003e])_1185778196",
      "target": "MethodSignatureBackedByPsiMethod: addAll([PsiType:Collection\u003c? extends E\u003e])_-2136089571",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-2134140968",
      "target": "MethodSignatureBackedByPsiMethod: StringBuilder([])_1950698098",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-2134140968",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-1711760755",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-2134140968",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1069345026",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-2134140968",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_2048717970",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-2134140968",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_1816557768",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1247538145",
      "target": "MethodSignatureBackedByPsiMethod: StringBuilder([])_-1794011896",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1247538145",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-251987953",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1247538145",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-613635096",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1247538145",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_-2048930375",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1247538145",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_2012480471",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_530326934",
      "target": "MethodSignatureBackedByPsiMethod: StringBuilder([])_-1796561847",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_530326934",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-689421954",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_530326934",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-1701788280",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_530326934",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_1083717711",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_530326934",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_-1250687674",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_943136870",
      "target": "MethodSignatureBackedByPsiMethod: StringBuilder([])_651824295",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_943136870",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-1079607048",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_943136870",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1679737202",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_943136870",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_-1795382447",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_943136870",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_-1625579600",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_2018055953",
      "target": "MethodSignatureBackedByPsiMethod: StringBuilder([])_2143307263",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_2018055953",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_365762710",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_2018055953",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-968406728",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_2018055953",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_894867232",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_2018055953",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_-1555114055",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-1522176242",
      "target": "MethodSignatureBackedByPsiMethod: StringBuilder([])_-1153743800",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-1522176242",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-308371613",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-1522176242",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-705914559",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-1522176242",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_1285347743",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-1522176242",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_-252261011",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_2118891525",
      "target": "MethodSignatureBackedByPsiMethod: StringBuilder([])_1470489640",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_2118891525",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-438220321",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_2118891525",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_706589176",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_2118891525",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_813523626",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_2118891525",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_739005790",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-1384151009",
      "target": "MethodSignatureBackedByPsiMethod: StringBuilder([])_-1232521649",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-1384151009",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-341598321",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-1384151009",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1773391365",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-1384151009",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_1360338735",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-1384151009",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_-1972568654",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-1314761930",
      "target": "MethodSignatureBackedByPsiMethod: StringBuilder([])_-2081098075",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-1314761930",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-853270324",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-1314761930",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-1850809294",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-1314761930",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_-1140835973",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-1314761930",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_-884754135",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ArrayTypeName([PsiType:TypeName])_1356849539",
      "target": "MethodSignatureBackedByPsiMethod: ArrayTypeName([PsiType:TypeName, PsiType:List\u003cAnnotationSpec\u003e])_-744998475",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ArrayTypeName([PsiType:TypeName])_1356849539",
      "target": "MethodSignatureBackedByPsiMethod: ArrayList([])_-1879887175",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_1047767566",
      "target": "MethodSignatureBackedByPsiMethod: ArrayTypeName([PsiType:TypeName])_-2101351890",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-742213545",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_-7733722",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-742213545",
      "target": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_-514586298",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-742213545",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1654094694",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-742213545",
      "target": "MethodSignatureBackedByPsiMethod: getComponentType([])_574909545",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-742213545",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1224793212",
      "sourceAnchor": 13,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-742213545",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-108709770",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-742213545",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_576609540",
      "sourceAnchor": 19,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-742213545",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-1391511001",
      "sourceAnchor": 22,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-742213545",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1441870638",
      "sourceAnchor": 25,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-742213545",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-139192940",
      "sourceAnchor": 28,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-552106711",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-298755693",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-552106711",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_580713539",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-552106711",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-1503283510",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-552106711",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-77862040",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-552106711",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_645417124",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-552106711",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-2117554117",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-552106711",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_-203940489",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-552106711",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_-879810921",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-552106711",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-2084234521",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-552106711",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1712645687",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-552106711",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_-470802677",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-552106711",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1206775115",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-552106711",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1086340350",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-552106711",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_742153033",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-552106711",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_248134612",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-552106711",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1216606957",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-552106711",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1571248035",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-552106711",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_683373556",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-552106711",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_2036406377",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-552106711",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1196253959",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-552106711",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-1116028200",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-552106711",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1239917838",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-552106711",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-896094432",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1384360312",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_281944623",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1384360312",
      "target": "MethodSignatureBackedByPsiMethod: getRawType([])_1328321181",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1384360312",
      "target": "MethodSignatureBackedByPsiMethod: getOwnerType([])_1355270193",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1384360312",
      "target": "MethodSignatureBackedByPsiMethod: isStatic([PsiType:int])_-1508203326",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1384360312",
      "target": "MethodSignatureBackedByPsiMethod: getModifiers([])_-337732572",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1384360312",
      "target": "MethodSignatureBackedByPsiMethod: getRawType([])_812302006",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1384360312",
      "target": "MethodSignatureBackedByPsiMethod: getOwnerType([])_1743303711",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1384360312",
      "target": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_1779741825",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1384360312",
      "target": "MethodSignatureBackedByPsiMethod: getActualTypeArguments([])_1783656440",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1384360312",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String, PsiType:List\u003cTypeName\u003e])_-1430489153",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1384360312",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1290894119",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1384360312",
      "target": "MethodSignatureBackedByPsiMethod: simpleName([])_-9083094",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1384360312",
      "target": "MethodSignatureBackedByPsiMethod: ParameterizedTypeName([PsiType:ParameterizedTypeName, PsiType:ClassName, PsiType:List\u003cTypeName\u003e])_181224275",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1460079885",
      "target": "MethodSignatureBackedByPsiMethod: WildcardTypeName([PsiType:List\u003cTypeName\u003e, PsiType:List\u003cTypeName\u003e])_256201601",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1460079885",
      "target": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-720554630",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1460079885",
      "target": "MethodSignatureBackedByPsiMethod: getUpperBounds([])_1279166870",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1460079885",
      "target": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-955422243",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1460079885",
      "target": "MethodSignatureBackedByPsiMethod: getLowerBounds([])_1721657990",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_576632222",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Object])_-443529454",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_576632222",
      "target": "MethodSignatureBackedByPsiMethod: ArrayList([])_-164096410",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_576632222",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eunmodifiableList([PsiType:List\u003c? extends T\u003e])_247930595",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_576632222",
      "target": "MethodSignatureBackedByPsiMethod: TypeVariableName([PsiType:String, PsiType:List\u003cTypeName\u003e])_-1851049233",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_576632222",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-1512608781",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_576632222",
      "target": "MethodSignatureBackedByPsiMethod: put([PsiType:K, PsiType:V])_1251837678",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_576632222",
      "target": "MethodSignatureBackedByPsiMethod: getBounds([])_1545942324",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_576632222",
      "target": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_5858436",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_576632222",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1280623795",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_576632222",
      "target": "MethodSignatureBackedByPsiMethod: remove([PsiType:Object])_1201323889",
      "sourceAnchor": 11,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_-947446474",
      "target": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_1377722700",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_-947446474",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1701342708",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_-947446474",
      "target": "MethodSignatureBackedByPsiMethod: getGenericComponentType([])_381855548",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1517519271",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_1580141199",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1517519271",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1628143180",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-2113694890",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-4119586",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-2113694890",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1632880687",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1952115431",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-1317021702",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1952115431",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_800426408",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_964450976",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-830378057",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_964450976",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1341656654",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1465711932",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_1930179184",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1465711932",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_51245561",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_1228476442",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1141549518",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1392172201",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1088328781",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1392172201",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-858971931",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1392172201",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-1537813451",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1392172201",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1968583899",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1392172201",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_747684834",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1392172201",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1381918462",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1392172201",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_-104328188",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1392172201",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_1988233506",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1392172201",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-498294873",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1392172201",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-1542563642",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1392172201",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_744045268",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1392172201",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-120606114",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1392172201",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-985130247",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1392172201",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_829076891",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1392172201",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_2070014392",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1392172201",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_398165179",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1392172201",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1814332287",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1392172201",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_2009841257",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1392172201",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1672807821",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1392172201",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-406531909",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1392172201",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_378526549",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1392172201",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1010959590",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1392172201",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1610612386",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2051703709",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1655046641",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2051703709",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1027455985",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2051703709",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_624845645",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2051703709",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-789976311",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2051703709",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-425966226",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2051703709",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1714984445",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2051703709",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_-1513890235",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2051703709",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_-1794892254",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2051703709",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-3886168",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2051703709",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-1947555920",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2051703709",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_-817082845",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2051703709",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_760791318",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2051703709",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1567476218",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2051703709",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-1591735875",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2051703709",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1806525865",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2051703709",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1988005741",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2051703709",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-395948125",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2051703709",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_1659779776",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2051703709",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-1124700844",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2051703709",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1878179111",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2051703709",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_65480887",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2051703709",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-979920989",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2051703709",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_754293123",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-852263443",
      "target": "MethodSignatureBackedByPsiMethod: ArrayList([PsiType:int])_47144743",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-852263443",
      "target": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_1783580210",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-852263443",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1957858336",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String, PsiType:List\u003cTypeName\u003e])_1401187623",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-610117255",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String, PsiType:List\u003cTypeName\u003e])_1401187623",
      "target": "MethodSignatureBackedByPsiMethod: ParameterizedTypeName([PsiType:ParameterizedTypeName, PsiType:ClassName, PsiType:List\u003cTypeName\u003e, PsiType:List\u003cAnnotationSpec\u003e])_-648002350",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String, PsiType:List\u003cTypeName\u003e])_1401187623",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_589693776",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String, PsiType:List\u003cTypeName\u003e])_1401187623",
      "target": "MethodSignatureBackedByPsiMethod: ArrayList([])_-1821063292",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-71330948",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-503259285",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-71330948",
      "target": "MethodSignatureBackedByPsiMethod: getRawType([])_1753013941",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-71330948",
      "target": "MethodSignatureBackedByPsiMethod: getOwnerType([])_-799701990",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-71330948",
      "target": "MethodSignatureBackedByPsiMethod: isStatic([PsiType:int])_-1745454668",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-71330948",
      "target": "MethodSignatureBackedByPsiMethod: getModifiers([])_-152442911",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-71330948",
      "target": "MethodSignatureBackedByPsiMethod: getRawType([])_1124159056",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-71330948",
      "target": "MethodSignatureBackedByPsiMethod: getOwnerType([])_-2053904060",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-71330948",
      "target": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_654171253",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-71330948",
      "target": "MethodSignatureBackedByPsiMethod: getActualTypeArguments([])_1689732009",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-71330948",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String, PsiType:List\u003cTypeName\u003e])_2099665657",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-71330948",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1794413258",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-71330948",
      "target": "MethodSignatureBackedByPsiMethod: simpleName([])_1747160295",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-71330948",
      "target": "MethodSignatureBackedByPsiMethod: ParameterizedTypeName([PsiType:ParameterizedTypeName, PsiType:ClassName, PsiType:List\u003cTypeName\u003e])_-2099606258",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ParameterizedTypeName([PsiType:ParameterizedTypeName, PsiType:ClassName, PsiType:List\u003cTypeName\u003e])_-28020606",
      "target": "MethodSignatureBackedByPsiMethod: ParameterizedTypeName([PsiType:ParameterizedTypeName, PsiType:ClassName, PsiType:List\u003cTypeName\u003e, PsiType:List\u003cAnnotationSpec\u003e])_-60206848",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ParameterizedTypeName([PsiType:ParameterizedTypeName, PsiType:ClassName, PsiType:List\u003cTypeName\u003e])_-28020606",
      "target": "MethodSignatureBackedByPsiMethod: ArrayList([])_-725696920",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: WildcardTypeName([PsiType:List\u003cTypeName\u003e, PsiType:List\u003cTypeName\u003e])_-1123735563",
      "target": "MethodSignatureBackedByPsiMethod: WildcardTypeName([PsiType:List\u003cTypeName\u003e, PsiType:List\u003cTypeName\u003e, PsiType:List\u003cAnnotationSpec\u003e])_-668698286",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: WildcardTypeName([PsiType:List\u003cTypeName\u003e, PsiType:List\u003cTypeName\u003e])_-1123735563",
      "target": "MethodSignatureBackedByPsiMethod: ArrayList([])_118324297",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-1765824614",
      "target": "MethodSignatureBackedByPsiMethod: ArrayList([PsiType:int])_-403689709",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-1765824614",
      "target": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_170404594",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-1765824614",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1589745884",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_1047027366",
      "target": "MethodSignatureBackedByPsiMethod: ArrayList([PsiType:int])_-925987016",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_1047027366",
      "target": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_-1791441436",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_1047027366",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1785164131",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: TypeVariableName([PsiType:String, PsiType:List\u003cTypeName\u003e])_1384606126",
      "target": "MethodSignatureBackedByPsiMethod: TypeVariableName([PsiType:String, PsiType:List\u003cTypeName\u003e, PsiType:List\u003cAnnotationSpec\u003e])_-1279240902",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: TypeVariableName([PsiType:String, PsiType:List\u003cTypeName\u003e])_1384606126",
      "target": "MethodSignatureBackedByPsiMethod: ArrayList([])_2111043661",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_633220982",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_-391664120",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_633220982",
      "target": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_-1908716848",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_633220982",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_2076720734",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_633220982",
      "target": "MethodSignatureBackedByPsiMethod: getComponentType([])_1649019080",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_633220982",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_192296994",
      "sourceAnchor": 13,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_633220982",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1195442736",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_633220982",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_683409424",
      "sourceAnchor": 19,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_633220982",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-78542296",
      "sourceAnchor": 22,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_633220982",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_-825443520",
      "sourceAnchor": 25,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_633220982",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1892003047",
      "sourceAnchor": 28,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_-230467877",
      "target": "MethodSignatureBackedByPsiMethod: ArrayTypeName([PsiType:TypeName])_262367625",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_2075692904",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_814070494",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_2075692904",
      "target": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_-121051772",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_2075692904",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-149301088",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_2075692904",
      "target": "MethodSignatureBackedByPsiMethod: getComponentType([])_258324220",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_2075692904",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-778509756",
      "sourceAnchor": 13,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_2075692904",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-771362042",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_2075692904",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-837696929",
      "sourceAnchor": 19,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_2075692904",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-716374754",
      "sourceAnchor": 22,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_2075692904",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_1787932620",
      "sourceAnchor": 25,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_2075692904",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-2093551879",
      "sourceAnchor": 28,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ArrayTypeName([PsiType:TypeName])_942609830",
      "target": "MethodSignatureBackedByPsiMethod: ArrayTypeName([PsiType:TypeName, PsiType:List\u003cAnnotationSpec\u003e])_-1486263595",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ArrayTypeName([PsiType:TypeName])_942609830",
      "target": "MethodSignatureBackedByPsiMethod: ArrayList([])_89540840",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_678568900",
      "target": "MethodSignatureBackedByPsiMethod: ArrayTypeName([PsiType:TypeName])_-1423779460",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1006433481",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_2025939723",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1006433481",
      "target": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_-1117447178",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1006433481",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_889026459",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1006433481",
      "target": "MethodSignatureBackedByPsiMethod: getComponentType([])_-281432679",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1006433481",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_139008274",
      "sourceAnchor": 13,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1006433481",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1703136312",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1006433481",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_882903812",
      "sourceAnchor": 19,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1006433481",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-277378142",
      "sourceAnchor": 22,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1006433481",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_-805055772",
      "sourceAnchor": 25,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1006433481",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_627394686",
      "sourceAnchor": 28,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1649531578",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1283293695",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1649531578",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1022003072",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1649531578",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-1279910779",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1649531578",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1857550789",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1649531578",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_20438339",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1649531578",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_418398714",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1649531578",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_1437113479",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1649531578",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_1808401244",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1649531578",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1260148651",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1649531578",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-2039552658",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1649531578",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_1962378926",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1649531578",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1722967274",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1649531578",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1010155812",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1649531578",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-1747178051",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1649531578",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1668016942",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1649531578",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-21581045",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1649531578",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-47948257",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1649531578",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-1175995257",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1649531578",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_292170249",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1649531578",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-65804885",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1649531578",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-1385270583",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1649531578",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1586623128",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1649531578",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1620739076",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_145217713",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1733638039",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_145217713",
      "target": "MethodSignatureBackedByPsiMethod: getRawType([])_263504621",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_145217713",
      "target": "MethodSignatureBackedByPsiMethod: getOwnerType([])_-603362399",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_145217713",
      "target": "MethodSignatureBackedByPsiMethod: isStatic([PsiType:int])_1658592953",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_145217713",
      "target": "MethodSignatureBackedByPsiMethod: getModifiers([])_-1937708207",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_145217713",
      "target": "MethodSignatureBackedByPsiMethod: getRawType([])_736736331",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_145217713",
      "target": "MethodSignatureBackedByPsiMethod: getOwnerType([])_1496842538",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_145217713",
      "target": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-165827006",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_145217713",
      "target": "MethodSignatureBackedByPsiMethod: getActualTypeArguments([])_780929315",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_145217713",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String, PsiType:List\u003cTypeName\u003e])_1315156689",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_145217713",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-987199289",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_145217713",
      "target": "MethodSignatureBackedByPsiMethod: simpleName([])_749359876",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_145217713",
      "target": "MethodSignatureBackedByPsiMethod: ParameterizedTypeName([PsiType:ParameterizedTypeName, PsiType:ClassName, PsiType:List\u003cTypeName\u003e])_-586978698",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1732385884",
      "target": "MethodSignatureBackedByPsiMethod: WildcardTypeName([PsiType:List\u003cTypeName\u003e, PsiType:List\u003cTypeName\u003e])_-1435206812",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1732385884",
      "target": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-481443447",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1732385884",
      "target": "MethodSignatureBackedByPsiMethod: getUpperBounds([])_-1079841772",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1732385884",
      "target": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_1575593571",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1732385884",
      "target": "MethodSignatureBackedByPsiMethod: getLowerBounds([])_1088671455",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-2090976207",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Object])_709239991",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-2090976207",
      "target": "MethodSignatureBackedByPsiMethod: ArrayList([])_1406118869",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-2090976207",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eunmodifiableList([PsiType:List\u003c? extends T\u003e])_-2052148342",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-2090976207",
      "target": "MethodSignatureBackedByPsiMethod: TypeVariableName([PsiType:String, PsiType:List\u003cTypeName\u003e])_1463013723",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-2090976207",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-1002467906",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-2090976207",
      "target": "MethodSignatureBackedByPsiMethod: put([PsiType:K, PsiType:V])_-1713122587",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-2090976207",
      "target": "MethodSignatureBackedByPsiMethod: getBounds([])_-803253470",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-2090976207",
      "target": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_-1103783503",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-2090976207",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-623317659",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-2090976207",
      "target": "MethodSignatureBackedByPsiMethod: remove([PsiType:Object])_-1333283527",
      "sourceAnchor": 11,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_-67451782",
      "target": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_343382354",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_-67451782",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1445415620",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_-67451782",
      "target": "MethodSignatureBackedByPsiMethod: getGenericComponentType([])_1536130116",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_2047412684",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-48534138",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_2047412684",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-710596930",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1916672442",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-913792029",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1916672442",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_547889270",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-898109943",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_577168098",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-898109943",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-612702365",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_25332587",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-1005088682",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_25332587",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1818032781",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1348795052",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-393083733",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1348795052",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_-345937241",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_1790129874",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-731527018",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-588121260",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1541255738",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-588121260",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_168452263",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-588121260",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-332650325",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-588121260",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1760148155",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-588121260",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_1733638013",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-588121260",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1951828116",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-588121260",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_1651329252",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-588121260",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_-1070302735",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-588121260",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_1524230626",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-588121260",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-842960126",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-588121260",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_-1238974999",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-588121260",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_868945859",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-588121260",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_693525997",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-588121260",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_99361734",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-588121260",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-514798963",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-588121260",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_1768758683",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-588121260",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1360113807",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-588121260",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-1731041392",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-588121260",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_496714800",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-588121260",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-312110455",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-588121260",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-464543959",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-588121260",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2048893160",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-588121260",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1739577774",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1372208060",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1089832637",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1372208060",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1836918975",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1372208060",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_389879189",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1372208060",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1567405208",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1372208060",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_1465721452",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1372208060",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1328024946",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1372208060",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_-2069725530",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1372208060",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_-609984782",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1372208060",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_1762406169",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1372208060",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_298258340",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1372208060",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_-1977815434",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1372208060",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1602575565",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1372208060",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1926414448",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1372208060",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_1219905149",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1372208060",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-628658150",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1372208060",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1749470779",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1372208060",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-920892846",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1372208060",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_823155223",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1372208060",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_856464956",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1372208060",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_989024622",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1372208060",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_608886619",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1372208060",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-787288589",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1372208060",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-280370690",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-324083143",
      "target": "MethodSignatureBackedByPsiMethod: ArrayList([PsiType:int])_-1127590605",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-324083143",
      "target": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_-1331045465",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-324083143",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_2048436268",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String, PsiType:List\u003cTypeName\u003e])_-521102771",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1087554536",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String, PsiType:List\u003cTypeName\u003e])_-521102771",
      "target": "MethodSignatureBackedByPsiMethod: ParameterizedTypeName([PsiType:ParameterizedTypeName, PsiType:ClassName, PsiType:List\u003cTypeName\u003e, PsiType:List\u003cAnnotationSpec\u003e])_-1525876561",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String, PsiType:List\u003cTypeName\u003e])_-521102771",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-1979952904",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String, PsiType:List\u003cTypeName\u003e])_-521102771",
      "target": "MethodSignatureBackedByPsiMethod: ArrayList([])_-1680869393",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1670302266",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1451490371",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1670302266",
      "target": "MethodSignatureBackedByPsiMethod: getRawType([])_1350174523",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1670302266",
      "target": "MethodSignatureBackedByPsiMethod: getOwnerType([])_-2146785834",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1670302266",
      "target": "MethodSignatureBackedByPsiMethod: isStatic([PsiType:int])_645091114",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1670302266",
      "target": "MethodSignatureBackedByPsiMethod: getModifiers([])_213060313",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1670302266",
      "target": "MethodSignatureBackedByPsiMethod: getRawType([])_-1617883449",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1670302266",
      "target": "MethodSignatureBackedByPsiMethod: getOwnerType([])_-1181142569",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1670302266",
      "target": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-2065775741",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1670302266",
      "target": "MethodSignatureBackedByPsiMethod: getActualTypeArguments([])_-1082677060",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1670302266",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String, PsiType:List\u003cTypeName\u003e])_1295707117",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1670302266",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2106205664",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1670302266",
      "target": "MethodSignatureBackedByPsiMethod: simpleName([])_1420446347",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1670302266",
      "target": "MethodSignatureBackedByPsiMethod: ParameterizedTypeName([PsiType:ParameterizedTypeName, PsiType:ClassName, PsiType:List\u003cTypeName\u003e])_1612302711",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ParameterizedTypeName([PsiType:ParameterizedTypeName, PsiType:ClassName, PsiType:List\u003cTypeName\u003e])_2030095207",
      "target": "MethodSignatureBackedByPsiMethod: ParameterizedTypeName([PsiType:ParameterizedTypeName, PsiType:ClassName, PsiType:List\u003cTypeName\u003e, PsiType:List\u003cAnnotationSpec\u003e])_-1687780541",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ParameterizedTypeName([PsiType:ParameterizedTypeName, PsiType:ClassName, PsiType:List\u003cTypeName\u003e])_2030095207",
      "target": "MethodSignatureBackedByPsiMethod: ArrayList([])_1243902507",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: WildcardTypeName([PsiType:List\u003cTypeName\u003e, PsiType:List\u003cTypeName\u003e])_1687760302",
      "target": "MethodSignatureBackedByPsiMethod: WildcardTypeName([PsiType:List\u003cTypeName\u003e, PsiType:List\u003cTypeName\u003e, PsiType:List\u003cAnnotationSpec\u003e])_-517012173",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: WildcardTypeName([PsiType:List\u003cTypeName\u003e, PsiType:List\u003cTypeName\u003e])_1687760302",
      "target": "MethodSignatureBackedByPsiMethod: ArrayList([])_1030187940",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-114539010",
      "target": "MethodSignatureBackedByPsiMethod: ArrayList([PsiType:int])_-660128784",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-114539010",
      "target": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_1122624713",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-114539010",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_701582974",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_269849952",
      "target": "MethodSignatureBackedByPsiMethod: ArrayList([PsiType:int])_-530410612",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_269849952",
      "target": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_-324530303",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_269849952",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-26056342",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: TypeVariableName([PsiType:String, PsiType:List\u003cTypeName\u003e])_1695955242",
      "target": "MethodSignatureBackedByPsiMethod: TypeVariableName([PsiType:String, PsiType:List\u003cTypeName\u003e, PsiType:List\u003cAnnotationSpec\u003e])_-78610056",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: TypeVariableName([PsiType:String, PsiType:List\u003cTypeName\u003e])_1695955242",
      "target": "MethodSignatureBackedByPsiMethod: ArrayList([])_-1811821548",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1208265238",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_-1558232323",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1208265238",
      "target": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_1179601308",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1208265238",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1434932634",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1208265238",
      "target": "MethodSignatureBackedByPsiMethod: getComponentType([])_-67284522",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1208265238",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_857480502",
      "sourceAnchor": 13,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1208265238",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_2001533649",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1208265238",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_195139390",
      "sourceAnchor": 19,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1208265238",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_1637960846",
      "sourceAnchor": 22,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1208265238",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_1950953058",
      "sourceAnchor": 25,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1208265238",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_258642020",
      "sourceAnchor": 28,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_1942103439",
      "target": "MethodSignatureBackedByPsiMethod: ArrayTypeName([PsiType:TypeName])_-919995559",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_171983242",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_708819639",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_171983242",
      "target": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_441646313",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_171983242",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1665649118",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_171983242",
      "target": "MethodSignatureBackedByPsiMethod: getComponentType([])_-1563125146",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_171983242",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1218251915",
      "sourceAnchor": 13,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_171983242",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_21769087",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_171983242",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1854979724",
      "sourceAnchor": 19,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_171983242",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_64532129",
      "sourceAnchor": 22,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_171983242",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_1468785333",
      "sourceAnchor": 25,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_171983242",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1105554549",
      "sourceAnchor": 28,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003eimmutableList([PsiType:Collection\u003cT\u003e])_-821817767",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eunmodifiableList([PsiType:List\u003c? extends T\u003e])_-1942585644",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003eimmutableList([PsiType:Collection\u003cT\u003e])_-821817767",
      "target": "MethodSignatureBackedByPsiMethod: ArrayList([PsiType:Collection\u003c? extends E\u003e])_-858390971",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-1711760755",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-313171054",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-1711760755",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_719377996",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-1711760755",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_1044771360",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1069345026",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_-319794113",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1069345026",
      "target": "MethodSignatureBackedByPsiMethod: isAnnotated([])_747134202",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1069345026",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_-208835189",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1069345026",
      "target": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_1853299514",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1069345026",
      "target": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_693981219",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-251987953",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_1195541649",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-251987953",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-1433339950",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-251987953",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-1378393790",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-613635096",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_669696355",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-613635096",
      "target": "MethodSignatureBackedByPsiMethod: isAnnotated([])_1259072468",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-613635096",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_-1978438610",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-613635096",
      "target": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_-1702732196",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-613635096",
      "target": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_-692911683",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-689421954",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_1289075585",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-689421954",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_130061485",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-689421954",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_1945019318",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-1701788280",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_-1265106187",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-1701788280",
      "target": "MethodSignatureBackedByPsiMethod: isAnnotated([])_-1918975690",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-1701788280",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_290043189",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-1701788280",
      "target": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_-42714679",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-1701788280",
      "target": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_1383400388",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-1079607048",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-1910459560",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-1079607048",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_1717193617",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-1079607048",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_444883166",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1679737202",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_-545120240",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1679737202",
      "target": "MethodSignatureBackedByPsiMethod: isAnnotated([])_1353928502",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1679737202",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_-1265615668",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1679737202",
      "target": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_1367234003",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1679737202",
      "target": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_1667510364",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_365762710",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-339692179",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_365762710",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_1647903682",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_365762710",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_1585782558",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-968406728",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_-787043199",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-968406728",
      "target": "MethodSignatureBackedByPsiMethod: isAnnotated([])_-822564723",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-968406728",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_110802163",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-968406728",
      "target": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_1668720146",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-968406728",
      "target": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_-1232829026",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-308371613",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_1613140476",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-308371613",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-1280775270",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-308371613",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-1117478815",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-705914559",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_-2139083956",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-705914559",
      "target": "MethodSignatureBackedByPsiMethod: isAnnotated([])_-1536659174",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-705914559",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_175305725",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-705914559",
      "target": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_-1896608287",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-705914559",
      "target": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_421146646",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-438220321",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-1245505370",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-438220321",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-895891705",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-438220321",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_437276306",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_706589176",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_-1034338009",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_706589176",
      "target": "MethodSignatureBackedByPsiMethod: isAnnotated([])_-1645060513",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_706589176",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_720481043",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_706589176",
      "target": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_-827648801",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_706589176",
      "target": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_541943109",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-341598321",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-1944444690",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-341598321",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-413364726",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-341598321",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-1072515036",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1773391365",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_1185134334",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1773391365",
      "target": "MethodSignatureBackedByPsiMethod: isAnnotated([])_367478786",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1773391365",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_-81302353",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1773391365",
      "target": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_50113392",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1773391365",
      "target": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_-1635840480",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-853270324",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-1946279235",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-853270324",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_2030459705",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-853270324",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_1408900235",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-1850809294",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_-1666364307",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-1850809294",
      "target": "MethodSignatureBackedByPsiMethod: isAnnotated([])_1065732174",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-1850809294",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_-1351613663",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-1850809294",
      "target": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_-1662451910",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-1850809294",
      "target": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_2107130255",
      "sourceAnchor": 7,
      "targetAnchor": 0
    }
  ]
}
