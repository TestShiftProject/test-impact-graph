{
  "nodes": [
    {
      "signature": "    public void shouldSupportClassInDefaultPackage_excluded() throws Exception {",
      "className": "ClassNameNoPackageTest",
      "id": "root",
      "lines": [
        {
          "code": "        ClassName className \u003d ClassName.get(ClassNameNoPackageTest.class);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        Truth.assertThat(((ClassName) (className)).isBoxedPrimitive()).isFalse();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": true,
      "nodeLevel": 0
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1925322958",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 1
    },
    {
      "signature": "isFalse",
      "className": "com.google.common.truth.BooleanSubject",
      "id": "MethodSignatureBackedByPsiMethod: isFalse([])_1840365615",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 1
    },
    {
      "signature": "assertThat",
      "className": "com.google.common.truth.Truth",
      "id": "MethodSignatureBackedByPsiMethod: assertThat([PsiType:Boolean])_-321607506",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 1
    },
    {
      "signature": "  public boolean isBoxedPrimitive() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: isBoxedPrimitive([])_-43259360",
      "lines": [
        {
          "code": "    return this.equals(BOXED_BOOLEAN)",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "        || this.equals(BOXED_BYTE)",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "        || this.equals(BOXED_SHORT)",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "        || this.equals(BOXED_INT)",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "        || this.equals(BOXED_LONG)",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "        || this.equals(BOXED_CHAR)",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "        || this.equals(BOXED_FLOAT)",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "        || this.equals(BOXED_DOUBLE);",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        }
      ],
      "addCovered": true,
      "nodeLevel": 1
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-652009873",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-232690158",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-275000463",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-218614223",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1736189890",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-863804602",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_688128798",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_-657374104",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_631910267",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_290362933",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_716323848",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-397425021",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_193963621",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_1128187838",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1208028070",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_1447302973",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-1397625383",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_1121324123",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-964439954",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1542644248",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-1240437821",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1777646714",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1965535137",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  @Override public final boolean equals(Object o) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-2083650724",
      "lines": [
        {
          "code": "    if (this \u003d\u003d o) return true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    if (o \u003d\u003d null) return false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    if (getClass() !\u003d o.getClass()) return false;",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    return toString().equals(o.toString());",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        }
      ],
      "addCovered": true,
      "nodeLevel": 2
    },
    {
      "signature": "  @Override public final boolean equals(Object o) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-556321583",
      "lines": [
        {
          "code": "    if (this \u003d\u003d o) return true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    if (o \u003d\u003d null) return false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    if (getClass() !\u003d o.getClass()) return false;",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    return toString().equals(o.toString());",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        }
      ],
      "addCovered": true,
      "nodeLevel": 2
    },
    {
      "signature": "  @Override public final boolean equals(Object o) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-362929832",
      "lines": [
        {
          "code": "    if (this \u003d\u003d o) return true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    if (o \u003d\u003d null) return false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    if (getClass() !\u003d o.getClass()) return false;",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    return toString().equals(o.toString());",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        }
      ],
      "addCovered": true,
      "nodeLevel": 2
    },
    {
      "signature": "  @Override public final boolean equals(Object o) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-151829796",
      "lines": [
        {
          "code": "    if (this \u003d\u003d o) return true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    if (o \u003d\u003d null) return false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    if (getClass() !\u003d o.getClass()) return false;",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    return toString().equals(o.toString());",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        }
      ],
      "addCovered": true,
      "nodeLevel": 2
    },
    {
      "signature": "  @Override public final boolean equals(Object o) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1181948833",
      "lines": [
        {
          "code": "    if (this \u003d\u003d o) return true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    if (o \u003d\u003d null) return false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    if (getClass() !\u003d o.getClass()) return false;",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    return toString().equals(o.toString());",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        }
      ],
      "addCovered": true,
      "nodeLevel": 2
    },
    {
      "signature": "  @Override public final boolean equals(Object o) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1403818648",
      "lines": [
        {
          "code": "    if (this \u003d\u003d o) return true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    if (o \u003d\u003d null) return false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    if (getClass() !\u003d o.getClass()) return false;",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    return toString().equals(o.toString());",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        }
      ],
      "addCovered": true,
      "nodeLevel": 2
    },
    {
      "signature": "  @Override public final boolean equals(Object o) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_200257139",
      "lines": [
        {
          "code": "    if (this \u003d\u003d o) return true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    if (o \u003d\u003d null) return false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    if (getClass() !\u003d o.getClass()) return false;",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    return toString().equals(o.toString());",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        }
      ],
      "addCovered": true,
      "nodeLevel": 2
    },
    {
      "signature": "  @Override public final boolean equals(Object o) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1867509441",
      "lines": [
        {
          "code": "    if (this \u003d\u003d o) return true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    if (o \u003d\u003d null) return false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    if (getClass() !\u003d o.getClass()) return false;",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    return toString().equals(o.toString());",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        }
      ],
      "addCovered": true,
      "nodeLevel": 2
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-575154171",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_991446491",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1556636194",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-2024523555",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-1947321462",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-654637606",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-27051330",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1880980065",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName,",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_157769598",
      "lines": [
        {
          "code": "      List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.packageName \u003d Objects.requireNonNull(packageName, \"packageName \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.enclosingClassName \u003d enclosingClassName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.simpleName \u003d simpleName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.canonicalName \u003d enclosingClassName !\u003d null",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (enclosingClassName.canonicalName + \u0027.\u0027 + simpleName)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : (packageName.isEmpty() ? simpleName : packageName + \u0027.\u0027 + simpleName);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "emptyList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_-1426072792",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-551061421",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1187963345",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-626361071",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-977772656",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_468770178",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1417752775",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1132840048",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_1362102809",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_761305768",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_472898923",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-525039057",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_1251082104",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_397363007",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-123817637",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-1800416760",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1468598843",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-598045308",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-2074185165",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_1470809187",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_2055282546",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_898591834",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-1602637977",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-445363912",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1395175048",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_-975424658",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_-1410132987",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "equals",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1748676111",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  @Override public final String toString() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_1936709842",
      "lines": [
        {
          "code": "    String result \u003d cachedString;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      try {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        StringBuilder resultBuilder \u003d new StringBuilder();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        CodeWriter codeWriter \u003d new CodeWriter(resultBuilder);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emit(codeWriter);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        result \u003d resultBuilder.toString();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        cachedString \u003d result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      } catch (IOException e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "toString",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_1640209818",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_223181649",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_-2011261837",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "equals",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-886131922",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  @Override public final String toString() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_-1904431730",
      "lines": [
        {
          "code": "    String result \u003d cachedString;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      try {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        StringBuilder resultBuilder \u003d new StringBuilder();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        CodeWriter codeWriter \u003d new CodeWriter(resultBuilder);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emit(codeWriter);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        result \u003d resultBuilder.toString();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        cachedString \u003d result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      } catch (IOException e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "toString",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_698890897",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_412643935",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_-1360912670",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "equals",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_1203843245",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  @Override public final String toString() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_-1988774876",
      "lines": [
        {
          "code": "    String result \u003d cachedString;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      try {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        StringBuilder resultBuilder \u003d new StringBuilder();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        CodeWriter codeWriter \u003d new CodeWriter(resultBuilder);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emit(codeWriter);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        result \u003d resultBuilder.toString();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        cachedString \u003d result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      } catch (IOException e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "toString",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_-1942777708",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_2137241116",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_1078398004",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "equals",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1667266599",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  @Override public final String toString() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_1931272952",
      "lines": [
        {
          "code": "    String result \u003d cachedString;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      try {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        StringBuilder resultBuilder \u003d new StringBuilder();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        CodeWriter codeWriter \u003d new CodeWriter(resultBuilder);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emit(codeWriter);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        result \u003d resultBuilder.toString();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        cachedString \u003d result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      } catch (IOException e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "toString",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_265521501",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_731822241",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_-1991445379",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "equals",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_1027616888",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  @Override public final String toString() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_-599397080",
      "lines": [
        {
          "code": "    String result \u003d cachedString;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      try {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        StringBuilder resultBuilder \u003d new StringBuilder();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        CodeWriter codeWriter \u003d new CodeWriter(resultBuilder);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emit(codeWriter);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        result \u003d resultBuilder.toString();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        cachedString \u003d result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      } catch (IOException e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "toString",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_-420245678",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_380976821",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_-508538036",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "equals",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_831778550",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  @Override public final String toString() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_517000811",
      "lines": [
        {
          "code": "    String result \u003d cachedString;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      try {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        StringBuilder resultBuilder \u003d new StringBuilder();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        CodeWriter codeWriter \u003d new CodeWriter(resultBuilder);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emit(codeWriter);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        result \u003d resultBuilder.toString();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        cachedString \u003d result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      } catch (IOException e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "toString",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_-1850658546",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_1411168639",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_-1282824852",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "equals",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_349730557",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  @Override public final String toString() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_1213991250",
      "lines": [
        {
          "code": "    String result \u003d cachedString;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      try {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        StringBuilder resultBuilder \u003d new StringBuilder();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        CodeWriter codeWriter \u003d new CodeWriter(resultBuilder);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emit(codeWriter);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        result \u003d resultBuilder.toString();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        cachedString \u003d result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      } catch (IOException e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "toString",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_1593829806",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_1789710287",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_-2021168796",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "equals",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_1313171229",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  @Override public final String toString() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_1370165263",
      "lines": [
        {
          "code": "    String result \u003d cachedString;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      try {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        StringBuilder resultBuilder \u003d new StringBuilder();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        CodeWriter codeWriter \u003d new CodeWriter(resultBuilder);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emit(codeWriter);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        result \u003d resultBuilder.toString();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        cachedString \u003d result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      } catch (IOException e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "toString",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_-1215727433",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  TypeName(List\u003cAnnotationSpec\u003e annotations) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: TypeName([PsiType:List\u003cAnnotationSpec\u003e])_972317679",
      "lines": [
        {
          "code": "    this(null, annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "requireNonNull",
      "className": "java.util.Objects",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003erequireNonNull([PsiType:T, PsiType:String])_-658829393",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isEmpty",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: isEmpty([])_-250685515",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName,",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-1910927358",
      "lines": [
        {
          "code": "      List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.packageName \u003d Objects.requireNonNull(packageName, \"packageName \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.enclosingClassName \u003d enclosingClassName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.simpleName \u003d simpleName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.canonicalName \u003d enclosingClassName !\u003d null",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (enclosingClassName.canonicalName + \u0027.\u0027 + simpleName)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : (packageName.isEmpty() ? simpleName : packageName + \u0027.\u0027 + simpleName);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "emptyList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_-668088378",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-204825854",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-245230575",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-1145589749",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1061926904",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_839409182",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1640693435",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-1269005796",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1026627789",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName,",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_2083137196",
      "lines": [
        {
          "code": "      List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.packageName \u003d Objects.requireNonNull(packageName, \"packageName \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.enclosingClassName \u003d enclosingClassName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.simpleName \u003d simpleName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.canonicalName \u003d enclosingClassName !\u003d null",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (enclosingClassName.canonicalName + \u0027.\u0027 + simpleName)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : (packageName.isEmpty() ? simpleName : packageName + \u0027.\u0027 + simpleName);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "emptyList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_1513622898",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_736720416",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-162076983",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1331272649",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-1562270623",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1027260828",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_710970671",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1559537635",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_884877475",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_-303703584",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-552606249",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-966454997",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_1590048521",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-903291527",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1841897567",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-888250391",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_360645402",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_602054889",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_944532862",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_1559035539",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-987946405",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_682775193",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-769487530",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_486969275",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1158527025",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "StringBuilder",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: StringBuilder([])_-1311184370",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter(Appendable out) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_364599595",
      "lines": [
        {
          "code": "    this(out, \"  \", Collections.emptySet(), Collections.emptySet());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter emit(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-154189147",
      "lines": [
        {
          "code": "    if (keyword \u003d\u003d null) throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (isAnnotated()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.emit(\"\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      emitAnnotations(out);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return out.emitAndIndent(keyword);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "toString",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_1962718145",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_57005659",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "StringBuilder",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: StringBuilder([])_1677428350",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter(Appendable out) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_1137567953",
      "lines": [
        {
          "code": "    this(out, \"  \", Collections.emptySet(), Collections.emptySet());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter emit(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1989630912",
      "lines": [
        {
          "code": "    if (keyword \u003d\u003d null) throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (isAnnotated()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.emit(\"\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      emitAnnotations(out);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return out.emitAndIndent(keyword);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "toString",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_-86269994",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_-1208289295",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "StringBuilder",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: StringBuilder([])_-1896656680",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter(Appendable out) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-2085220630",
      "lines": [
        {
          "code": "    this(out, \"  \", Collections.emptySet(), Collections.emptySet());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter emit(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-1223659250",
      "lines": [
        {
          "code": "    if (keyword \u003d\u003d null) throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (isAnnotated()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.emit(\"\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      emitAnnotations(out);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return out.emitAndIndent(keyword);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "toString",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_-1248180947",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_546044539",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "StringBuilder",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: StringBuilder([])_-1190585747",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter(Appendable out) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_114932476",
      "lines": [
        {
          "code": "    this(out, \"  \", Collections.emptySet(), Collections.emptySet());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter emit(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1980652805",
      "lines": [
        {
          "code": "    if (keyword \u003d\u003d null) throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (isAnnotated()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.emit(\"\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      emitAnnotations(out);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return out.emitAndIndent(keyword);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "toString",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_982546424",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_51917386",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "StringBuilder",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: StringBuilder([])_-648976265",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter(Appendable out) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-2004769317",
      "lines": [
        {
          "code": "    this(out, \"  \", Collections.emptySet(), Collections.emptySet());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter emit(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-1266020192",
      "lines": [
        {
          "code": "    if (keyword \u003d\u003d null) throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (isAnnotated()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.emit(\"\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      emitAnnotations(out);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return out.emitAndIndent(keyword);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "toString",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_555524700",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_611734765",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "StringBuilder",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: StringBuilder([])_-721665982",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter(Appendable out) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-343508827",
      "lines": [
        {
          "code": "    this(out, \"  \", Collections.emptySet(), Collections.emptySet());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter emit(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_375327641",
      "lines": [
        {
          "code": "    if (keyword \u003d\u003d null) throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (isAnnotated()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.emit(\"\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      emitAnnotations(out);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return out.emitAndIndent(keyword);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "toString",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_-724501936",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_-1900326939",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "StringBuilder",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: StringBuilder([])_1190048312",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter(Appendable out) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-1638059626",
      "lines": [
        {
          "code": "    this(out, \"  \", Collections.emptySet(), Collections.emptySet());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter emit(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_635472461",
      "lines": [
        {
          "code": "    if (keyword \u003d\u003d null) throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (isAnnotated()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.emit(\"\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      emitAnnotations(out);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return out.emitAndIndent(keyword);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "toString",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_859401894",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_-1010668589",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "StringBuilder",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: StringBuilder([])_-1723818928",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter(Appendable out) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_2124670659",
      "lines": [
        {
          "code": "    this(out, \"  \", Collections.emptySet(), Collections.emptySet());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter emit(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_581479946",
      "lines": [
        {
          "code": "    if (keyword \u003d\u003d null) throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (isAnnotated()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.emit(\"\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      emitAnnotations(out);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return out.emitAndIndent(keyword);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "toString",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_2113564627",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_796332584",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private TypeName(String keyword, List\u003cAnnotationSpec\u003e annotations) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: TypeName([PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-1965740686",
      "lines": [
        {
          "code": "    this.keyword \u003d keyword;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.annotations \u003d Util.immutableList(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  TypeName(List\u003cAnnotationSpec\u003e annotations) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: TypeName([PsiType:List\u003cAnnotationSpec\u003e])_-1077884205",
      "lines": [
        {
          "code": "    this(null, annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "requireNonNull",
      "className": "java.util.Objects",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003erequireNonNull([PsiType:T, PsiType:String])_1357510985",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isEmpty",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: isEmpty([])_-1731580369",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  TypeName(List\u003cAnnotationSpec\u003e annotations) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: TypeName([PsiType:List\u003cAnnotationSpec\u003e])_-1348089101",
      "lines": [
        {
          "code": "    this(null, annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "requireNonNull",
      "className": "java.util.Objects",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003erequireNonNull([PsiType:T, PsiType:String])_768243438",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isEmpty",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: isEmpty([])_-1130364400",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName,",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-2057070940",
      "lines": [
        {
          "code": "      List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.packageName \u003d Objects.requireNonNull(packageName, \"packageName \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.enclosingClassName \u003d enclosingClassName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.simpleName \u003d simpleName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.canonicalName \u003d enclosingClassName !\u003d null",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (enclosingClassName.canonicalName + \u0027.\u0027 + simpleName)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : (packageName.isEmpty() ? simpleName : packageName + \u0027.\u0027 + simpleName);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptyList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_1161054439",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-822420081",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-188293598",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1644140474",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1143714957",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_281068954",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1768835033",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1550329501",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1221882347",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName,",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_30864964",
      "lines": [
        {
          "code": "      List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.packageName \u003d Objects.requireNonNull(packageName, \"packageName \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.enclosingClassName \u003d enclosingClassName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.simpleName \u003d simpleName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.canonicalName \u003d enclosingClassName !\u003d null",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (enclosingClassName.canonicalName + \u0027.\u0027 + simpleName)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : (packageName.isEmpty() ? simpleName : packageName + \u0027.\u0027 + simpleName);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptyList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_338477902",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1234267977",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_418713292",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1526349318",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-1776404896",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1405461714",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1031935248",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_498588545",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_1666409490",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_-886565199",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1525643268",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1059379549",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_-529103718",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-388289676",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1523083748",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-434762889",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-874576764",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_315744632",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-997486350",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-294615303",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_2117561541",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1845176591",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_944748491",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1023832964",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-166643696",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter(Appendable out, String indent, Set\u003cString\u003e staticImports, Set\u003cString\u003e alwaysQualify) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_2009196447",
      "lines": [
        {
          "code": "    this(out, indent, Collections.emptyMap(), staticImports, alwaysQualify);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-18229997",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_360229989",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_793782632",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public boolean isAnnotated() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: isAnnotated([])_-688272219",
      "lines": [
        {
          "code": "    return !annotations.isEmpty();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public CodeWriter emit(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_1942653195",
      "lines": [
        {
          "code": "    return emitAndIndent(s);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAnnotations(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_-2119348852",
      "lines": [
        {
          "code": "    for (AnnotationSpec annotation : annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      annotation.emit(out, true);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.emit(\" \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return out;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAndIndent(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_1943795702",
      "lines": [
        {
          "code": "    boolean first \u003d true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    for (String line : s.split(\"\\\\R\", -1)) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      // Emit a newline character. Make sure blank lines in Javadoc \u0026 comments look good.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (!first) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        if ((javadoc || comment) \u0026\u0026 trailingNewline) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(javadoc ? \" *\" : \"//\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        out.append(\"\\n\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        trailingNewline \u003d true;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (statementLine !\u003d -1) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (statementLine \u003d\u003d 0) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            indent(2); // Begin multiple-line statement. Increase the indentation level.",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          statementLine++;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      first \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (line.isEmpty()) continue; // Don\u0027t indent empty lines.",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Emit indentation and comment prefix if necessary.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (trailingNewline) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (javadoc) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\" * \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        } else if (comment) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\"// \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.append(line);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      trailingNewline \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return this;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter(Appendable out, String indent, Set\u003cString\u003e staticImports, Set\u003cString\u003e alwaysQualify) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-1755974915",
      "lines": [
        {
          "code": "    this(out, indent, Collections.emptyMap(), staticImports, alwaysQualify);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-662500424",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-591168995",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_-1163893732",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public boolean isAnnotated() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: isAnnotated([])_1976685152",
      "lines": [
        {
          "code": "    return !annotations.isEmpty();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public CodeWriter emit(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_1142987294",
      "lines": [
        {
          "code": "    return emitAndIndent(s);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAnnotations(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_122558147",
      "lines": [
        {
          "code": "    for (AnnotationSpec annotation : annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      annotation.emit(out, true);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.emit(\" \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return out;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAndIndent(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_-372176439",
      "lines": [
        {
          "code": "    boolean first \u003d true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    for (String line : s.split(\"\\\\R\", -1)) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      // Emit a newline character. Make sure blank lines in Javadoc \u0026 comments look good.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (!first) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        if ((javadoc || comment) \u0026\u0026 trailingNewline) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(javadoc ? \" *\" : \"//\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        out.append(\"\\n\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        trailingNewline \u003d true;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (statementLine !\u003d -1) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (statementLine \u003d\u003d 0) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            indent(2); // Begin multiple-line statement. Increase the indentation level.",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          statementLine++;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      first \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (line.isEmpty()) continue; // Don\u0027t indent empty lines.",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Emit indentation and comment prefix if necessary.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (trailingNewline) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (javadoc) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\" * \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        } else if (comment) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\"// \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.append(line);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      trailingNewline \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return this;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter(Appendable out, String indent, Set\u003cString\u003e staticImports, Set\u003cString\u003e alwaysQualify) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-1007074003",
      "lines": [
        {
          "code": "    this(out, indent, Collections.emptyMap(), staticImports, alwaysQualify);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_1723138734",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-276109310",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_-1696103410",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public boolean isAnnotated() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: isAnnotated([])_1401202283",
      "lines": [
        {
          "code": "    return !annotations.isEmpty();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public CodeWriter emit(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_1098319100",
      "lines": [
        {
          "code": "    return emitAndIndent(s);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAnnotations(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_1595345380",
      "lines": [
        {
          "code": "    for (AnnotationSpec annotation : annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      annotation.emit(out, true);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.emit(\" \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return out;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAndIndent(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_1462220273",
      "lines": [
        {
          "code": "    boolean first \u003d true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    for (String line : s.split(\"\\\\R\", -1)) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      // Emit a newline character. Make sure blank lines in Javadoc \u0026 comments look good.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (!first) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        if ((javadoc || comment) \u0026\u0026 trailingNewline) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(javadoc ? \" *\" : \"//\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        out.append(\"\\n\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        trailingNewline \u003d true;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (statementLine !\u003d -1) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (statementLine \u003d\u003d 0) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            indent(2); // Begin multiple-line statement. Increase the indentation level.",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          statementLine++;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      first \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (line.isEmpty()) continue; // Don\u0027t indent empty lines.",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Emit indentation and comment prefix if necessary.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (trailingNewline) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (javadoc) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\" * \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        } else if (comment) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\"// \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.append(line);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      trailingNewline \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return this;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter(Appendable out, String indent, Set\u003cString\u003e staticImports, Set\u003cString\u003e alwaysQualify) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_260721677",
      "lines": [
        {
          "code": "    this(out, indent, Collections.emptyMap(), staticImports, alwaysQualify);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-2091091788",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_1753267671",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_-1008776063",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public boolean isAnnotated() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: isAnnotated([])_618062200",
      "lines": [
        {
          "code": "    return !annotations.isEmpty();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public CodeWriter emit(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_29061070",
      "lines": [
        {
          "code": "    return emitAndIndent(s);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAnnotations(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_680374997",
      "lines": [
        {
          "code": "    for (AnnotationSpec annotation : annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      annotation.emit(out, true);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.emit(\" \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return out;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAndIndent(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_-883765718",
      "lines": [
        {
          "code": "    boolean first \u003d true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    for (String line : s.split(\"\\\\R\", -1)) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      // Emit a newline character. Make sure blank lines in Javadoc \u0026 comments look good.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (!first) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        if ((javadoc || comment) \u0026\u0026 trailingNewline) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(javadoc ? \" *\" : \"//\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        out.append(\"\\n\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        trailingNewline \u003d true;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (statementLine !\u003d -1) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (statementLine \u003d\u003d 0) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            indent(2); // Begin multiple-line statement. Increase the indentation level.",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          statementLine++;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      first \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (line.isEmpty()) continue; // Don\u0027t indent empty lines.",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Emit indentation and comment prefix if necessary.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (trailingNewline) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (javadoc) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\" * \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        } else if (comment) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\"// \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.append(line);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      trailingNewline \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return this;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter(Appendable out, String indent, Set\u003cString\u003e staticImports, Set\u003cString\u003e alwaysQualify) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_1678927427",
      "lines": [
        {
          "code": "    this(out, indent, Collections.emptyMap(), staticImports, alwaysQualify);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-1818310656",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-757388347",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_-73675958",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public boolean isAnnotated() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: isAnnotated([])_1718605117",
      "lines": [
        {
          "code": "    return !annotations.isEmpty();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public CodeWriter emit(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_-263331980",
      "lines": [
        {
          "code": "    return emitAndIndent(s);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAnnotations(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_200255521",
      "lines": [
        {
          "code": "    for (AnnotationSpec annotation : annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      annotation.emit(out, true);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.emit(\" \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return out;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAndIndent(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_1826685955",
      "lines": [
        {
          "code": "    boolean first \u003d true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    for (String line : s.split(\"\\\\R\", -1)) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      // Emit a newline character. Make sure blank lines in Javadoc \u0026 comments look good.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (!first) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        if ((javadoc || comment) \u0026\u0026 trailingNewline) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(javadoc ? \" *\" : \"//\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        out.append(\"\\n\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        trailingNewline \u003d true;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (statementLine !\u003d -1) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (statementLine \u003d\u003d 0) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            indent(2); // Begin multiple-line statement. Increase the indentation level.",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          statementLine++;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      first \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (line.isEmpty()) continue; // Don\u0027t indent empty lines.",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Emit indentation and comment prefix if necessary.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (trailingNewline) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (javadoc) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\" * \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        } else if (comment) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\"// \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.append(line);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      trailingNewline \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return this;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter(Appendable out, String indent, Set\u003cString\u003e staticImports, Set\u003cString\u003e alwaysQualify) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-1123960909",
      "lines": [
        {
          "code": "    this(out, indent, Collections.emptyMap(), staticImports, alwaysQualify);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-1924243269",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-1439960360",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_-309684398",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public boolean isAnnotated() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: isAnnotated([])_1672358130",
      "lines": [
        {
          "code": "    return !annotations.isEmpty();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public CodeWriter emit(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_-2128455168",
      "lines": [
        {
          "code": "    return emitAndIndent(s);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAnnotations(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_-2054964364",
      "lines": [
        {
          "code": "    for (AnnotationSpec annotation : annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      annotation.emit(out, true);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.emit(\" \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return out;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAndIndent(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_-1298034848",
      "lines": [
        {
          "code": "    boolean first \u003d true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    for (String line : s.split(\"\\\\R\", -1)) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      // Emit a newline character. Make sure blank lines in Javadoc \u0026 comments look good.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (!first) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        if ((javadoc || comment) \u0026\u0026 trailingNewline) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(javadoc ? \" *\" : \"//\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        out.append(\"\\n\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        trailingNewline \u003d true;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (statementLine !\u003d -1) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (statementLine \u003d\u003d 0) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            indent(2); // Begin multiple-line statement. Increase the indentation level.",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          statementLine++;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      first \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (line.isEmpty()) continue; // Don\u0027t indent empty lines.",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Emit indentation and comment prefix if necessary.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (trailingNewline) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (javadoc) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\" * \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        } else if (comment) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\"// \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.append(line);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      trailingNewline \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return this;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter(Appendable out, String indent, Set\u003cString\u003e staticImports, Set\u003cString\u003e alwaysQualify) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-413069814",
      "lines": [
        {
          "code": "    this(out, indent, Collections.emptyMap(), staticImports, alwaysQualify);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_1165235072",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-775676545",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_-1381277928",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public boolean isAnnotated() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: isAnnotated([])_1136887253",
      "lines": [
        {
          "code": "    return !annotations.isEmpty();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public CodeWriter emit(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_-1467721415",
      "lines": [
        {
          "code": "    return emitAndIndent(s);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAnnotations(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_179354147",
      "lines": [
        {
          "code": "    for (AnnotationSpec annotation : annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      annotation.emit(out, true);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.emit(\" \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return out;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAndIndent(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_356984057",
      "lines": [
        {
          "code": "    boolean first \u003d true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    for (String line : s.split(\"\\\\R\", -1)) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      // Emit a newline character. Make sure blank lines in Javadoc \u0026 comments look good.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (!first) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        if ((javadoc || comment) \u0026\u0026 trailingNewline) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(javadoc ? \" *\" : \"//\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        out.append(\"\\n\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        trailingNewline \u003d true;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (statementLine !\u003d -1) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (statementLine \u003d\u003d 0) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            indent(2); // Begin multiple-line statement. Increase the indentation level.",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          statementLine++;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      first \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (line.isEmpty()) continue; // Don\u0027t indent empty lines.",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Emit indentation and comment prefix if necessary.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (trailingNewline) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (javadoc) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\" * \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        } else if (comment) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\"// \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.append(line);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      trailingNewline \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return this;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter(Appendable out, String indent, Set\u003cString\u003e staticImports, Set\u003cString\u003e alwaysQualify) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-877931209",
      "lines": [
        {
          "code": "    this(out, indent, Collections.emptyMap(), staticImports, alwaysQualify);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_432483297",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_312887312",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_-606353620",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public boolean isAnnotated() {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: isAnnotated([])_1491686310",
      "lines": [
        {
          "code": "    return !annotations.isEmpty();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public CodeWriter emit(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_-1142551271",
      "lines": [
        {
          "code": "    return emitAndIndent(s);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAnnotations(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_1174125986",
      "lines": [
        {
          "code": "    for (AnnotationSpec annotation : annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      annotation.emit(out, true);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.emit(\" \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return out;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAndIndent(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_1292057817",
      "lines": [
        {
          "code": "    boolean first \u003d true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    for (String line : s.split(\"\\\\R\", -1)) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      // Emit a newline character. Make sure blank lines in Javadoc \u0026 comments look good.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (!first) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        if ((javadoc || comment) \u0026\u0026 trailingNewline) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(javadoc ? \" *\" : \"//\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        out.append(\"\\n\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        trailingNewline \u003d true;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (statementLine !\u003d -1) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (statementLine \u003d\u003d 0) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            indent(2); // Begin multiple-line statement. Increase the indentation level.",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          statementLine++;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      first \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (line.isEmpty()) continue; // Don\u0027t indent empty lines.",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Emit indentation and comment prefix if necessary.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (trailingNewline) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (javadoc) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\" * \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        } else if (comment) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\"// \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.append(line);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      trailingNewline \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return this;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    }
  ],
  "edges": [
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1925322958",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: isFalse([])_1840365615",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: assertThat([PsiType:Boolean])_-321607506",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: isBoxedPrimitive([])_-43259360",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1925322958",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-652009873",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1925322958",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-232690158",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1925322958",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-275000463",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1925322958",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-218614223",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1925322958",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1736189890",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1925322958",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-863804602",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1925322958",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_688128798",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1925322958",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_-657374104",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1925322958",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_631910267",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1925322958",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_290362933",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1925322958",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_716323848",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1925322958",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-397425021",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1925322958",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_193963621",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1925322958",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_1128187838",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1925322958",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1208028070",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1925322958",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_1447302973",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1925322958",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-1397625383",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1925322958",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_1121324123",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1925322958",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-964439954",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1925322958",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1542644248",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1925322958",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-1240437821",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1925322958",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1777646714",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1925322958",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1965535137",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: isBoxedPrimitive([])_-43259360",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-2083650724",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: isBoxedPrimitive([])_-43259360",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-556321583",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: isBoxedPrimitive([])_-43259360",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-362929832",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: isBoxedPrimitive([])_-43259360",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-151829796",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: isBoxedPrimitive([])_-43259360",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1181948833",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: isBoxedPrimitive([])_-43259360",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1403818648",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: isBoxedPrimitive([])_-43259360",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_200257139",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: isBoxedPrimitive([])_-43259360",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1867509441",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-652009873",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-575154171",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-652009873",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_991446491",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-232690158",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1556636194",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-232690158",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-2024523555",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-218614223",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-1947321462",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-218614223",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-654637606",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-863804602",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-27051330",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-863804602",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1880980065",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1542644248",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_157769598",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1542644248",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_-1426072792",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-1240437821",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-551061421",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1777646714",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1187963345",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1777646714",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-626361071",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1777646714",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-977772656",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1777646714",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_468770178",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1777646714",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1417752775",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1777646714",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1132840048",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1777646714",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_1362102809",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1777646714",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_761305768",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1777646714",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_472898923",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1777646714",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-525039057",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1777646714",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_1251082104",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1777646714",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_397363007",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1777646714",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-123817637",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1777646714",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-1800416760",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1777646714",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1468598843",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1777646714",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-598045308",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1777646714",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-2074185165",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1777646714",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_1470809187",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1777646714",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_2055282546",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1777646714",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_898591834",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1777646714",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-1602637977",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1777646714",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-445363912",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1777646714",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1395175048",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-2083650724",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_-975424658",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-2083650724",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_-1410132987",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-2083650724",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1748676111",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-2083650724",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_1936709842",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-2083650724",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_1640209818",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-556321583",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_223181649",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-556321583",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_-2011261837",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-556321583",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-886131922",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-556321583",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_-1904431730",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-556321583",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_698890897",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-362929832",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_412643935",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-362929832",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_-1360912670",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-362929832",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_1203843245",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-362929832",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_-1988774876",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-362929832",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_-1942777708",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-151829796",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_2137241116",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-151829796",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_1078398004",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-151829796",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1667266599",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-151829796",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_1931272952",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-151829796",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_265521501",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1181948833",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_731822241",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1181948833",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_-1991445379",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1181948833",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_1027616888",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1181948833",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_-599397080",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1181948833",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_-420245678",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1403818648",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_380976821",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1403818648",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_-508538036",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1403818648",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_831778550",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1403818648",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_517000811",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1403818648",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_-1850658546",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_200257139",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_1411168639",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_200257139",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_-1282824852",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_200257139",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_349730557",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_200257139",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_1213991250",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_200257139",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_1593829806",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1867509441",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_1789710287",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1867509441",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_-2021168796",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1867509441",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_1313171229",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1867509441",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_1370165263",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1867509441",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_-1215727433",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_157769598",
      "target": "MethodSignatureBackedByPsiMethod: TypeName([PsiType:List\u003cAnnotationSpec\u003e])_972317679",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_157769598",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003erequireNonNull([PsiType:T, PsiType:String])_-658829393",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_157769598",
      "target": "MethodSignatureBackedByPsiMethod: isEmpty([])_-250685515",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-551061421",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-1910927358",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-551061421",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_-668088378",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1187963345",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-204825854",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1187963345",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-245230575",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-626361071",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-1145589749",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-626361071",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1061926904",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_468770178",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_839409182",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_468770178",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1640693435",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1132840048",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-1269005796",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1132840048",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1026627789",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_898591834",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_2083137196",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_898591834",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_1513622898",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-1602637977",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_736720416",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-445363912",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-162076983",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-445363912",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1331272649",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-445363912",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-1562270623",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-445363912",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1027260828",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-445363912",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_710970671",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-445363912",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1559537635",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-445363912",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_884877475",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-445363912",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_-303703584",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-445363912",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-552606249",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-445363912",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-966454997",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-445363912",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_1590048521",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-445363912",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-903291527",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-445363912",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1841897567",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-445363912",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-888250391",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-445363912",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_360645402",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-445363912",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_602054889",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-445363912",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_944532862",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-445363912",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_1559035539",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-445363912",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-987946405",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-445363912",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_682775193",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-445363912",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-769487530",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-445363912",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_486969275",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-445363912",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1158527025",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1936709842",
      "target": "MethodSignatureBackedByPsiMethod: StringBuilder([])_-1311184370",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1936709842",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_364599595",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1936709842",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-154189147",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1936709842",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_1962718145",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1936709842",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_57005659",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-1904431730",
      "target": "MethodSignatureBackedByPsiMethod: StringBuilder([])_1677428350",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-1904431730",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_1137567953",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-1904431730",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1989630912",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-1904431730",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_-86269994",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-1904431730",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_-1208289295",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-1988774876",
      "target": "MethodSignatureBackedByPsiMethod: StringBuilder([])_-1896656680",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-1988774876",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-2085220630",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-1988774876",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-1223659250",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-1988774876",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_-1248180947",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-1988774876",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_546044539",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1931272952",
      "target": "MethodSignatureBackedByPsiMethod: StringBuilder([])_-1190585747",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1931272952",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_114932476",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1931272952",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1980652805",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1931272952",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_982546424",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1931272952",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_51917386",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-599397080",
      "target": "MethodSignatureBackedByPsiMethod: StringBuilder([])_-648976265",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-599397080",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-2004769317",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-599397080",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-1266020192",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-599397080",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_555524700",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-599397080",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_611734765",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_517000811",
      "target": "MethodSignatureBackedByPsiMethod: StringBuilder([])_-721665982",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_517000811",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-343508827",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_517000811",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_375327641",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_517000811",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_-724501936",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_517000811",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_-1900326939",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1213991250",
      "target": "MethodSignatureBackedByPsiMethod: StringBuilder([])_1190048312",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1213991250",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-1638059626",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1213991250",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_635472461",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1213991250",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_859401894",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1213991250",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_-1010668589",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1370165263",
      "target": "MethodSignatureBackedByPsiMethod: StringBuilder([])_-1723818928",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1370165263",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_2124670659",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1370165263",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_581479946",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1370165263",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_2113564627",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1370165263",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_796332584",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: TypeName([PsiType:List\u003cAnnotationSpec\u003e])_972317679",
      "target": "MethodSignatureBackedByPsiMethod: TypeName([PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-1965740686",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-1910927358",
      "target": "MethodSignatureBackedByPsiMethod: TypeName([PsiType:List\u003cAnnotationSpec\u003e])_-1077884205",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-1910927358",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003erequireNonNull([PsiType:T, PsiType:String])_1357510985",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-1910927358",
      "target": "MethodSignatureBackedByPsiMethod: isEmpty([])_-1731580369",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_2083137196",
      "target": "MethodSignatureBackedByPsiMethod: TypeName([PsiType:List\u003cAnnotationSpec\u003e])_-1348089101",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_2083137196",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003erequireNonNull([PsiType:T, PsiType:String])_768243438",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_2083137196",
      "target": "MethodSignatureBackedByPsiMethod: isEmpty([])_-1130364400",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_736720416",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-2057070940",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_736720416",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_1161054439",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-162076983",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-822420081",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-162076983",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-188293598",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1331272649",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1644140474",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1331272649",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1143714957",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1027260828",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_281068954",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1027260828",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1768835033",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1559537635",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1550329501",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1559537635",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1221882347",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_682775193",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_30864964",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_682775193",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_338477902",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-769487530",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1234267977",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_486969275",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_418713292",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_486969275",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1526349318",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_486969275",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-1776404896",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_486969275",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1405461714",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_486969275",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1031935248",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_486969275",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_498588545",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_486969275",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_1666409490",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_486969275",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_-886565199",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_486969275",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1525643268",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_486969275",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1059379549",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_486969275",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_-529103718",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_486969275",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-388289676",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_486969275",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1523083748",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_486969275",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-434762889",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_486969275",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-874576764",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_486969275",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_315744632",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_486969275",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-997486350",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_486969275",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-294615303",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_486969275",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_2117561541",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_486969275",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1845176591",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_486969275",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_944748491",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_486969275",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1023832964",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_486969275",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-166643696",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_364599595",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_2009196447",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_364599595",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-18229997",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_364599595",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_360229989",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-154189147",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_793782632",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-154189147",
      "target": "MethodSignatureBackedByPsiMethod: isAnnotated([])_-688272219",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-154189147",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_1942653195",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-154189147",
      "target": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_-2119348852",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-154189147",
      "target": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_1943795702",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_1137567953",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-1755974915",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_1137567953",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-662500424",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_1137567953",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-591168995",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1989630912",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_-1163893732",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1989630912",
      "target": "MethodSignatureBackedByPsiMethod: isAnnotated([])_1976685152",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1989630912",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_1142987294",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1989630912",
      "target": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_122558147",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1989630912",
      "target": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_-372176439",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-2085220630",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-1007074003",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-2085220630",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_1723138734",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-2085220630",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-276109310",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-1223659250",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_-1696103410",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-1223659250",
      "target": "MethodSignatureBackedByPsiMethod: isAnnotated([])_1401202283",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-1223659250",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_1098319100",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-1223659250",
      "target": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_1595345380",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-1223659250",
      "target": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_1462220273",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_114932476",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_260721677",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_114932476",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-2091091788",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_114932476",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_1753267671",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1980652805",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_-1008776063",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1980652805",
      "target": "MethodSignatureBackedByPsiMethod: isAnnotated([])_618062200",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1980652805",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_29061070",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1980652805",
      "target": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_680374997",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_1980652805",
      "target": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_-883765718",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-2004769317",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_1678927427",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-2004769317",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-1818310656",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-2004769317",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-757388347",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-1266020192",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_-73675958",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-1266020192",
      "target": "MethodSignatureBackedByPsiMethod: isAnnotated([])_1718605117",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-1266020192",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_-263331980",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-1266020192",
      "target": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_200255521",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_-1266020192",
      "target": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_1826685955",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-343508827",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-1123960909",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-343508827",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-1924243269",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-343508827",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-1439960360",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_375327641",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_-309684398",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_375327641",
      "target": "MethodSignatureBackedByPsiMethod: isAnnotated([])_1672358130",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_375327641",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_-2128455168",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_375327641",
      "target": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_-2054964364",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_375327641",
      "target": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_-1298034848",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-1638059626",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-413069814",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-1638059626",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_1165235072",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_-1638059626",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-775676545",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_635472461",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_-1381277928",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_635472461",
      "target": "MethodSignatureBackedByPsiMethod: isAnnotated([])_1136887253",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_635472461",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_-1467721415",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_635472461",
      "target": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_179354147",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_635472461",
      "target": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_356984057",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_2124670659",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-877931209",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_2124670659",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_432483297",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_2124670659",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_312887312",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_581479946",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_-606353620",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_581479946",
      "target": "MethodSignatureBackedByPsiMethod: isAnnotated([])_1491686310",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_581479946",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_-1142551271",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_581479946",
      "target": "MethodSignatureBackedByPsiMethod: emitAnnotations([PsiType:CodeWriter])_1174125986",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_581479946",
      "target": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_1292057817",
      "sourceAnchor": 7,
      "targetAnchor": 0
    }
  ]
}
