{
  "nodes": [
    {
      "signature": "    public void modifyAnnotations_5() throws Exception {",
      "className": "Test",
      "id": "root",
      "lines": [
        {
          "code": "        ParameterSpec.Builder builder \u003d ParameterSpec.builder(int.class, \"foo\").addAnnotation(Override.class).addAnnotation(SuppressWarnings.class);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        AnnotationSpec annotationSpec \u003d builder.annotations.remove(1);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        Truth.assertThat(((AnnotationSpec) (annotationSpec)).toString()).isEqualTo(\"@java.lang.SuppressWarnings\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": true,
      "nodeLevel": 0
    },
    {
      "signature": "    public Builder addAnnotation(Class\u003c?\u003e annotation) {",
      "className": "com.squareup.javapoet.ParameterSpec.Builder",
      "id": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:Class\u003c?\u003e])_-125578454",
      "lines": [
        {
          "code": "      return addAnnotation(ClassName.get(annotation));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 1
    },
    {
      "signature": "    public Builder addAnnotation(Class\u003c?\u003e annotation) {",
      "className": "com.squareup.javapoet.ParameterSpec.Builder",
      "id": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:Class\u003c?\u003e])_1713487852",
      "lines": [
        {
          "code": "      return addAnnotation(ClassName.get(annotation));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 1
    },
    {
      "signature": "  public static Builder builder(Type type, String name, Modifier... modifiers) {",
      "className": "com.squareup.javapoet.ParameterSpec",
      "id": "MethodSignatureBackedByPsiMethod: builder([PsiType:Type, PsiType:String, PsiType:Modifier[]])_395245217",
      "lines": [
        {
          "code": "    return builder(TypeName.get(type), name, modifiers);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 1
    },
    {
      "signature": "remove",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: remove([PsiType:int])_-1317894307",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 1
    },
    {
      "signature": "isEqualTo",
      "className": "com.google.common.truth.StringSubject",
      "id": "MethodSignatureBackedByPsiMethod: isEqualTo([PsiType:Object])_1627599210",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 1
    },
    {
      "signature": "assertThat",
      "className": "com.google.common.truth.Truth",
      "id": "MethodSignatureBackedByPsiMethod: assertThat([PsiType:String])_-854853981",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 1
    },
    {
      "signature": "  @Override public String toString() {",
      "className": "com.squareup.javapoet.AnnotationSpec",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_1998527404",
      "lines": [
        {
          "code": "    StringBuilder out \u003d new StringBuilder();",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    try {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      CodeWriter codeWriter \u003d new CodeWriter(out);",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "      codeWriter.emit(\"$L\", this);",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "      return out.toString();",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    } catch (IOException e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": true,
      "nodeLevel": 1
    },
    {
      "signature": "    public Builder addAnnotation(ClassName annotation) {",
      "className": "com.squareup.javapoet.ParameterSpec.Builder",
      "id": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:ClassName])_393051392",
      "lines": [
        {
          "code": "      this.annotations.add(AnnotationSpec.builder(annotation).build());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return this;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_554832727",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "    public Builder addAnnotation(ClassName annotation) {",
      "className": "com.squareup.javapoet.ParameterSpec.Builder",
      "id": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:ClassName])_180419039",
      "lines": [
        {
          "code": "      this.annotations.add(AnnotationSpec.builder(annotation).build());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return this;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1174137203",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  public static Builder builder(TypeName type, String name, Modifier... modifiers) {",
      "className": "com.squareup.javapoet.ParameterSpec",
      "id": "MethodSignatureBackedByPsiMethod: builder([PsiType:TypeName, PsiType:String, PsiType:Modifier[]])_-1568573460",
      "lines": [
        {
          "code": "    checkNotNull(type, \"type \u003d\u003d null\");",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    checkArgument(isValidParameterName(name), \"not a valid name: %s\", name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return new Builder(type, name)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        .addModifiers(modifiers);",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  public static TypeName get(Type type) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type])_-1957945740",
      "lines": [
        {
          "code": "    return get(type, new LinkedHashMap\u003c\u003e());",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "StringBuilder",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: StringBuilder([])_-566709873",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  CodeWriter(Appendable out) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_88657905",
      "lines": [
        {
          "code": "    this(out, \"  \", Collections.emptySet(), Collections.emptySet());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  public CodeWriter emit(String format, Object... args) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:String, PsiType:Object[]])_1129542955",
      "lines": [
        {
          "code": "    return emit(CodeBlock.of(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "toString",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_1110148212",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_200596616",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "add",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_-1849510340",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "    public AnnotationSpec build() {",
      "className": "com.squareup.javapoet.AnnotationSpec.Builder",
      "id": "MethodSignatureBackedByPsiMethod: build([])_1500416593",
      "lines": [
        {
          "code": "      for (String name : members.keySet()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        checkNotNull(name, \"name \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        checkArgument(SourceVersion.isName(name), \"not a valid name: %s\", name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new AnnotationSpec(this);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  public static Builder builder(ClassName type) {",
      "className": "com.squareup.javapoet.AnnotationSpec",
      "id": "MethodSignatureBackedByPsiMethod: builder([PsiType:ClassName])_5991458",
      "lines": [
        {
          "code": "    checkNotNull(type, \"type \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return new Builder(type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_495227287",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_723904521",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-625041748",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_2119009408",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_1637236185",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-205072523",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_2120287162",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_955459123",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_1559934025",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-2091993342",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_486645979",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-1868781795",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-401530214",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-149344289",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-650992057",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_1376240715",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-750977210",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-1094666133",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-2036860095",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1490044434",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-846969626",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2143596804",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1096885364",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "add",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_402932340",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "    public AnnotationSpec build() {",
      "className": "com.squareup.javapoet.AnnotationSpec.Builder",
      "id": "MethodSignatureBackedByPsiMethod: build([])_-1417310524",
      "lines": [
        {
          "code": "      for (String name : members.keySet()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        checkNotNull(name, \"name \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        checkArgument(SourceVersion.isName(name), \"not a valid name: %s\", name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new AnnotationSpec(this);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  public static Builder builder(ClassName type) {",
      "className": "com.squareup.javapoet.AnnotationSpec",
      "id": "MethodSignatureBackedByPsiMethod: builder([PsiType:ClassName])_482450651",
      "lines": [
        {
          "code": "    checkNotNull(type, \"type \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return new Builder(type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1611487262",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1781554745",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_668658350",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1428765293",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_322744083",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-800536168",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_-235441140",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_845637227",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_1116516068",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-1113419316",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_-623178700",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-228947408",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1530029864",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-1213863928",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_953730045",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-883452617",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-1857997127",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_1402455378",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_442616466",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_909143457",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_1638602699",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2099881480",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1936722552",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1919982624",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-504157959",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  private static boolean isValidParameterName(String name) {",
      "className": "com.squareup.javapoet.ParameterSpec",
      "id": "MethodSignatureBackedByPsiMethod: isValidParameterName([PsiType:String])_-1748855888",
      "lines": [
        {
          "code": "    // Allow \"this\" for explicit receiver parameters",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    // See https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.4.1.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (name.endsWith(\".this\")) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return SourceVersion.isIdentifier(name.substring(0, name.length() - \".this\".length()));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return name.equals(\"this\") || SourceVersion.isName(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "    public Builder addModifiers(Modifier... modifiers) {",
      "className": "com.squareup.javapoet.ParameterSpec.Builder",
      "id": "MethodSignatureBackedByPsiMethod: addModifiers([PsiType:Modifier[]])_1648899633",
      "lines": [
        {
          "code": "      Collections.addAll(this.modifiers, modifiers);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return this;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "    private Builder(TypeName type, String name) {",
      "className": "com.squareup.javapoet.ParameterSpec.Builder",
      "id": "MethodSignatureBackedByPsiMethod: Builder([PsiType:TypeName, PsiType:String])_-830693510",
      "lines": [
        {
          "code": "      this.type \u003d type;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      this.name \u003d name;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1700600913",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "LinkedHashMap",
      "className": "java.util.LinkedHashMap",
      "id": "MethodSignatureBackedByPsiMethod: LinkedHashMap([])_205087232",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  CodeWriter(Appendable out, String indent, Set\u003cString\u003e staticImports, Set\u003cString\u003e alwaysQualify) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_1837010994",
      "lines": [
        {
          "code": "    this(out, indent, Collections.emptyMap(), staticImports, alwaysQualify);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-1303964660",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_1921668018",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  public CodeWriter emit(CodeBlock codeBlock) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock])_-315466529",
      "lines": [
        {
          "code": "    return emit(codeBlock, false);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  public static CodeBlock of(String format, Object... args) {",
      "className": "com.squareup.javapoet.CodeBlock",
      "id": "MethodSignatureBackedByPsiMethod: of([PsiType:String, PsiType:Object[]])_-1297455790",
      "lines": [
        {
          "code": "    return new Builder().add(format, args).build();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "keySet",
      "className": "java.util.Map",
      "id": "MethodSignatureBackedByPsiMethod: keySet([])_-761707886",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-391953724",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1068519012",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isName",
      "className": "javax.lang.model.SourceVersion",
      "id": "MethodSignatureBackedByPsiMethod: isName([PsiType:CharSequence])_-1877792107",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private AnnotationSpec(Builder builder) {",
      "className": "com.squareup.javapoet.AnnotationSpec",
      "id": "MethodSignatureBackedByPsiMethod: AnnotationSpec([PsiType:Builder])_-1774040347",
      "lines": [
        {
          "code": "    this.type \u003d builder.type;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.members \u003d Util.immutableMultimap(builder.members);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_341867559",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "    private Builder(TypeName type) {",
      "className": "com.squareup.javapoet.AnnotationSpec.Builder",
      "id": "MethodSignatureBackedByPsiMethod: Builder([PsiType:TypeName])_-561677825",
      "lines": [
        {
          "code": "      this.type \u003d type;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_1015732873",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-423620220",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-495264274",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1220338093",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_346863838",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_471825814",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1770885454",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_985251280",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName,",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_1879849788",
      "lines": [
        {
          "code": "      List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.packageName \u003d Objects.requireNonNull(packageName, \"packageName \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.enclosingClassName \u003d enclosingClassName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.simpleName \u003d simpleName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.canonicalName \u003d enclosingClassName !\u003d null",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (enclosingClassName.canonicalName + \u0027.\u0027 + simpleName)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : (packageName.isEmpty() ? simpleName : packageName + \u0027.\u0027 + simpleName);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "emptyList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_1653871407",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1897148014",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1808759543",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1037489327",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-612864558",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-342380974",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_1583121722",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1967434200",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_1719492406",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_530988259",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_349277857",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-1892066111",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_-538593715",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-164565743",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1601984453",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_1503885789",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-2113342847",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1850018549",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-6037832",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_1876185368",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1261922112",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-68351842",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_2097027105",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-534308035",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-507604038",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "keySet",
      "className": "java.util.Map",
      "id": "MethodSignatureBackedByPsiMethod: keySet([])_49860518",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1872390485",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-312228907",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isName",
      "className": "javax.lang.model.SourceVersion",
      "id": "MethodSignatureBackedByPsiMethod: isName([PsiType:CharSequence])_-2039172375",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private AnnotationSpec(Builder builder) {",
      "className": "com.squareup.javapoet.AnnotationSpec",
      "id": "MethodSignatureBackedByPsiMethod: AnnotationSpec([PsiType:Builder])_504942528",
      "lines": [
        {
          "code": "    this.type \u003d builder.type;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.members \u003d Util.immutableMultimap(builder.members);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-466107232",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "    private Builder(TypeName type) {",
      "className": "com.squareup.javapoet.AnnotationSpec.Builder",
      "id": "MethodSignatureBackedByPsiMethod: Builder([PsiType:TypeName])_-103363583",
      "lines": [
        {
          "code": "      this.type \u003d type;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-1759590447",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-390546108",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-164981808",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1987836279",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-847992311",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1675794574",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-1712142409",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-624918220",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName,",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_1908070009",
      "lines": [
        {
          "code": "      List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.packageName \u003d Objects.requireNonNull(packageName, \"packageName \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.enclosingClassName \u003d enclosingClassName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.simpleName \u003d simpleName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.canonicalName \u003d enclosingClassName !\u003d null",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (enclosingClassName.canonicalName + \u0027.\u0027 + simpleName)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : (packageName.isEmpty() ? simpleName : packageName + \u0027.\u0027 + simpleName);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "emptyList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_958575594",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-704496162",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1282486105",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-920516508",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-233218719",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_372758657",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-2031015499",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_211345064",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_-281712239",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_1641082737",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_695965567",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-1665396412",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_161057393",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-326735044",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-148728646",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_659946267",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1360715430",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-323096950",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_354265545",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_1118206967",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-1835285191",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1403407927",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-1513117624",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_515405520",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_127121545",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-986188532",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1047723752",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1436184652",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1984259202",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "endsWith",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: endsWith([PsiType:String])_1911856",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isIdentifier",
      "className": "javax.lang.model.SourceVersion",
      "id": "MethodSignatureBackedByPsiMethod: isIdentifier([PsiType:CharSequence])_-1389828164",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_1554256265",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "length",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: length([])_1686334478",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "length",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: length([])_1523730752",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "equals",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-136259869",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isName",
      "className": "javax.lang.model.SourceVersion",
      "id": "MethodSignatureBackedByPsiMethod: isName([PsiType:CharSequence])_1800049434",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "addAll",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eaddAll([PsiType:Collection\u003c? super T\u003e, PsiType:T[]])_1475842507",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_-218969830",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public static ArrayTypeName of(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_1940081221",
      "lines": [
        {
          "code": "    return new ArrayTypeName(componentType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-475900848",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getComponentType",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getComponentType([])_770127871",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_2088527442",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static ParameterizedTypeName get(ParameterizedType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1831322033",
      "lines": [
        {
          "code": "    ClassName rawType \u003d ClassName.get((Class\u003c?\u003e) type.getRawType());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    ParameterizedType ownerType \u003d (type.getOwnerType() instanceof ParameterizedType)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        \u0026\u0026 !Modifier.isStatic(((Class\u003c?\u003e) type.getRawType()).getModifiers())",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (ParameterizedType) type.getOwnerType() : null;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    List\u003cTypeName\u003e typeArguments \u003d TypeName.list(type.getActualTypeArguments(), map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return (ownerType !\u003d null)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? get(ownerType, map).nestedClass(rawType.simpleName(), typeArguments)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : new ParameterizedTypeName(null, rawType, typeArguments);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static TypeName get(WildcardType wildcardName, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.WildcardTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-171171142",
      "lines": [
        {
          "code": "    return new WildcardTypeName(",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getUpperBounds(), map),",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getLowerBounds(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static TypeVariableName get(java.lang.reflect.TypeVariable\u003c?\u003e type,",
      "className": "com.squareup.javapoet.TypeVariableName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_1152084936",
      "lines": [
        {
          "code": "      Map\u003cType, TypeVariableName\u003e map) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    TypeVariableName result \u003d map.get(type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e bounds \u003d new ArrayList\u003c\u003e();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e visibleBounds \u003d Collections.unmodifiableList(bounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result \u003d new TypeVariableName(type.getName(), visibleBounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      map.put(type, result);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      for (Type bound : type.getBounds()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        bounds.add(TypeName.get(bound, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      bounds.remove(OBJECT);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static ArrayTypeName get(GenericArrayType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_804034133",
      "lines": [
        {
          "code": "    return ArrayTypeName.of(get(type.getGenericComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_572219751",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter(Appendable out,",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Map\u003cString, ClassName\u003e, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-1368328722",
      "lines": [
        {
          "code": "      String indent,",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      Map\u003cString, ClassName\u003e importedTypes,",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      Set\u003cString\u003e staticImports,",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      Set\u003cString\u003e alwaysQualify) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.out \u003d new LineWrapper(out, indent, 100);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.indent \u003d checkNotNull(indent, \"indent \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.importedTypes \u003d checkNotNull(importedTypes, \"importedTypes \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.staticImports \u003d checkNotNull(staticImports, \"staticImports \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.alwaysQualify \u003d checkNotNull(alwaysQualify, \"alwaysQualify \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.staticImportClassNames \u003d new LinkedHashSet\u003c\u003e();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (String signature : staticImports) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      staticImportClassNames.add(signature.substring(0, signature.lastIndexOf(\u0027.\u0027)));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "emptyMap",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cK, V\u003eemptyMap([])_-507383913",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public CodeWriter emit(CodeBlock codeBlock, boolean ensureTrailingNewline) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "lines": [
        {
          "code": "    int a \u003d 0;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    ClassName deferredTypeName \u003d null; // used by \"import static\" logic",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    ListIterator\u003cString\u003e partIterator \u003d codeBlock.formatParts.listIterator();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    while (partIterator.hasNext()) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      String part \u003d partIterator.next();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      switch (part) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        case \"$L\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitLiteral(codeBlock.args.get(a++));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$N\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitAndIndent((String) codeBlock.args.get(a++));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$S\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          String string \u003d (String) codeBlock.args.get(a++);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          // Emit null as a literal null: no quotes.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitAndIndent(string !\u003d null",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "              ? stringLiteralWithDoubleQuotes(string, indent)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "              : \"null\");",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$T\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          TypeName typeName \u003d (TypeName) codeBlock.args.get(a++);",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "          // defer \"typeName.emit(this)\" if next format part will be handled by the default case",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (typeName instanceof ClassName \u0026\u0026 partIterator.hasNext()) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "            if (!codeBlock.formatParts.get(partIterator.nextIndex()).startsWith(\"$\")) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "              ClassName candidate \u003d (ClassName) typeName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "              if (staticImportClassNames.contains(candidate.canonicalName)) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "                checkState(deferredTypeName \u003d\u003d null, \"pending type for static import?!\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "                deferredTypeName \u003d candidate;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "                break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "              }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          typeName.emit(this);",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$$\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitAndIndent(\"$\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$\u003e\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          indent();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$\u003c\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          unindent();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$[\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          checkState(statementLine \u003d\u003d -1, \"statement enter $[ followed by statement enter $[\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          statementLine \u003d 0;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$]\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          checkState(statementLine !\u003d -1, \"statement exit $] has no matching statement enter $[\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (statementLine \u003e 0) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            unindent(2); // End a multi-line statement. Decrease the indentation level.",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          statementLine \u003d -1;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$W\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.wrappingSpace(indentLevel + 2);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$Z\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.zeroWidthSpace(indentLevel + 2);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        default:",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          // handle deferred type",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (deferredTypeName !\u003d null) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "            if (part.startsWith(\".\")) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "              if (emitStaticImportMember(deferredTypeName.canonicalName, part)) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "                // okay, static import hit and all was emitted, so clean-up and jump to next part",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "                deferredTypeName \u003d null;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "                break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "              }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            deferredTypeName.emit(this);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            deferredTypeName \u003d null;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitAndIndent(part);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (ensureTrailingNewline \u0026\u0026 out.lastChar() !\u003d \u0027\\n\u0027) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      emit(\"\\n\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return this;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": true,
      "nodeLevel": 4
    },
    {
      "signature": "    public CodeBlock build() {",
      "className": "com.squareup.javapoet.CodeBlock.Builder",
      "id": "MethodSignatureBackedByPsiMethod: build([])_-1006189662",
      "lines": [
        {
          "code": "      return new CodeBlock(this);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "    public Builder add(String format, Object... args) {",
      "className": "com.squareup.javapoet.CodeBlock.Builder",
      "id": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_962012040",
      "lines": [
        {
          "code": "      boolean hasRelative \u003d false;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      boolean hasIndexed \u003d false;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int relativeParameterCount \u003d 0;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int[] indexedParameterCount \u003d new int[args.length];",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      for (int p \u003d 0; p \u003c format.length(); ) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (format.charAt(p) !\u003d \u0027$\u0027) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          int nextP \u003d format.indexOf(\u0027$\u0027, p + 1);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (nextP \u003d\u003d -1) nextP \u003d format.length();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          formatParts.add(format.substring(p, nextP));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          p \u003d nextP;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          continue;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        p++; // \u0027$\u0027.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        // Consume zero or more digits, leaving \u0027c\u0027 as the first non-digit char after the \u0027$\u0027.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        int indexStart \u003d p;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        char c;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        do {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          checkArgument(p \u003c format.length(), \"dangling format characters in \u0027%s\u0027\", format);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          c \u003d format.charAt(p++);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        } while (c \u003e\u003d \u00270\u0027 \u0026\u0026 c \u003c\u003d \u00279\u0027);",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        int indexEnd \u003d p - 1;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        // If \u0027c\u0027 doesn\u0027t take an argument, we\u0027re done.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (isNoArgPlaceholder(c)) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          checkArgument(",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "              indexStart \u003d\u003d indexEnd, \"$$, $\u003e, $\u003c, $[, $], $W, and $Z may not have an index\");",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          formatParts.add(\"$\" + c);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          continue;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        // Find either the indexed argument, or the relative argument. (0-based).",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        int index;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (indexStart \u003c indexEnd) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          index \u003d Integer.parseInt(format.substring(indexStart, indexEnd)) - 1;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          hasIndexed \u003d true;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (args.length \u003e 0) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            indexedParameterCount[index % args.length]++; // modulo is needed, checked below anyway",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          index \u003d relativeParameterCount;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          hasRelative \u003d true;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          relativeParameterCount++;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        checkArgument(index \u003e\u003d 0 \u0026\u0026 index \u003c args.length,",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            \"index %d for \u0027%s\u0027 not in range (received %s arguments)\",",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            index + 1, format.substring(indexStart - 1, indexEnd + 1), args.length);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        checkArgument(!hasIndexed || !hasRelative, \"cannot mix indexed and positional parameters\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        addArgument(format, c, args[index]);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        formatParts.add(\"$\" + c);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (hasRelative) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        checkArgument(relativeParameterCount \u003e\u003d args.length,",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            \"unused arguments: expected %s, received %s\", relativeParameterCount, args.length);",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (hasIndexed) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        List\u003cString\u003e unused \u003d new ArrayList\u003c\u003e();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        for (int i \u003d 0; i \u003c args.length; i++) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (indexedParameterCount[i] \u003d\u003d 0) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            unused.add(\"$\" + (i + 1));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        String s \u003d unused.size() \u003d\u003d 1 ? \"\" : \"s\";",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        checkArgument(unused.isEmpty(), \"unused argument%s: %s\", s, String.join(\", \", unused));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return this;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "    private Builder() {",
      "className": "com.squareup.javapoet.CodeBlock.Builder",
      "id": "MethodSignatureBackedByPsiMethod: Builder([])_62912735",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-6553260",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1010380935",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_2018004850",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1362717432",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static \u003cK, V\u003e Map\u003cK, List\u003cV\u003e\u003e immutableMultimap(Map\u003cK, List\u003cV\u003e\u003e multimap) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cK, V\u003eimmutableMultimap([PsiType:Map\u003cK, List\u003cV\u003e\u003e])_1218630451",
      "lines": [
        {
          "code": "    LinkedHashMap\u003cK, List\u003cV\u003e\u003e result \u003d new LinkedHashMap\u003c\u003e();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    for (Map.Entry\u003cK, List\u003cV\u003e\u003e entry : multimap.entrySet()) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (entry.getValue().isEmpty()) continue;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result.put(entry.getKey(), immutableList(entry.getValue()));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return Collections.unmodifiableMap(result);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_616278247",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1143970917",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  TypeName(List\u003cAnnotationSpec\u003e annotations) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: TypeName([PsiType:List\u003cAnnotationSpec\u003e])_-140252759",
      "lines": [
        {
          "code": "    this(null, annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "requireNonNull",
      "className": "java.util.Objects",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003erequireNonNull([PsiType:T, PsiType:String])_-1021794387",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isEmpty",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: isEmpty([])_-43119064",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName,",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-1496588112",
      "lines": [
        {
          "code": "      List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.packageName \u003d Objects.requireNonNull(packageName, \"packageName \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.enclosingClassName \u003d enclosingClassName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.simpleName \u003d simpleName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.canonicalName \u003d enclosingClassName !\u003d null",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (enclosingClassName.canonicalName + \u0027.\u0027 + simpleName)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : (packageName.isEmpty() ? simpleName : packageName + \u0027.\u0027 + simpleName);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptyList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_1288422390",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_1838935631",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1989981766",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-20323528",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_537209719",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-1377781863",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1096252174",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_2060903615",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_2001857531",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName,",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-836261407",
      "lines": [
        {
          "code": "      List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.packageName \u003d Objects.requireNonNull(packageName, \"packageName \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.enclosingClassName \u003d enclosingClassName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.simpleName \u003d simpleName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.canonicalName \u003d enclosingClassName !\u003d null",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (enclosingClassName.canonicalName + \u0027.\u0027 + simpleName)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : (packageName.isEmpty() ? simpleName : packageName + \u0027.\u0027 + simpleName);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptyList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_-814766185",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1518074216",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1703916853",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1976246153",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_756346796",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1637283450",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_195451681",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_515053833",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_506592841",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_1565390948",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-242637350",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1708249929",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_1321735421",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1000785152",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1284695957",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_397625036",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1881972702",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_1237028379",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-1505071343",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_522801973",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-1502884640",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1273309131",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-1818522036",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1502531218",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1886176362",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_1769507204",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1578401907",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-310585851",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_147347238",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static \u003cK, V\u003e Map\u003cK, List\u003cV\u003e\u003e immutableMultimap(Map\u003cK, List\u003cV\u003e\u003e multimap) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cK, V\u003eimmutableMultimap([PsiType:Map\u003cK, List\u003cV\u003e\u003e])_1303536959",
      "lines": [
        {
          "code": "    LinkedHashMap\u003cK, List\u003cV\u003e\u003e result \u003d new LinkedHashMap\u003c\u003e();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    for (Map.Entry\u003cK, List\u003cV\u003e\u003e entry : multimap.entrySet()) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (entry.getValue().isEmpty()) continue;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result.put(entry.getKey(), immutableList(entry.getValue()));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return Collections.unmodifiableMap(result);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-1355938515",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1844577446",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  TypeName(List\u003cAnnotationSpec\u003e annotations) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: TypeName([PsiType:List\u003cAnnotationSpec\u003e])_-352570088",
      "lines": [
        {
          "code": "    this(null, annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "requireNonNull",
      "className": "java.util.Objects",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003erequireNonNull([PsiType:T, PsiType:String])_311064344",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isEmpty",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: isEmpty([])_-1436026463",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName,",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_679195815",
      "lines": [
        {
          "code": "      List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.packageName \u003d Objects.requireNonNull(packageName, \"packageName \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.enclosingClassName \u003d enclosingClassName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.simpleName \u003d simpleName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.canonicalName \u003d enclosingClassName !\u003d null",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (enclosingClassName.canonicalName + \u0027.\u0027 + simpleName)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : (packageName.isEmpty() ? simpleName : packageName + \u0027.\u0027 + simpleName);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptyList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_1890714098",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-1600244983",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1943933460",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-1823494471",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_779279013",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1447644499",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-2034123948",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-968430673",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_2073370683",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName,",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_1603243715",
      "lines": [
        {
          "code": "      List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.packageName \u003d Objects.requireNonNull(packageName, \"packageName \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.enclosingClassName \u003d enclosingClassName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.simpleName \u003d simpleName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.canonicalName \u003d enclosingClassName !\u003d null",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (enclosingClassName.canonicalName + \u0027.\u0027 + simpleName)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : (packageName.isEmpty() ? simpleName : packageName + \u0027.\u0027 + simpleName);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptyList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_813628504",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_361778272",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_532388835",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1780033846",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_997302496",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1090284496",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-2045095859",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_520179808",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_-1132916298",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_-1791889519",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1255764936",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1106189000",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_-1431464140",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-684983705",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_362615368",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-2048069866",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1108019393",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1000692438",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1461873180",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_83034512",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-277971341",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1691853296",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_1483648671",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2091014686",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-654710625",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ArrayTypeName(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: ArrayTypeName([PsiType:TypeName])_-811635350",
      "lines": [
        {
          "code": "    this(componentType, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_1446473118",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ArrayTypeName of(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_-53446371",
      "lines": [
        {
          "code": "    return new ArrayTypeName(componentType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-44049293",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getComponentType",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getComponentType([])_1692512910",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_203386011",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static ParameterizedTypeName get(ParameterizedType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1620289537",
      "lines": [
        {
          "code": "    ClassName rawType \u003d ClassName.get((Class\u003c?\u003e) type.getRawType());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    ParameterizedType ownerType \u003d (type.getOwnerType() instanceof ParameterizedType)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        \u0026\u0026 !Modifier.isStatic(((Class\u003c?\u003e) type.getRawType()).getModifiers())",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (ParameterizedType) type.getOwnerType() : null;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    List\u003cTypeName\u003e typeArguments \u003d TypeName.list(type.getActualTypeArguments(), map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return (ownerType !\u003d null)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? get(ownerType, map).nestedClass(rawType.simpleName(), typeArguments)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : new ParameterizedTypeName(null, rawType, typeArguments);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(WildcardType wildcardName, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.WildcardTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2015760776",
      "lines": [
        {
          "code": "    return new WildcardTypeName(",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getUpperBounds(), map),",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getLowerBounds(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeVariableName get(java.lang.reflect.TypeVariable\u003c?\u003e type,",
      "className": "com.squareup.javapoet.TypeVariableName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-561920906",
      "lines": [
        {
          "code": "      Map\u003cType, TypeVariableName\u003e map) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    TypeVariableName result \u003d map.get(type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e bounds \u003d new ArrayList\u003c\u003e();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e visibleBounds \u003d Collections.unmodifiableList(bounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result \u003d new TypeVariableName(type.getName(), visibleBounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      map.put(type, result);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      for (Type bound : type.getBounds()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        bounds.add(TypeName.get(bound, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      bounds.remove(OBJECT);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static ArrayTypeName get(GenericArrayType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_1058891488",
      "lines": [
        {
          "code": "    return ArrayTypeName.of(get(type.getGenericComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1619580287",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1797480255",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_84562567",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_105388246",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_195650936",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-2061825827",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-706364714",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_1460087959",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_-472371253",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-812503146",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-1730240826",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_-242361408",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-1024663666",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-395630121",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-855466507",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-209888628",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_1149207194",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-974777495",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_574315352",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-1915068386",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1566510412",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_522780644",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1938829476",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1302175715",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_654694026",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getRawType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getRawType([])_2146721889",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getOwnerType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getOwnerType([])_407188463",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isStatic",
      "className": "java.lang.reflect.Modifier",
      "id": "MethodSignatureBackedByPsiMethod: isStatic([PsiType:int])_-402503291",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getModifiers",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getModifiers([])_-922005500",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getRawType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getRawType([])_-1337225101",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getOwnerType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getOwnerType([])_-30248041",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static List\u003cTypeName\u003e list(Type[] types, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-805708100",
      "lines": [
        {
          "code": "    List\u003cTypeName\u003e result \u003d new ArrayList\u003c\u003e(types.length);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (Type type : types) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result.add(get(type, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getActualTypeArguments",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getActualTypeArguments([])_1958903484",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public ParameterizedTypeName nestedClass(String name, List\u003cTypeName\u003e typeArguments) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String, PsiType:List\u003cTypeName\u003e])_-924533162",
      "lines": [
        {
          "code": "    checkNotNull(name, \"name \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return new ParameterizedTypeName(this, rawType.nestedClass(name), typeArguments,",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static ParameterizedTypeName get(ParameterizedType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_267947106",
      "lines": [
        {
          "code": "    ClassName rawType \u003d ClassName.get((Class\u003c?\u003e) type.getRawType());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    ParameterizedType ownerType \u003d (type.getOwnerType() instanceof ParameterizedType)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        \u0026\u0026 !Modifier.isStatic(((Class\u003c?\u003e) type.getRawType()).getModifiers())",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (ParameterizedType) type.getOwnerType() : null;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    List\u003cTypeName\u003e typeArguments \u003d TypeName.list(type.getActualTypeArguments(), map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return (ownerType !\u003d null)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? get(ownerType, map).nestedClass(rawType.simpleName(), typeArguments)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : new ParameterizedTypeName(null, rawType, typeArguments);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  ParameterizedTypeName(ParameterizedTypeName enclosingType, ClassName rawType,",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: ParameterizedTypeName([PsiType:ParameterizedTypeName, PsiType:ClassName, PsiType:List\u003cTypeName\u003e])_-64423993",
      "lines": [
        {
          "code": "      List\u003cTypeName\u003e typeArguments) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this(enclosingType, rawType, typeArguments, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private WildcardTypeName(List\u003cTypeName\u003e upperBounds, List\u003cTypeName\u003e lowerBounds) {",
      "className": "com.squareup.javapoet.WildcardTypeName",
      "id": "MethodSignatureBackedByPsiMethod: WildcardTypeName([PsiType:List\u003cTypeName\u003e, PsiType:List\u003cTypeName\u003e])_716350057",
      "lines": [
        {
          "code": "    this(upperBounds, lowerBounds, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static List\u003cTypeName\u003e list(Type[] types, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_208010726",
      "lines": [
        {
          "code": "    List\u003cTypeName\u003e result \u003d new ArrayList\u003c\u003e(types.length);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (Type type : types) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result.add(get(type, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getUpperBounds",
      "className": "java.lang.reflect.WildcardType",
      "id": "MethodSignatureBackedByPsiMethod: getUpperBounds([])_-99788689",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static List\u003cTypeName\u003e list(Type[] types, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_356672852",
      "lines": [
        {
          "code": "    List\u003cTypeName\u003e result \u003d new ArrayList\u003c\u003e(types.length);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (Type type : types) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result.add(get(type, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getLowerBounds",
      "className": "java.lang.reflect.WildcardType",
      "id": "MethodSignatureBackedByPsiMethod: getLowerBounds([])_2114828761",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "get",
      "className": "java.util.Map",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Object])_1806885163",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "ArrayList",
      "className": "java.util.ArrayList",
      "id": "MethodSignatureBackedByPsiMethod: ArrayList([])_-1664570121",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "unmodifiableList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eunmodifiableList([PsiType:List\u003c? extends T\u003e])_-2110203923",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private TypeVariableName(String name, List\u003cTypeName\u003e bounds) {",
      "className": "com.squareup.javapoet.TypeVariableName",
      "id": "MethodSignatureBackedByPsiMethod: TypeVariableName([PsiType:String, PsiType:List\u003cTypeName\u003e])_-1272317794",
      "lines": [
        {
          "code": "    this(name, bounds, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.reflect.TypeVariable",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1634657678",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "put",
      "className": "java.util.Map",
      "id": "MethodSignatureBackedByPsiMethod: put([PsiType:K, PsiType:V])_143142479",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getBounds",
      "className": "java.lang.reflect.TypeVariable",
      "id": "MethodSignatureBackedByPsiMethod: getBounds([])_1297770493",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "add",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_-824105301",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1051215897",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "remove",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: remove([PsiType:Object])_1221711060",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ArrayTypeName of(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_43051921",
      "lines": [
        {
          "code": "    return new ArrayTypeName(componentType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1856592993",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getGenericComponentType",
      "className": "java.lang.reflect.GenericArrayType",
      "id": "MethodSignatureBackedByPsiMethod: getGenericComponentType([])_940324846",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  LineWrapper(Appendable out, String indent, int columnLimit) {",
      "className": "com.squareup.javapoet.LineWrapper",
      "id": "MethodSignatureBackedByPsiMethod: LineWrapper([PsiType:Appendable, PsiType:String, PsiType:int])_-182128887",
      "lines": [
        {
          "code": "    checkNotNull(out, \"out \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.out \u003d new RecordingAppendable(out);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.indent \u003d indent;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.columnLimit \u003d columnLimit;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1182319714",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_135418436",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_955457498",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_2046614114",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "LinkedHashSet",
      "className": "java.util.LinkedHashSet",
      "id": "MethodSignatureBackedByPsiMethod: LinkedHashSet([])_-1710749165",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "add",
      "className": "java.util.Set",
      "id": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_1352366064",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_1861354058",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_1158018400",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "listIterator",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: listIterator([])_1091015862",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "hasNext",
      "className": "java.util.ListIterator",
      "id": "MethodSignatureBackedByPsiMethod: hasNext([])_1231029837",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "next",
      "className": "java.util.ListIterator",
      "id": "MethodSignatureBackedByPsiMethod: next([])_-1074019735",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private void emitLiteral(Object o) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emitLiteral([PsiType:Object])_1105665757",
      "lines": [
        {
          "code": "    if (o instanceof TypeSpec) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      TypeSpec typeSpec \u003d (TypeSpec) o;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      typeSpec.emit(this, null, Collections.emptySet());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (o instanceof AnnotationSpec) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      AnnotationSpec annotationSpec \u003d (AnnotationSpec) o;",
          "callsMethod": false,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "      annotationSpec.emit(this, true);",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    } else if (o instanceof CodeBlock) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      CodeBlock codeBlock \u003d (CodeBlock) o;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      emit(codeBlock);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      emitAndIndent(String.valueOf(o));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": true,
      "nodeLevel": 5
    },
    {
      "signature": "get",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:int])_-1514951788",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAndIndent(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_473268481",
      "lines": [
        {
          "code": "    boolean first \u003d true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    for (String line : s.split(\"\\\\R\", -1)) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      // Emit a newline character. Make sure blank lines in Javadoc \u0026 comments look good.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (!first) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        if ((javadoc || comment) \u0026\u0026 trailingNewline) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(javadoc ? \" *\" : \"//\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        out.append(\"\\n\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        trailingNewline \u003d true;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (statementLine !\u003d -1) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (statementLine \u003d\u003d 0) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            indent(2); // Begin multiple-line statement. Increase the indentation level.",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          statementLine++;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      first \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (line.isEmpty()) continue; // Don\u0027t indent empty lines.",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Emit indentation and comment prefix if necessary.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (trailingNewline) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (javadoc) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\" * \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        } else if (comment) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\"// \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.append(line);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      trailingNewline \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return this;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "get",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:int])_-900994484",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "get",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:int])_-665626968",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAndIndent(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_-1124967379",
      "lines": [
        {
          "code": "    boolean first \u003d true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    for (String line : s.split(\"\\\\R\", -1)) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      // Emit a newline character. Make sure blank lines in Javadoc \u0026 comments look good.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (!first) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        if ((javadoc || comment) \u0026\u0026 trailingNewline) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(javadoc ? \" *\" : \"//\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        out.append(\"\\n\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        trailingNewline \u003d true;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (statementLine !\u003d -1) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (statementLine \u003d\u003d 0) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            indent(2); // Begin multiple-line statement. Increase the indentation level.",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          statementLine++;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      first \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (line.isEmpty()) continue; // Don\u0027t indent empty lines.",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Emit indentation and comment prefix if necessary.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (trailingNewline) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (javadoc) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\" * \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        } else if (comment) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\"// \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.append(line);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      trailingNewline \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return this;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static String stringLiteralWithDoubleQuotes(String value, String indent) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: stringLiteralWithDoubleQuotes([PsiType:String, PsiType:String])_1219255078",
      "lines": [
        {
          "code": "    StringBuilder result \u003d new StringBuilder(value.length() + 2);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    result.append(\u0027\"\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (int i \u003d 0; i \u003c value.length(); i++) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      char c \u003d value.charAt(i);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // trivial case: single quote must not be escaped",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (c \u003d\u003d \u0027\\\u0027\u0027) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        result.append(\"\u0027\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        continue;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // trivial case: double quotes must be escaped",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (c \u003d\u003d \u0027\\\"\u0027) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        result.append(\"\\\\\\\"\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        continue;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // default case: just let character literal do its work",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result.append(characterLiteralWithoutSingleQuotes(c));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // need to append indent after linefeed?",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (c \u003d\u003d \u0027\\n\u0027 \u0026\u0026 i + 1 \u003c value.length()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        result.append(\"\\\"\\n\").append(indent).append(indent).append(\"+ \\\"\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    result.append(\u0027\"\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result.toString();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "get",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:int])_-1885961315",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "hasNext",
      "className": "java.util.ListIterator",
      "id": "MethodSignatureBackedByPsiMethod: hasNext([])_-1153674412",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "startsWith",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: startsWith([PsiType:String])_-1461076611",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "get",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:int])_-651578564",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "nextIndex",
      "className": "java.util.ListIterator",
      "id": "MethodSignatureBackedByPsiMethod: nextIndex([])_214587006",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "contains",
      "className": "java.util.Set",
      "id": "MethodSignatureBackedByPsiMethod: contains([PsiType:Object])_-1120394931",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkState(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkState([PsiType:boolean, PsiType:String, PsiType:Object[]])_1939907457",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalStateException(String.format(format, args));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emit(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_810310241",
      "lines": [
        {
          "code": "    if (keyword \u003d\u003d null) throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (isAnnotated()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.emit(\"\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      emitAnnotations(out);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return out.emitAndIndent(keyword);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAndIndent(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_779989671",
      "lines": [
        {
          "code": "    boolean first \u003d true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    for (String line : s.split(\"\\\\R\", -1)) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      // Emit a newline character. Make sure blank lines in Javadoc \u0026 comments look good.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (!first) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        if ((javadoc || comment) \u0026\u0026 trailingNewline) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(javadoc ? \" *\" : \"//\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        out.append(\"\\n\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        trailingNewline \u003d true;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (statementLine !\u003d -1) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (statementLine \u003d\u003d 0) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            indent(2); // Begin multiple-line statement. Increase the indentation level.",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          statementLine++;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      first \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (line.isEmpty()) continue; // Don\u0027t indent empty lines.",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Emit indentation and comment prefix if necessary.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (trailingNewline) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (javadoc) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\" * \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        } else if (comment) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\"// \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.append(line);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      trailingNewline \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return this;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public CodeWriter indent() {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: indent([])_1152982827",
      "lines": [
        {
          "code": "    return indent(1);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public CodeWriter unindent() {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: unindent([])_1291355896",
      "lines": [
        {
          "code": "    return unindent(1);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkState(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkState([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1824613697",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalStateException(String.format(format, args));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkState(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkState([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1191434544",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalStateException(String.format(format, args));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public CodeWriter unindent(int levels) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: unindent([PsiType:int])_886631242",
      "lines": [
        {
          "code": "    checkArgument(indentLevel - levels \u003e\u003d 0, \"cannot unindent %s from %s\", levels, indentLevel);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    indentLevel -\u003d levels;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return this;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  void wrappingSpace(int indentLevel) throws IOException {",
      "className": "com.squareup.javapoet.LineWrapper",
      "id": "MethodSignatureBackedByPsiMethod: wrappingSpace([PsiType:int])_1459070318",
      "lines": [
        {
          "code": "    if (closed) throw new IllegalStateException(\"closed\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (this.nextFlush !\u003d null) flush(nextFlush);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    column++; // Increment the column even though the space is deferred to next call to flush().",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.nextFlush \u003d FlushType.SPACE;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.indentLevel \u003d indentLevel;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  void zeroWidthSpace(int indentLevel) throws IOException {",
      "className": "com.squareup.javapoet.LineWrapper",
      "id": "MethodSignatureBackedByPsiMethod: zeroWidthSpace([PsiType:int])_-1179029179",
      "lines": [
        {
          "code": "    if (closed) throw new IllegalStateException(\"closed\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (column \u003d\u003d 0) return;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (this.nextFlush !\u003d null) flush(nextFlush);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.nextFlush \u003d FlushType.EMPTY;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.indentLevel \u003d indentLevel;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "startsWith",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: startsWith([PsiType:String])_-915551658",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private boolean emitStaticImportMember(String canonical, String part) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emitStaticImportMember([PsiType:String, PsiType:String])_1382815386",
      "lines": [
        {
          "code": "    String partWithoutLeadingDot \u003d part.substring(1);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (partWithoutLeadingDot.isEmpty()) return false;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    char first \u003d partWithoutLeadingDot.charAt(0);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (!Character.isJavaIdentifierStart(first)) return false;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String explicit \u003d canonical + \".\" + extractMemberName(partWithoutLeadingDot);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String wildcard \u003d canonical + \".*\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (staticImports.contains(explicit) || staticImports.contains(wildcard)) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      emitAndIndent(partWithoutLeadingDot);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return true;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return false;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  @Override CodeWriter emit(CodeWriter out) throws IOException {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_356949365",
      "lines": [
        {
          "code": "    boolean charsEmitted \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    for (ClassName className : enclosingClasses()) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "      String simpleName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (charsEmitted) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "        // We\u0027ve already emitted an enclosing class. Emit as we go.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        out.emit(\".\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        simpleName \u003d className.simpleName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      } else if (className.isAnnotated() || className \u003d\u003d this) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "        // We encountered the first enclosing class that must be emitted.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        String qualifiedName \u003d out.lookupName(className);",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "        int dot \u003d qualifiedName.lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "        if (dot !\u003d -1) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "          out.emitAndIndent(qualifiedName.substring(0, dot + 1));",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "          simpleName \u003d qualifiedName.substring(dot + 1);",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "          charsEmitted \u003d true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "        } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          simpleName \u003d qualifiedName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        // Don\u0027t emit this enclosing type. Keep going so we can be more precise.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        continue;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (className.isAnnotated()) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "        if (charsEmitted) out.emit(\" \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        className.emitAnnotations(out);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.emit(simpleName);",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "      charsEmitted \u003d true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return out;",
          "callsMethod": false,
          "covered": true,
          "addCovered": true
        }
      ],
      "addCovered": true,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter emitAndIndent(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_664088217",
      "lines": [
        {
          "code": "    boolean first \u003d true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    for (String line : s.split(\"\\\\R\", -1)) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      // Emit a newline character. Make sure blank lines in Javadoc \u0026 comments look good.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (!first) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        if ((javadoc || comment) \u0026\u0026 trailingNewline) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(javadoc ? \" *\" : \"//\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        out.append(\"\\n\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        trailingNewline \u003d true;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (statementLine !\u003d -1) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (statementLine \u003d\u003d 0) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            indent(2); // Begin multiple-line statement. Increase the indentation level.",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          statementLine++;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      first \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (line.isEmpty()) continue; // Don\u0027t indent empty lines.",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Emit indentation and comment prefix if necessary.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (trailingNewline) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        emitIndentation();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (javadoc) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\" * \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        } else if (comment) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.append(\"// \");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      out.append(line);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      trailingNewline \u003d false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return this;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  char lastChar() {",
      "className": "com.squareup.javapoet.LineWrapper",
      "id": "MethodSignatureBackedByPsiMethod: lastChar([])_-503907048",
      "lines": [
        {
          "code": "    return out.lastChar;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public CodeWriter emit(String s) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_-1843547982",
      "lines": [
        {
          "code": "    return emitAndIndent(s);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private CodeBlock(Builder builder) {",
      "className": "com.squareup.javapoet.CodeBlock",
      "id": "MethodSignatureBackedByPsiMethod: CodeBlock([PsiType:Builder])_-382399691",
      "lines": [
        {
          "code": "    this.formatParts \u003d Util.immutableList(builder.formatParts);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.args \u003d Util.immutableList(builder.args);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "length",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: length([])_-519130292",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "charAt",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: charAt([PsiType:int])_2000273826",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "indexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: indexOf([PsiType:int, PsiType:int])_-525401813",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "length",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: length([])_1187834151",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "add",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_-1717060785",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-1869605491",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-77004245",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "length",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: length([])_699709725",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "charAt",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: charAt([PsiType:int])_-251925339",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "    private boolean isNoArgPlaceholder(char c) {",
      "className": "com.squareup.javapoet.CodeBlock.Builder",
      "id": "MethodSignatureBackedByPsiMethod: isNoArgPlaceholder([PsiType:char])_-1075254235",
      "lines": [
        {
          "code": "      return c \u003d\u003d \u0027$\u0027 || c \u003d\u003d \u0027\u003e\u0027 || c \u003d\u003d \u0027\u003c\u0027 || c \u003d\u003d \u0027[\u0027 || c \u003d\u003d \u0027]\u0027 || c \u003d\u003d \u0027W\u0027 || c \u003d\u003d \u0027Z\u0027;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-913149888",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "add",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_-1373849211",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "parseInt",
      "className": "java.lang.Integer",
      "id": "MethodSignatureBackedByPsiMethod: parseInt([PsiType:String])_-1068786343",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-391663796",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1637253998",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_49523437",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_840467634",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "    private void addArgument(String format, char c, Object arg) {",
      "className": "com.squareup.javapoet.CodeBlock.Builder",
      "id": "MethodSignatureBackedByPsiMethod: addArgument([PsiType:String, PsiType:char, PsiType:Object])_-2004850019",
      "lines": [
        {
          "code": "      switch (c) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \u0027N\u0027:",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          this.args.add(argToName(arg));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \u0027L\u0027:",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          this.args.add(argToLiteral(arg));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \u0027S\u0027:",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          this.args.add(argToString(arg));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \u0027T\u0027:",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          this.args.add(argToType(arg));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        default:",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          throw new IllegalArgumentException(",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "              String.format(\"invalid format string: \u0027%s\u0027\", format));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "add",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_-625629814",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1667492297",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "ArrayList",
      "className": "java.util.ArrayList",
      "id": "MethodSignatureBackedByPsiMethod: ArrayList([])_440388518",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "add",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_1749615828",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "size",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: size([])_802863561",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1637752716",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isEmpty",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: isEmpty([])_1002451083",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "join",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: join([PsiType:CharSequence, PsiType:Iterable\u003c? extends CharSequence\u003e])_1465527148",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    }
  ],
  "edges": [
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:Class\u003c?\u003e])_-125578454",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:Class\u003c?\u003e])_1713487852",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: builder([PsiType:Type, PsiType:String, PsiType:Modifier[]])_395245217",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: remove([PsiType:int])_-1317894307",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: isEqualTo([PsiType:Object])_1627599210",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: assertThat([PsiType:String])_-854853981",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_1998527404",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:Class\u003c?\u003e])_-125578454",
      "target": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:ClassName])_393051392",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:Class\u003c?\u003e])_-125578454",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_554832727",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:Class\u003c?\u003e])_1713487852",
      "target": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:ClassName])_180419039",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:Class\u003c?\u003e])_1713487852",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1174137203",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:Type, PsiType:String, PsiType:Modifier[]])_395245217",
      "target": "MethodSignatureBackedByPsiMethod: builder([PsiType:TypeName, PsiType:String, PsiType:Modifier[]])_-1568573460",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:Type, PsiType:String, PsiType:Modifier[]])_395245217",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type])_-1957945740",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1998527404",
      "target": "MethodSignatureBackedByPsiMethod: StringBuilder([])_-566709873",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1998527404",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_88657905",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1998527404",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:String, PsiType:Object[]])_1129542955",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1998527404",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_1110148212",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1998527404",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_200596616",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:ClassName])_393051392",
      "target": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_-1849510340",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:ClassName])_393051392",
      "target": "MethodSignatureBackedByPsiMethod: build([])_1500416593",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:ClassName])_393051392",
      "target": "MethodSignatureBackedByPsiMethod: builder([PsiType:ClassName])_5991458",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_554832727",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_495227287",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_554832727",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_723904521",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_554832727",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-625041748",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_554832727",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_2119009408",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_554832727",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_1637236185",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_554832727",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-205072523",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_554832727",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_2120287162",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_554832727",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_955459123",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_554832727",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_1559934025",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_554832727",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-2091993342",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_554832727",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_486645979",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_554832727",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-1868781795",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_554832727",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-401530214",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_554832727",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-149344289",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_554832727",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-650992057",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_554832727",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_1376240715",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_554832727",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-750977210",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_554832727",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-1094666133",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_554832727",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-2036860095",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_554832727",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1490044434",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_554832727",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-846969626",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_554832727",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2143596804",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_554832727",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1096885364",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:ClassName])_180419039",
      "target": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_402932340",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:ClassName])_180419039",
      "target": "MethodSignatureBackedByPsiMethod: build([])_-1417310524",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:ClassName])_180419039",
      "target": "MethodSignatureBackedByPsiMethod: builder([PsiType:ClassName])_482450651",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1174137203",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1611487262",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1174137203",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1781554745",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1174137203",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_668658350",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1174137203",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1428765293",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1174137203",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_322744083",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1174137203",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-800536168",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1174137203",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_-235441140",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1174137203",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_845637227",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1174137203",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_1116516068",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1174137203",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-1113419316",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1174137203",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_-623178700",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1174137203",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-228947408",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1174137203",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1530029864",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1174137203",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-1213863928",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1174137203",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_953730045",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1174137203",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-883452617",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1174137203",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-1857997127",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1174137203",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_1402455378",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1174137203",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_442616466",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1174137203",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_909143457",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1174137203",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_1638602699",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1174137203",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2099881480",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1174137203",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1936722552",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:TypeName, PsiType:String, PsiType:Modifier[]])_-1568573460",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1919982624",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:TypeName, PsiType:String, PsiType:Modifier[]])_-1568573460",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-504157959",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:TypeName, PsiType:String, PsiType:Modifier[]])_-1568573460",
      "target": "MethodSignatureBackedByPsiMethod: isValidParameterName([PsiType:String])_-1748855888",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:TypeName, PsiType:String, PsiType:Modifier[]])_-1568573460",
      "target": "MethodSignatureBackedByPsiMethod: addModifiers([PsiType:Modifier[]])_1648899633",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:TypeName, PsiType:String, PsiType:Modifier[]])_-1568573460",
      "target": "MethodSignatureBackedByPsiMethod: Builder([PsiType:TypeName, PsiType:String])_-830693510",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type])_-1957945740",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1700600913",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type])_-1957945740",
      "target": "MethodSignatureBackedByPsiMethod: LinkedHashMap([])_205087232",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_88657905",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_1837010994",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_88657905",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-1303964660",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_88657905",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_1921668018",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:String, PsiType:Object[]])_1129542955",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock])_-315466529",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:String, PsiType:Object[]])_1129542955",
      "target": "MethodSignatureBackedByPsiMethod: of([PsiType:String, PsiType:Object[]])_-1297455790",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_1500416593",
      "target": "MethodSignatureBackedByPsiMethod: keySet([])_-761707886",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_1500416593",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-391953724",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_1500416593",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1068519012",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_1500416593",
      "target": "MethodSignatureBackedByPsiMethod: isName([PsiType:CharSequence])_-1877792107",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_1500416593",
      "target": "MethodSignatureBackedByPsiMethod: AnnotationSpec([PsiType:Builder])_-1774040347",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:ClassName])_5991458",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_341867559",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:ClassName])_5991458",
      "target": "MethodSignatureBackedByPsiMethod: Builder([PsiType:TypeName])_-561677825",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_495227287",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_1015732873",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_495227287",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-423620220",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_723904521",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-495264274",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_723904521",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1220338093",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_2119009408",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_346863838",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_2119009408",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_471825814",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-205072523",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1770885454",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-205072523",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_985251280",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1490044434",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_1879849788",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1490044434",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_1653871407",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-846969626",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1897148014",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2143596804",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1808759543",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2143596804",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1037489327",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2143596804",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-612864558",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2143596804",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-342380974",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2143596804",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_1583121722",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2143596804",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1967434200",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2143596804",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_1719492406",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2143596804",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_530988259",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2143596804",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_349277857",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2143596804",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-1892066111",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2143596804",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_-538593715",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2143596804",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-164565743",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2143596804",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1601984453",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2143596804",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_1503885789",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2143596804",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-2113342847",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2143596804",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1850018549",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2143596804",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-6037832",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2143596804",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_1876185368",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2143596804",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1261922112",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2143596804",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-68351842",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2143596804",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_2097027105",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2143596804",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-534308035",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2143596804",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-507604038",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_-1417310524",
      "target": "MethodSignatureBackedByPsiMethod: keySet([])_49860518",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_-1417310524",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1872390485",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_-1417310524",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-312228907",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_-1417310524",
      "target": "MethodSignatureBackedByPsiMethod: isName([PsiType:CharSequence])_-2039172375",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_-1417310524",
      "target": "MethodSignatureBackedByPsiMethod: AnnotationSpec([PsiType:Builder])_504942528",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:ClassName])_482450651",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-466107232",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:ClassName])_482450651",
      "target": "MethodSignatureBackedByPsiMethod: Builder([PsiType:TypeName])_-103363583",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1611487262",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-1759590447",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1611487262",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-390546108",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1781554745",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-164981808",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1781554745",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1987836279",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1428765293",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-847992311",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1428765293",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1675794574",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-800536168",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-1712142409",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-800536168",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-624918220",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_909143457",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_1908070009",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_909143457",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_958575594",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_1638602699",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-704496162",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2099881480",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1282486105",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2099881480",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-920516508",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2099881480",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-233218719",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2099881480",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_372758657",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2099881480",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-2031015499",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2099881480",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_211345064",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2099881480",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_-281712239",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2099881480",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_1641082737",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2099881480",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_695965567",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2099881480",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-1665396412",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2099881480",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_161057393",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2099881480",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-326735044",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2099881480",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-148728646",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2099881480",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_659946267",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2099881480",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1360715430",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2099881480",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-323096950",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2099881480",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_354265545",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2099881480",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_1118206967",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2099881480",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-1835285191",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2099881480",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1403407927",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2099881480",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-1513117624",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2099881480",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_515405520",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2099881480",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_127121545",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1919982624",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-986188532",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1919982624",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1047723752",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-504157959",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1436184652",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-504157959",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1984259202",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: isValidParameterName([PsiType:String])_-1748855888",
      "target": "MethodSignatureBackedByPsiMethod: endsWith([PsiType:String])_1911856",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: isValidParameterName([PsiType:String])_-1748855888",
      "target": "MethodSignatureBackedByPsiMethod: isIdentifier([PsiType:CharSequence])_-1389828164",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: isValidParameterName([PsiType:String])_-1748855888",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_1554256265",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: isValidParameterName([PsiType:String])_-1748855888",
      "target": "MethodSignatureBackedByPsiMethod: length([])_1686334478",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: isValidParameterName([PsiType:String])_-1748855888",
      "target": "MethodSignatureBackedByPsiMethod: length([])_1523730752",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: isValidParameterName([PsiType:String])_-1748855888",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-136259869",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: isValidParameterName([PsiType:String])_-1748855888",
      "target": "MethodSignatureBackedByPsiMethod: isName([PsiType:CharSequence])_1800049434",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addModifiers([PsiType:Modifier[]])_1648899633",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eaddAll([PsiType:Collection\u003c? super T\u003e, PsiType:T[]])_1475842507",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1700600913",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_-218969830",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1700600913",
      "target": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_1940081221",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1700600913",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-475900848",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1700600913",
      "target": "MethodSignatureBackedByPsiMethod: getComponentType([])_770127871",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1700600913",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_2088527442",
      "sourceAnchor": 13,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1700600913",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1831322033",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1700600913",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-171171142",
      "sourceAnchor": 19,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1700600913",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_1152084936",
      "sourceAnchor": 22,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1700600913",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_804034133",
      "sourceAnchor": 25,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1700600913",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_572219751",
      "sourceAnchor": 28,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_1837010994",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Map\u003cString, ClassName\u003e, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-1368328722",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_1837010994",
      "target": "MethodSignatureBackedByPsiMethod: \u003cK, V\u003eemptyMap([])_-507383913",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock])_-315466529",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: of([PsiType:String, PsiType:Object[]])_-1297455790",
      "target": "MethodSignatureBackedByPsiMethod: build([])_-1006189662",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: of([PsiType:String, PsiType:Object[]])_-1297455790",
      "target": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_962012040",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: of([PsiType:String, PsiType:Object[]])_-1297455790",
      "target": "MethodSignatureBackedByPsiMethod: Builder([])_62912735",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-391953724",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-6553260",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-391953724",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1010380935",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1068519012",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_2018004850",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1068519012",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1362717432",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: AnnotationSpec([PsiType:Builder])_-1774040347",
      "target": "MethodSignatureBackedByPsiMethod: \u003cK, V\u003eimmutableMultimap([PsiType:Map\u003cK, List\u003cV\u003e\u003e])_1218630451",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_341867559",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_616278247",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_341867559",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1143970917",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_1879849788",
      "target": "MethodSignatureBackedByPsiMethod: TypeName([PsiType:List\u003cAnnotationSpec\u003e])_-140252759",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_1879849788",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003erequireNonNull([PsiType:T, PsiType:String])_-1021794387",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_1879849788",
      "target": "MethodSignatureBackedByPsiMethod: isEmpty([])_-43119064",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1897148014",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-1496588112",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1897148014",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_1288422390",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1808759543",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_1838935631",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1808759543",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1989981766",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1037489327",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-20323528",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1037489327",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_537209719",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-342380974",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-1377781863",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-342380974",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1096252174",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1967434200",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_2060903615",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1967434200",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_2001857531",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-68351842",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-836261407",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-68351842",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_-814766185",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_2097027105",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1518074216",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-534308035",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1703916853",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-534308035",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1976246153",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-534308035",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_756346796",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-534308035",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1637283450",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-534308035",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_195451681",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-534308035",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_515053833",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-534308035",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_506592841",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-534308035",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_1565390948",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-534308035",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-242637350",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-534308035",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1708249929",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-534308035",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_1321735421",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-534308035",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1000785152",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-534308035",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1284695957",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-534308035",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_397625036",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-534308035",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1881972702",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-534308035",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_1237028379",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-534308035",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-1505071343",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-534308035",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_522801973",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-534308035",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-1502884640",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-534308035",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1273309131",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-534308035",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-1818522036",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-534308035",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1502531218",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-534308035",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1886176362",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1872390485",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_1769507204",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1872390485",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1578401907",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-312228907",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-310585851",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-312228907",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_147347238",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: AnnotationSpec([PsiType:Builder])_504942528",
      "target": "MethodSignatureBackedByPsiMethod: \u003cK, V\u003eimmutableMultimap([PsiType:Map\u003cK, List\u003cV\u003e\u003e])_1303536959",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-466107232",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-1355938515",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-466107232",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1844577446",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_1908070009",
      "target": "MethodSignatureBackedByPsiMethod: TypeName([PsiType:List\u003cAnnotationSpec\u003e])_-352570088",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_1908070009",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003erequireNonNull([PsiType:T, PsiType:String])_311064344",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_1908070009",
      "target": "MethodSignatureBackedByPsiMethod: isEmpty([])_-1436026463",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-704496162",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_679195815",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-704496162",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_1890714098",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1282486105",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-1600244983",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1282486105",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1943933460",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-920516508",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-1823494471",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-920516508",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_779279013",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_372758657",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1447644499",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_372758657",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-2034123948",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_211345064",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-968430673",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_211345064",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_2073370683",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1403407927",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_1603243715",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1403407927",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_813628504",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-1513117624",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_361778272",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_515405520",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_532388835",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_515405520",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1780033846",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_515405520",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_997302496",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_515405520",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1090284496",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_515405520",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-2045095859",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_515405520",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_520179808",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_515405520",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_-1132916298",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_515405520",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_-1791889519",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_515405520",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1255764936",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_515405520",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1106189000",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_515405520",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_-1431464140",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_515405520",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-684983705",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_515405520",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_362615368",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_515405520",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-2048069866",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_515405520",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1108019393",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_515405520",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1000692438",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_515405520",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1461873180",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_515405520",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_83034512",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_515405520",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-277971341",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_515405520",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1691853296",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_515405520",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_1483648671",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_515405520",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2091014686",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_515405520",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-654710625",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_1940081221",
      "target": "MethodSignatureBackedByPsiMethod: ArrayTypeName([PsiType:TypeName])_-811635350",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-475900848",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_1446473118",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-475900848",
      "target": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_-53446371",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-475900848",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-44049293",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-475900848",
      "target": "MethodSignatureBackedByPsiMethod: getComponentType([])_1692512910",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-475900848",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_203386011",
      "sourceAnchor": 13,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-475900848",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1620289537",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-475900848",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2015760776",
      "sourceAnchor": 19,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-475900848",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-561920906",
      "sourceAnchor": 22,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-475900848",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_1058891488",
      "sourceAnchor": 25,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-475900848",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1619580287",
      "sourceAnchor": 28,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_2088527442",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1797480255",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_2088527442",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_84562567",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_2088527442",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_105388246",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_2088527442",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_195650936",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_2088527442",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-2061825827",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_2088527442",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-706364714",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_2088527442",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_1460087959",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_2088527442",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_-472371253",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_2088527442",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-812503146",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_2088527442",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-1730240826",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_2088527442",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_-242361408",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_2088527442",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-1024663666",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_2088527442",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-395630121",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_2088527442",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-855466507",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_2088527442",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-209888628",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_2088527442",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_1149207194",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_2088527442",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-974777495",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_2088527442",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_574315352",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_2088527442",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-1915068386",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_2088527442",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1566510412",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_2088527442",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_522780644",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_2088527442",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1938829476",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_2088527442",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1302175715",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1831322033",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_654694026",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1831322033",
      "target": "MethodSignatureBackedByPsiMethod: getRawType([])_2146721889",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1831322033",
      "target": "MethodSignatureBackedByPsiMethod: getOwnerType([])_407188463",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1831322033",
      "target": "MethodSignatureBackedByPsiMethod: isStatic([PsiType:int])_-402503291",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1831322033",
      "target": "MethodSignatureBackedByPsiMethod: getModifiers([])_-922005500",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1831322033",
      "target": "MethodSignatureBackedByPsiMethod: getRawType([])_-1337225101",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1831322033",
      "target": "MethodSignatureBackedByPsiMethod: getOwnerType([])_-30248041",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1831322033",
      "target": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-805708100",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1831322033",
      "target": "MethodSignatureBackedByPsiMethod: getActualTypeArguments([])_1958903484",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1831322033",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String, PsiType:List\u003cTypeName\u003e])_-924533162",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1831322033",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_267947106",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1831322033",
      "target": "MethodSignatureBackedByPsiMethod: simpleName([])_-1974207773",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1831322033",
      "target": "MethodSignatureBackedByPsiMethod: ParameterizedTypeName([PsiType:ParameterizedTypeName, PsiType:ClassName, PsiType:List\u003cTypeName\u003e])_-64423993",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-171171142",
      "target": "MethodSignatureBackedByPsiMethod: WildcardTypeName([PsiType:List\u003cTypeName\u003e, PsiType:List\u003cTypeName\u003e])_716350057",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-171171142",
      "target": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_208010726",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-171171142",
      "target": "MethodSignatureBackedByPsiMethod: getUpperBounds([])_-99788689",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-171171142",
      "target": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_356672852",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-171171142",
      "target": "MethodSignatureBackedByPsiMethod: getLowerBounds([])_2114828761",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_1152084936",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Object])_1806885163",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_1152084936",
      "target": "MethodSignatureBackedByPsiMethod: ArrayList([])_-1664570121",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_1152084936",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eunmodifiableList([PsiType:List\u003c? extends T\u003e])_-2110203923",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_1152084936",
      "target": "MethodSignatureBackedByPsiMethod: TypeVariableName([PsiType:String, PsiType:List\u003cTypeName\u003e])_-1272317794",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_1152084936",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1634657678",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_1152084936",
      "target": "MethodSignatureBackedByPsiMethod: put([PsiType:K, PsiType:V])_143142479",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_1152084936",
      "target": "MethodSignatureBackedByPsiMethod: getBounds([])_1297770493",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_1152084936",
      "target": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_-824105301",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_1152084936",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1051215897",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_1152084936",
      "target": "MethodSignatureBackedByPsiMethod: remove([PsiType:Object])_1221711060",
      "sourceAnchor": 11,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_804034133",
      "target": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_43051921",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_804034133",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1856592993",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_804034133",
      "target": "MethodSignatureBackedByPsiMethod: getGenericComponentType([])_940324846",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Map\u003cString, ClassName\u003e, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-1368328722",
      "target": "MethodSignatureBackedByPsiMethod: LineWrapper([PsiType:Appendable, PsiType:String, PsiType:int])_-182128887",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Map\u003cString, ClassName\u003e, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-1368328722",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1182319714",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Map\u003cString, ClassName\u003e, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-1368328722",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_135418436",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Map\u003cString, ClassName\u003e, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-1368328722",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_955457498",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Map\u003cString, ClassName\u003e, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-1368328722",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_2046614114",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Map\u003cString, ClassName\u003e, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-1368328722",
      "target": "MethodSignatureBackedByPsiMethod: LinkedHashSet([])_-1710749165",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Map\u003cString, ClassName\u003e, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-1368328722",
      "target": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_1352366064",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Map\u003cString, ClassName\u003e, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-1368328722",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_1861354058",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Map\u003cString, ClassName\u003e, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-1368328722",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_1158018400",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: listIterator([])_1091015862",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: hasNext([])_1231029837",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: next([])_-1074019735",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: emitLiteral([PsiType:Object])_1105665757",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:int])_-1514951788",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_473268481",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:int])_-900994484",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:int])_-665626968",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_-1124967379",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: stringLiteralWithDoubleQuotes([PsiType:String, PsiType:String])_1219255078",
      "sourceAnchor": 19,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:int])_-1885961315",
      "sourceAnchor": 24,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: hasNext([])_-1153674412",
      "sourceAnchor": 26,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: startsWith([PsiType:String])_-1461076611",
      "sourceAnchor": 27,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:int])_-651578564",
      "sourceAnchor": 27,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: nextIndex([])_214587006",
      "sourceAnchor": 27,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: contains([PsiType:Object])_-1120394931",
      "sourceAnchor": 29,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: checkState([PsiType:boolean, PsiType:String, PsiType:Object[]])_1939907457",
      "sourceAnchor": 30,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_810310241",
      "sourceAnchor": 36,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_779989671",
      "sourceAnchor": 40,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: indent([])_1152982827",
      "sourceAnchor": 44,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: unindent([])_1291355896",
      "sourceAnchor": 48,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: checkState([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1824613697",
      "sourceAnchor": 52,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: checkState([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1191434544",
      "sourceAnchor": 57,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: unindent([PsiType:int])_886631242",
      "sourceAnchor": 59,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: wrappingSpace([PsiType:int])_1459070318",
      "sourceAnchor": 65,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: zeroWidthSpace([PsiType:int])_-1179029179",
      "sourceAnchor": 69,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: startsWith([PsiType:String])_-915551658",
      "sourceAnchor": 75,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: emitStaticImportMember([PsiType:String, PsiType:String])_1382815386",
      "sourceAnchor": 76,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeWriter])_356949365",
      "sourceAnchor": 82,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: emitAndIndent([PsiType:String])_664088217",
      "sourceAnchor": 85,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: lastChar([])_-503907048",
      "sourceAnchor": 89,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-908708655",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:String])_-1843547982",
      "sourceAnchor": 90,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_-1006189662",
      "target": "MethodSignatureBackedByPsiMethod: CodeBlock([PsiType:Builder])_-382399691",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_962012040",
      "target": "MethodSignatureBackedByPsiMethod: length([])_-519130292",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_962012040",
      "target": "MethodSignatureBackedByPsiMethod: charAt([PsiType:int])_2000273826",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_962012040",
      "target": "MethodSignatureBackedByPsiMethod: indexOf([PsiType:int, PsiType:int])_-525401813",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_962012040",
      "target": "MethodSignatureBackedByPsiMethod: length([])_1187834151",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_962012040",
      "target": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_-1717060785",
      "sourceAnchor": 11,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_962012040",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-1869605491",
      "sourceAnchor": 11,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_962012040",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-77004245",
      "sourceAnchor": 22,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_962012040",
      "target": "MethodSignatureBackedByPsiMethod: length([])_699709725",
      "sourceAnchor": 22,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_962012040",
      "target": "MethodSignatureBackedByPsiMethod: charAt([PsiType:int])_-251925339",
      "sourceAnchor": 23,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_962012040",
      "target": "MethodSignatureBackedByPsiMethod: isNoArgPlaceholder([PsiType:char])_-1075254235",
      "sourceAnchor": 28,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_962012040",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-913149888",
      "sourceAnchor": 29,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_962012040",
      "target": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_-1373849211",
      "sourceAnchor": 31,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_962012040",
      "target": "MethodSignatureBackedByPsiMethod: parseInt([PsiType:String])_-1068786343",
      "sourceAnchor": 38,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_962012040",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-391663796",
      "sourceAnchor": 38,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_962012040",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1637253998",
      "sourceAnchor": 49,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_962012040",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_49523437",
      "sourceAnchor": 51,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_962012040",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_840467634",
      "sourceAnchor": 52,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_962012040",
      "target": "MethodSignatureBackedByPsiMethod: addArgument([PsiType:String, PsiType:char, PsiType:Object])_-2004850019",
      "sourceAnchor": 54,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_962012040",
      "target": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_-625629814",
      "sourceAnchor": 56,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_962012040",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1667492297",
      "sourceAnchor": 60,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_962012040",
      "target": "MethodSignatureBackedByPsiMethod: ArrayList([])_440388518",
      "sourceAnchor": 64,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_962012040",
      "target": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_1749615828",
      "sourceAnchor": 67,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_962012040",
      "target": "MethodSignatureBackedByPsiMethod: size([])_802863561",
      "sourceAnchor": 70,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_962012040",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1637752716",
      "sourceAnchor": 71,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_962012040",
      "target": "MethodSignatureBackedByPsiMethod: isEmpty([])_1002451083",
      "sourceAnchor": 71,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_962012040",
      "target": "MethodSignatureBackedByPsiMethod: join([PsiType:CharSequence, PsiType:Iterable\u003c? extends CharSequence\u003e])_1465527148",
      "sourceAnchor": 71,
      "targetAnchor": 0
    }
  ]
}
