{
  "nodes": [
    {
      "signature": "    public void modifyAnnotations_3() throws Exception {",
      "className": "com.squareup.javapoet.ParameterSpecTest",
      "id": "root",
      "lines": [
        {
          "code": "        Object object \u003d new Object();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ParameterSpec.Builder builder \u003d ParameterSpec.builder(int.class, \"foo\").addAnnotation(Override.class).addAnnotation(SuppressWarnings.class);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        AnnotationSpec annotationSpec \u003d builder.annotations.remove(1);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        boolean booleanValue \u003d annotationSpec.equals(object);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        Truth.assertThat(booleanValue).isFalse();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": true,
      "nodeLevel": 0
    },
    {
      "signature": "Object",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: Object([])_1244393370",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 1
    },
    {
      "signature": "    public Builder addAnnotation(Class\u003c?\u003e annotation) {",
      "className": "com.squareup.javapoet.ParameterSpec.Builder",
      "id": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:Class\u003c?\u003e])_1688850359",
      "lines": [
        {
          "code": "      return addAnnotation(ClassName.get(annotation));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 1
    },
    {
      "signature": "    public Builder addAnnotation(Class\u003c?\u003e annotation) {",
      "className": "com.squareup.javapoet.ParameterSpec.Builder",
      "id": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:Class\u003c?\u003e])_-1207780032",
      "lines": [
        {
          "code": "      return addAnnotation(ClassName.get(annotation));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 1
    },
    {
      "signature": "  public static Builder builder(Type type, String name, Modifier... modifiers) {",
      "className": "com.squareup.javapoet.ParameterSpec",
      "id": "MethodSignatureBackedByPsiMethod: builder([PsiType:Type, PsiType:String, PsiType:Modifier[]])_1682631724",
      "lines": [
        {
          "code": "    return builder(TypeName.get(type), name, modifiers);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 1
    },
    {
      "signature": "remove",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: remove([PsiType:int])_1840305554",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 1
    },
    {
      "signature": "  @Override public boolean equals(Object o) {",
      "className": "com.squareup.javapoet.AnnotationSpec",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-878279766",
      "lines": [
        {
          "code": "    if (this \u003d\u003d o) return true;",
          "callsMethod": false,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    if (o \u003d\u003d null) return false;",
          "callsMethod": false,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    if (getClass() !\u003d o.getClass()) return false;",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    return toString().equals(o.toString());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": true,
      "nodeLevel": 1
    },
    {
      "signature": "isFalse",
      "className": "com.google.common.truth.BooleanSubject",
      "id": "MethodSignatureBackedByPsiMethod: isFalse([])_-1261418089",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 1
    },
    {
      "signature": "assertThat",
      "className": "com.google.common.truth.Truth",
      "id": "MethodSignatureBackedByPsiMethod: assertThat([PsiType:Boolean])_1073247655",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 1
    },
    {
      "signature": "    public Builder addAnnotation(ClassName annotation) {",
      "className": "com.squareup.javapoet.ParameterSpec.Builder",
      "id": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:ClassName])_1000527824",
      "lines": [
        {
          "code": "      this.annotations.add(AnnotationSpec.builder(annotation).build());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return this;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-691554390",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "    public Builder addAnnotation(ClassName annotation) {",
      "className": "com.squareup.javapoet.ParameterSpec.Builder",
      "id": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:ClassName])_-671839231",
      "lines": [
        {
          "code": "      this.annotations.add(AnnotationSpec.builder(annotation).build());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return this;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1295221771",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  public static Builder builder(TypeName type, String name, Modifier... modifiers) {",
      "className": "com.squareup.javapoet.ParameterSpec",
      "id": "MethodSignatureBackedByPsiMethod: builder([PsiType:TypeName, PsiType:String, PsiType:Modifier[]])_-2042012362",
      "lines": [
        {
          "code": "    checkNotNull(type, \"type \u003d\u003d null\");",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    checkArgument(isValidParameterName(name), \"not a valid name: %s\", name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return new Builder(type, name)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        .addModifiers(modifiers);",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  public static TypeName get(Type type) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type])_515557760",
      "lines": [
        {
          "code": "    return get(type, new LinkedHashMap\u003c\u003e());",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_-669321259",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "getClass",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: getClass([])_-1030695070",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "equals",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1361995775",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  @Override public String toString() {",
      "className": "com.squareup.javapoet.AnnotationSpec",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_-14787694",
      "lines": [
        {
          "code": "    StringBuilder out \u003d new StringBuilder();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    try {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      CodeWriter codeWriter \u003d new CodeWriter(out);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      codeWriter.emit(\"$L\", this);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return out.toString();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } catch (IOException e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "toString",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_-1971775342",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "add",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_1438687833",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "    public AnnotationSpec build() {",
      "className": "com.squareup.javapoet.AnnotationSpec.Builder",
      "id": "MethodSignatureBackedByPsiMethod: build([])_1578513778",
      "lines": [
        {
          "code": "      for (String name : members.keySet()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        checkNotNull(name, \"name \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        checkArgument(SourceVersion.isName(name), \"not a valid name: %s\", name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new AnnotationSpec(this);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  public static Builder builder(ClassName type) {",
      "className": "com.squareup.javapoet.AnnotationSpec",
      "id": "MethodSignatureBackedByPsiMethod: builder([PsiType:ClassName])_-830114368",
      "lines": [
        {
          "code": "    checkNotNull(type, \"type \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return new Builder(type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1491991517",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1281406668",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_1346364336",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-263495824",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_407383395",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-299983870",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_1800262124",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_1761773287",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-346334494",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-2108948462",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_-1478259002",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-1340470822",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1928804887",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_336280741",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1582569234",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_1325052740",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1818207675",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_308600548",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-1216956914",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1620411002",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_909945629",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1371695379",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1697752039",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "add",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_1902841724",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "    public AnnotationSpec build() {",
      "className": "com.squareup.javapoet.AnnotationSpec.Builder",
      "id": "MethodSignatureBackedByPsiMethod: build([])_839069721",
      "lines": [
        {
          "code": "      for (String name : members.keySet()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        checkNotNull(name, \"name \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        checkArgument(SourceVersion.isName(name), \"not a valid name: %s\", name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new AnnotationSpec(this);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  public static Builder builder(ClassName type) {",
      "className": "com.squareup.javapoet.AnnotationSpec",
      "id": "MethodSignatureBackedByPsiMethod: builder([PsiType:ClassName])_-396246777",
      "lines": [
        {
          "code": "    checkNotNull(type, \"type \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return new Builder(type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1094350778",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1756651661",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_1951604734",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1880321579",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1249157144",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1395981052",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_2061949866",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_-994601780",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_36191196",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1484228964",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_-1246454262",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1257829796",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1262353960",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_564828330",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1457314590",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1685830154",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-925659922",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_630611686",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-606494263",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1618103313",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-1577204607",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1620901619",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_347027319",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1394771904",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_2021556299",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  private static boolean isValidParameterName(String name) {",
      "className": "com.squareup.javapoet.ParameterSpec",
      "id": "MethodSignatureBackedByPsiMethod: isValidParameterName([PsiType:String])_655506956",
      "lines": [
        {
          "code": "    // Allow \"this\" for explicit receiver parameters",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    // See https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.4.1.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (name.endsWith(\".this\")) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return SourceVersion.isIdentifier(name.substring(0, name.length() - \".this\".length()));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return name.equals(\"this\") || SourceVersion.isName(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "    public Builder addModifiers(Modifier... modifiers) {",
      "className": "com.squareup.javapoet.ParameterSpec.Builder",
      "id": "MethodSignatureBackedByPsiMethod: addModifiers([PsiType:Modifier[]])_2059306819",
      "lines": [
        {
          "code": "      Collections.addAll(this.modifiers, modifiers);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return this;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "    private Builder(TypeName type, String name) {",
      "className": "com.squareup.javapoet.ParameterSpec.Builder",
      "id": "MethodSignatureBackedByPsiMethod: Builder([PsiType:TypeName, PsiType:String])_-1393053864",
      "lines": [
        {
          "code": "      this.type \u003d type;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      this.name \u003d name;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_902876656",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "LinkedHashMap",
      "className": "java.util.LinkedHashMap",
      "id": "MethodSignatureBackedByPsiMethod: LinkedHashMap([])_1389595936",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "StringBuilder",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: StringBuilder([])_-1494871322",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  CodeWriter(Appendable out) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_21762517",
      "lines": [
        {
          "code": "    this(out, \"  \", Collections.emptySet(), Collections.emptySet());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  public CodeWriter emit(String format, Object... args) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:String, PsiType:Object[]])_-1239241037",
      "lines": [
        {
          "code": "    return emit(CodeBlock.of(format, args));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "toString",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_-414495388",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_1531344516",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "keySet",
      "className": "java.util.Map",
      "id": "MethodSignatureBackedByPsiMethod: keySet([])_-3915721",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1965094120",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1885657771",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isName",
      "className": "javax.lang.model.SourceVersion",
      "id": "MethodSignatureBackedByPsiMethod: isName([PsiType:CharSequence])_1591459565",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private AnnotationSpec(Builder builder) {",
      "className": "com.squareup.javapoet.AnnotationSpec",
      "id": "MethodSignatureBackedByPsiMethod: AnnotationSpec([PsiType:Builder])_-1254189610",
      "lines": [
        {
          "code": "    this.type \u003d builder.type;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.members \u003d Util.immutableMultimap(builder.members);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_863026379",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "    private Builder(TypeName type) {",
      "className": "com.squareup.javapoet.AnnotationSpec.Builder",
      "id": "MethodSignatureBackedByPsiMethod: Builder([PsiType:TypeName])_2104531856",
      "lines": [
        {
          "code": "      this.type \u003d type;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_1767858207",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_300857109",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-233712960",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_2110545098",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1651806223",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1299992280",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1242067866",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1603957308",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName,",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-1090975320",
      "lines": [
        {
          "code": "      List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.packageName \u003d Objects.requireNonNull(packageName, \"packageName \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.enclosingClassName \u003d enclosingClassName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.simpleName \u003d simpleName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.canonicalName \u003d enclosingClassName !\u003d null",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (enclosingClassName.canonicalName + \u0027.\u0027 + simpleName)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : (packageName.isEmpty() ? simpleName : packageName + \u0027.\u0027 + simpleName);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "emptyList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_1900785459",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1592066640",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_894055020",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_208698387",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-974960285",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-546608882",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_242654795",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-853464519",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_-937676543",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_218869336",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1185198891",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_2078047877",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_721100404",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1483487349",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_913795841",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-1126787346",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-688741209",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_650797834",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-182852068",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-2053370572",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1445367291",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1189328124",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_1210323930",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_23428969",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1783862399",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "keySet",
      "className": "java.util.Map",
      "id": "MethodSignatureBackedByPsiMethod: keySet([])_388560059",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1832499282",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1929601870",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isName",
      "className": "javax.lang.model.SourceVersion",
      "id": "MethodSignatureBackedByPsiMethod: isName([PsiType:CharSequence])_-746722978",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private AnnotationSpec(Builder builder) {",
      "className": "com.squareup.javapoet.AnnotationSpec",
      "id": "MethodSignatureBackedByPsiMethod: AnnotationSpec([PsiType:Builder])_-327536556",
      "lines": [
        {
          "code": "    this.type \u003d builder.type;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.members \u003d Util.immutableMultimap(builder.members);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-220206757",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "    private Builder(TypeName type) {",
      "className": "com.squareup.javapoet.AnnotationSpec.Builder",
      "id": "MethodSignatureBackedByPsiMethod: Builder([PsiType:TypeName])_-1101088178",
      "lines": [
        {
          "code": "      this.type \u003d type;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_2042380184",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1252138906",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-416161591",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1266338601",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_261901813",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1788705057",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_590048028",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_326902216",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName,",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-386335691",
      "lines": [
        {
          "code": "      List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.packageName \u003d Objects.requireNonNull(packageName, \"packageName \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.enclosingClassName \u003d enclosingClassName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.simpleName \u003d simpleName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.canonicalName \u003d enclosingClassName !\u003d null",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (enclosingClassName.canonicalName + \u0027.\u0027 + simpleName)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : (packageName.isEmpty() ? simpleName : packageName + \u0027.\u0027 + simpleName);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "emptyList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_18168873",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1912165118",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_208934207",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1427525749",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-1199213432",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_7050828",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1727791101",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-671782324",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_-1183500347",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_941943488",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-526620217",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_925610723",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_90353424",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1172079660",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1467845551",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_141587976",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1291703006",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_1519460798",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_194383636",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-1285072847",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-2104617822",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-758556525",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_1304982660",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1539429816",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1925464265",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_28080525",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1097950988",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-782404195",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-406924216",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "endsWith",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: endsWith([PsiType:String])_-144474008",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isIdentifier",
      "className": "javax.lang.model.SourceVersion",
      "id": "MethodSignatureBackedByPsiMethod: isIdentifier([PsiType:CharSequence])_686391224",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-1711189219",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "length",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: length([])_1062244968",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "length",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: length([])_162619407",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "equals",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1738457766",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isName",
      "className": "javax.lang.model.SourceVersion",
      "id": "MethodSignatureBackedByPsiMethod: isName([PsiType:CharSequence])_1865155012",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "addAll",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eaddAll([PsiType:Collection\u003c? super T\u003e, PsiType:T[]])_-26532237",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_-1798094804",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public static ArrayTypeName of(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_689845386",
      "lines": [
        {
          "code": "    return new ArrayTypeName(componentType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-645468080",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getComponentType",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getComponentType([])_-1969750702",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1655603197",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static ParameterizedTypeName get(ParameterizedType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_839695342",
      "lines": [
        {
          "code": "    ClassName rawType \u003d ClassName.get((Class\u003c?\u003e) type.getRawType());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    ParameterizedType ownerType \u003d (type.getOwnerType() instanceof ParameterizedType)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        \u0026\u0026 !Modifier.isStatic(((Class\u003c?\u003e) type.getRawType()).getModifiers())",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (ParameterizedType) type.getOwnerType() : null;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    List\u003cTypeName\u003e typeArguments \u003d TypeName.list(type.getActualTypeArguments(), map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return (ownerType !\u003d null)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? get(ownerType, map).nestedClass(rawType.simpleName(), typeArguments)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : new ParameterizedTypeName(null, rawType, typeArguments);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static TypeName get(WildcardType wildcardName, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.WildcardTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1226953162",
      "lines": [
        {
          "code": "    return new WildcardTypeName(",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getUpperBounds(), map),",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getLowerBounds(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static TypeVariableName get(java.lang.reflect.TypeVariable\u003c?\u003e type,",
      "className": "com.squareup.javapoet.TypeVariableName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-135096969",
      "lines": [
        {
          "code": "      Map\u003cType, TypeVariableName\u003e map) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    TypeVariableName result \u003d map.get(type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e bounds \u003d new ArrayList\u003c\u003e();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e visibleBounds \u003d Collections.unmodifiableList(bounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result \u003d new TypeVariableName(type.getName(), visibleBounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      map.put(type, result);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      for (Type bound : type.getBounds()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        bounds.add(TypeName.get(bound, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      bounds.remove(OBJECT);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static ArrayTypeName get(GenericArrayType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1604611474",
      "lines": [
        {
          "code": "    return ArrayTypeName.of(get(type.getGenericComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1342806203",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter(Appendable out, String indent, Set\u003cString\u003e staticImports, Set\u003cString\u003e alwaysQualify) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-198346791",
      "lines": [
        {
          "code": "    this(out, indent, Collections.emptyMap(), staticImports, alwaysQualify);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_1369270524",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-746977437",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public CodeWriter emit(CodeBlock codeBlock) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock])_-864325765",
      "lines": [
        {
          "code": "    return emit(codeBlock, false);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public static CodeBlock of(String format, Object... args) {",
      "className": "com.squareup.javapoet.CodeBlock",
      "id": "MethodSignatureBackedByPsiMethod: of([PsiType:String, PsiType:Object[]])_83186169",
      "lines": [
        {
          "code": "    return new Builder().add(format, args).build();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-963062260",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-89434540",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-603194096",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_151119977",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static \u003cK, V\u003e Map\u003cK, List\u003cV\u003e\u003e immutableMultimap(Map\u003cK, List\u003cV\u003e\u003e multimap) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cK, V\u003eimmutableMultimap([PsiType:Map\u003cK, List\u003cV\u003e\u003e])_-780818047",
      "lines": [
        {
          "code": "    LinkedHashMap\u003cK, List\u003cV\u003e\u003e result \u003d new LinkedHashMap\u003c\u003e();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    for (Map.Entry\u003cK, List\u003cV\u003e\u003e entry : multimap.entrySet()) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (entry.getValue().isEmpty()) continue;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result.put(entry.getKey(), immutableList(entry.getValue()));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return Collections.unmodifiableMap(result);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-464044513",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_768433144",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  TypeName(List\u003cAnnotationSpec\u003e annotations) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: TypeName([PsiType:List\u003cAnnotationSpec\u003e])_238330884",
      "lines": [
        {
          "code": "    this(null, annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "requireNonNull",
      "className": "java.util.Objects",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003erequireNonNull([PsiType:T, PsiType:String])_752037838",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isEmpty",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: isEmpty([])_-709505512",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName,",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-988292654",
      "lines": [
        {
          "code": "      List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.packageName \u003d Objects.requireNonNull(packageName, \"packageName \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.enclosingClassName \u003d enclosingClassName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.simpleName \u003d simpleName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.canonicalName \u003d enclosingClassName !\u003d null",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (enclosingClassName.canonicalName + \u0027.\u0027 + simpleName)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : (packageName.isEmpty() ? simpleName : packageName + \u0027.\u0027 + simpleName);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptyList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_1870441441",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-1154289633",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_927493221",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-768532192",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1137064507",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1688892862",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_346844553",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1737866061",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1191725529",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName,",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-492975176",
      "lines": [
        {
          "code": "      List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.packageName \u003d Objects.requireNonNull(packageName, \"packageName \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.enclosingClassName \u003d enclosingClassName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.simpleName \u003d simpleName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.canonicalName \u003d enclosingClassName !\u003d null",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (enclosingClassName.canonicalName + \u0027.\u0027 + simpleName)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : (packageName.isEmpty() ? simpleName : packageName + \u0027.\u0027 + simpleName);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptyList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_-1723395779",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-3526926",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-542368356",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-147616064",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_720631942",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-903266732",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-323229158",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1037941074",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_-2065929981",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_1752762929",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_638386526",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-1704948197",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_3076487",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-211215173",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1542694692",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-294435689",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1546370073",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-843603740",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-1200443181",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-1314104324",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1219975188",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1797502500",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-1448038231",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-165300138",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_453258347",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-1359237417",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-2017976265",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1549987315",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1826506933",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static \u003cK, V\u003e Map\u003cK, List\u003cV\u003e\u003e immutableMultimap(Map\u003cK, List\u003cV\u003e\u003e multimap) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cK, V\u003eimmutableMultimap([PsiType:Map\u003cK, List\u003cV\u003e\u003e])_-389144813",
      "lines": [
        {
          "code": "    LinkedHashMap\u003cK, List\u003cV\u003e\u003e result \u003d new LinkedHashMap\u003c\u003e();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    for (Map.Entry\u003cK, List\u003cV\u003e\u003e entry : multimap.entrySet()) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (entry.getValue().isEmpty()) continue;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result.put(entry.getKey(), immutableList(entry.getValue()));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return Collections.unmodifiableMap(result);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_501956112",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_751197952",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  TypeName(List\u003cAnnotationSpec\u003e annotations) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: TypeName([PsiType:List\u003cAnnotationSpec\u003e])_274783720",
      "lines": [
        {
          "code": "    this(null, annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "requireNonNull",
      "className": "java.util.Objects",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003erequireNonNull([PsiType:T, PsiType:String])_-414109159",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isEmpty",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: isEmpty([])_-1846832451",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName,",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-762835085",
      "lines": [
        {
          "code": "      List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.packageName \u003d Objects.requireNonNull(packageName, \"packageName \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.enclosingClassName \u003d enclosingClassName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.simpleName \u003d simpleName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.canonicalName \u003d enclosingClassName !\u003d null",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (enclosingClassName.canonicalName + \u0027.\u0027 + simpleName)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : (packageName.isEmpty() ? simpleName : packageName + \u0027.\u0027 + simpleName);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptyList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_77825118",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_13342786",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-381660941",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_99308332",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-388232439",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1126100860",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1543898375",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_798931542",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1601621267",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName,",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-354705330",
      "lines": [
        {
          "code": "      List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.packageName \u003d Objects.requireNonNull(packageName, \"packageName \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.enclosingClassName \u003d enclosingClassName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.simpleName \u003d simpleName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.canonicalName \u003d enclosingClassName !\u003d null",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (enclosingClassName.canonicalName + \u0027.\u0027 + simpleName)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : (packageName.isEmpty() ? simpleName : packageName + \u0027.\u0027 + simpleName);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptyList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_413484961",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1207705581",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_818181197",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-2092497127",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_1916102575",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1328349352",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_2006267458",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_63204767",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_873152413",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_1617457684",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-22917495",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-149579575",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_4434370",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-632783209",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1419490725",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-2064650588",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-400799715",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-767027407",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-439748252",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-760252244",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_2061800256",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-309366758",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_1328355293",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-591313331",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_914121867",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ArrayTypeName(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: ArrayTypeName([PsiType:TypeName])_-661287023",
      "lines": [
        {
          "code": "    this(componentType, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_991888858",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ArrayTypeName of(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_-1410141274",
      "lines": [
        {
          "code": "    return new ArrayTypeName(componentType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-504074339",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getComponentType",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getComponentType([])_-1719518138",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_997793760",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static ParameterizedTypeName get(ParameterizedType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1469228913",
      "lines": [
        {
          "code": "    ClassName rawType \u003d ClassName.get((Class\u003c?\u003e) type.getRawType());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    ParameterizedType ownerType \u003d (type.getOwnerType() instanceof ParameterizedType)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        \u0026\u0026 !Modifier.isStatic(((Class\u003c?\u003e) type.getRawType()).getModifiers())",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (ParameterizedType) type.getOwnerType() : null;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    List\u003cTypeName\u003e typeArguments \u003d TypeName.list(type.getActualTypeArguments(), map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return (ownerType !\u003d null)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? get(ownerType, map).nestedClass(rawType.simpleName(), typeArguments)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : new ParameterizedTypeName(null, rawType, typeArguments);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(WildcardType wildcardName, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.WildcardTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-348627192",
      "lines": [
        {
          "code": "    return new WildcardTypeName(",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getUpperBounds(), map),",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getLowerBounds(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeVariableName get(java.lang.reflect.TypeVariable\u003c?\u003e type,",
      "className": "com.squareup.javapoet.TypeVariableName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-715788804",
      "lines": [
        {
          "code": "      Map\u003cType, TypeVariableName\u003e map) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    TypeVariableName result \u003d map.get(type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e bounds \u003d new ArrayList\u003c\u003e();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e visibleBounds \u003d Collections.unmodifiableList(bounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result \u003d new TypeVariableName(type.getName(), visibleBounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      map.put(type, result);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      for (Type bound : type.getBounds()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        bounds.add(TypeName.get(bound, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      bounds.remove(OBJECT);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static ArrayTypeName get(GenericArrayType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2084467526",
      "lines": [
        {
          "code": "    return ArrayTypeName.of(get(type.getGenericComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_335324125",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1525778499",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-770857878",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-676424564",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_917006052",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-2125698332",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-755840926",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_1654641960",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_398611773",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1036357874",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1285913397",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_193324960",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1387969736",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_862754599",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_1316091988",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1059474203",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1904870924",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1490753742",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_879226170",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_2066917612",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1211208643",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-1317465844",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1001712521",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_747095520",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2136822026",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getRawType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getRawType([])_-470628407",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getOwnerType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getOwnerType([])_1194416499",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isStatic",
      "className": "java.lang.reflect.Modifier",
      "id": "MethodSignatureBackedByPsiMethod: isStatic([PsiType:int])_1398387927",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getModifiers",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getModifiers([])_-192406968",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getRawType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getRawType([])_-699910528",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getOwnerType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getOwnerType([])_119637083",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static List\u003cTypeName\u003e list(Type[] types, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_1314397845",
      "lines": [
        {
          "code": "    List\u003cTypeName\u003e result \u003d new ArrayList\u003c\u003e(types.length);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (Type type : types) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result.add(get(type, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getActualTypeArguments",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getActualTypeArguments([])_-1623863174",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public ParameterizedTypeName nestedClass(String name, List\u003cTypeName\u003e typeArguments) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String, PsiType:List\u003cTypeName\u003e])_1778173494",
      "lines": [
        {
          "code": "    checkNotNull(name, \"name \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return new ParameterizedTypeName(this, rawType.nestedClass(name), typeArguments,",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static ParameterizedTypeName get(ParameterizedType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1289569861",
      "lines": [
        {
          "code": "    ClassName rawType \u003d ClassName.get((Class\u003c?\u003e) type.getRawType());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    ParameterizedType ownerType \u003d (type.getOwnerType() instanceof ParameterizedType)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        \u0026\u0026 !Modifier.isStatic(((Class\u003c?\u003e) type.getRawType()).getModifiers())",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (ParameterizedType) type.getOwnerType() : null;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    List\u003cTypeName\u003e typeArguments \u003d TypeName.list(type.getActualTypeArguments(), map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return (ownerType !\u003d null)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? get(ownerType, map).nestedClass(rawType.simpleName(), typeArguments)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : new ParameterizedTypeName(null, rawType, typeArguments);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public String simpleName() {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: simpleName([])_-1288785191",
      "lines": [
        {
          "code": "    return simpleName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  ParameterizedTypeName(ParameterizedTypeName enclosingType, ClassName rawType,",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: ParameterizedTypeName([PsiType:ParameterizedTypeName, PsiType:ClassName, PsiType:List\u003cTypeName\u003e])_-1220748431",
      "lines": [
        {
          "code": "      List\u003cTypeName\u003e typeArguments) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this(enclosingType, rawType, typeArguments, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private WildcardTypeName(List\u003cTypeName\u003e upperBounds, List\u003cTypeName\u003e lowerBounds) {",
      "className": "com.squareup.javapoet.WildcardTypeName",
      "id": "MethodSignatureBackedByPsiMethod: WildcardTypeName([PsiType:List\u003cTypeName\u003e, PsiType:List\u003cTypeName\u003e])_-995067737",
      "lines": [
        {
          "code": "    this(upperBounds, lowerBounds, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static List\u003cTypeName\u003e list(Type[] types, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-1571386808",
      "lines": [
        {
          "code": "    List\u003cTypeName\u003e result \u003d new ArrayList\u003c\u003e(types.length);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (Type type : types) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result.add(get(type, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getUpperBounds",
      "className": "java.lang.reflect.WildcardType",
      "id": "MethodSignatureBackedByPsiMethod: getUpperBounds([])_343086767",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static List\u003cTypeName\u003e list(Type[] types, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-1243210118",
      "lines": [
        {
          "code": "    List\u003cTypeName\u003e result \u003d new ArrayList\u003c\u003e(types.length);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (Type type : types) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result.add(get(type, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getLowerBounds",
      "className": "java.lang.reflect.WildcardType",
      "id": "MethodSignatureBackedByPsiMethod: getLowerBounds([])_965079234",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "get",
      "className": "java.util.Map",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Object])_-1168336045",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "ArrayList",
      "className": "java.util.ArrayList",
      "id": "MethodSignatureBackedByPsiMethod: ArrayList([])_1951589378",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "unmodifiableList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eunmodifiableList([PsiType:List\u003c? extends T\u003e])_1935089735",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private TypeVariableName(String name, List\u003cTypeName\u003e bounds) {",
      "className": "com.squareup.javapoet.TypeVariableName",
      "id": "MethodSignatureBackedByPsiMethod: TypeVariableName([PsiType:String, PsiType:List\u003cTypeName\u003e])_100404824",
      "lines": [
        {
          "code": "    this(name, bounds, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.reflect.TypeVariable",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-70407567",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "put",
      "className": "java.util.Map",
      "id": "MethodSignatureBackedByPsiMethod: put([PsiType:K, PsiType:V])_761892469",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getBounds",
      "className": "java.lang.reflect.TypeVariable",
      "id": "MethodSignatureBackedByPsiMethod: getBounds([])_1084944695",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "add",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_202969359",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1492166494",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "remove",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: remove([PsiType:Object])_-1454423694",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ArrayTypeName of(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_280801754",
      "lines": [
        {
          "code": "    return new ArrayTypeName(componentType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1624213860",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getGenericComponentType",
      "className": "java.lang.reflect.GenericArrayType",
      "id": "MethodSignatureBackedByPsiMethod: getGenericComponentType([])_-1685256162",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter(Appendable out,",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Map\u003cString, ClassName\u003e, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-68220030",
      "lines": [
        {
          "code": "      String indent,",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      Map\u003cString, ClassName\u003e importedTypes,",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      Set\u003cString\u003e staticImports,",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      Set\u003cString\u003e alwaysQualify) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.out \u003d new LineWrapper(out, indent, 100);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.indent \u003d checkNotNull(indent, \"indent \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.importedTypes \u003d checkNotNull(importedTypes, \"importedTypes \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.staticImports \u003d checkNotNull(staticImports, \"staticImports \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.alwaysQualify \u003d checkNotNull(alwaysQualify, \"alwaysQualify \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.staticImportClassNames \u003d new LinkedHashSet\u003c\u003e();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (String signature : staticImports) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      staticImportClassNames.add(signature.substring(0, signature.lastIndexOf(\u0027.\u0027)));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptyMap",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cK, V\u003eemptyMap([])_-801800780",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public CodeWriter emit(CodeBlock codeBlock, boolean ensureTrailingNewline) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-412350415",
      "lines": [
        {
          "code": "    int a \u003d 0;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    ClassName deferredTypeName \u003d null; // used by \"import static\" logic",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    ListIterator\u003cString\u003e partIterator \u003d codeBlock.formatParts.listIterator();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (partIterator.hasNext()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String part \u003d partIterator.next();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      switch (part) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$L\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitLiteral(codeBlock.args.get(a++));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$N\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitAndIndent((String) codeBlock.args.get(a++));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$S\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          String string \u003d (String) codeBlock.args.get(a++);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          // Emit null as a literal null: no quotes.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitAndIndent(string !\u003d null",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "              ? stringLiteralWithDoubleQuotes(string, indent)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "              : \"null\");",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$T\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          TypeName typeName \u003d (TypeName) codeBlock.args.get(a++);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          // defer \"typeName.emit(this)\" if next format part will be handled by the default case",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (typeName instanceof ClassName \u0026\u0026 partIterator.hasNext()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            if (!codeBlock.formatParts.get(partIterator.nextIndex()).startsWith(\"$\")) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "              ClassName candidate \u003d (ClassName) typeName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "              if (staticImportClassNames.contains(candidate.canonicalName)) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "                checkState(deferredTypeName \u003d\u003d null, \"pending type for static import?!\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "                deferredTypeName \u003d candidate;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "                break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "              }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          typeName.emit(this);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$$\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitAndIndent(\"$\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$\u003e\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          indent();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$\u003c\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          unindent();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$[\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          checkState(statementLine \u003d\u003d -1, \"statement enter $[ followed by statement enter $[\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          statementLine \u003d 0;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$]\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          checkState(statementLine !\u003d -1, \"statement exit $] has no matching statement enter $[\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (statementLine \u003e 0) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            unindent(2); // End a multi-line statement. Decrease the indentation level.",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          statementLine \u003d -1;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$W\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.wrappingSpace(indentLevel + 2);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$Z\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.zeroWidthSpace(indentLevel + 2);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        default:",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          // handle deferred type",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (deferredTypeName !\u003d null) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            if (part.startsWith(\".\")) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "              if (emitStaticImportMember(deferredTypeName.canonicalName, part)) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "                // okay, static import hit and all was emitted, so clean-up and jump to next part",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "                deferredTypeName \u003d null;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "                break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "              }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            deferredTypeName.emit(this);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            deferredTypeName \u003d null;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitAndIndent(part);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (ensureTrailingNewline \u0026\u0026 out.lastChar() !\u003d \u0027\\n\u0027) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      emit(\"\\n\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return this;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "    public CodeBlock build() {",
      "className": "com.squareup.javapoet.CodeBlock.Builder",
      "id": "MethodSignatureBackedByPsiMethod: build([])_-414467228",
      "lines": [
        {
          "code": "      return new CodeBlock(this);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "    public Builder add(String format, Object... args) {",
      "className": "com.squareup.javapoet.CodeBlock.Builder",
      "id": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_-1396446497",
      "lines": [
        {
          "code": "      boolean hasRelative \u003d false;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      boolean hasIndexed \u003d false;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int relativeParameterCount \u003d 0;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int[] indexedParameterCount \u003d new int[args.length];",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      for (int p \u003d 0; p \u003c format.length(); ) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (format.charAt(p) !\u003d \u0027$\u0027) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          int nextP \u003d format.indexOf(\u0027$\u0027, p + 1);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (nextP \u003d\u003d -1) nextP \u003d format.length();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          formatParts.add(format.substring(p, nextP));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          p \u003d nextP;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          continue;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        p++; // \u0027$\u0027.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        // Consume zero or more digits, leaving \u0027c\u0027 as the first non-digit char after the \u0027$\u0027.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        int indexStart \u003d p;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        char c;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        do {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          checkArgument(p \u003c format.length(), \"dangling format characters in \u0027%s\u0027\", format);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          c \u003d format.charAt(p++);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        } while (c \u003e\u003d \u00270\u0027 \u0026\u0026 c \u003c\u003d \u00279\u0027);",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        int indexEnd \u003d p - 1;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        // If \u0027c\u0027 doesn\u0027t take an argument, we\u0027re done.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (isNoArgPlaceholder(c)) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          checkArgument(",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "              indexStart \u003d\u003d indexEnd, \"$$, $\u003e, $\u003c, $[, $], $W, and $Z may not have an index\");",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          formatParts.add(\"$\" + c);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          continue;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        // Find either the indexed argument, or the relative argument. (0-based).",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        int index;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (indexStart \u003c indexEnd) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          index \u003d Integer.parseInt(format.substring(indexStart, indexEnd)) - 1;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          hasIndexed \u003d true;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (args.length \u003e 0) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            indexedParameterCount[index % args.length]++; // modulo is needed, checked below anyway",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          index \u003d relativeParameterCount;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          hasRelative \u003d true;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          relativeParameterCount++;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        checkArgument(index \u003e\u003d 0 \u0026\u0026 index \u003c args.length,",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            \"index %d for \u0027%s\u0027 not in range (received %s arguments)\",",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            index + 1, format.substring(indexStart - 1, indexEnd + 1), args.length);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        checkArgument(!hasIndexed || !hasRelative, \"cannot mix indexed and positional parameters\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        addArgument(format, c, args[index]);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        formatParts.add(\"$\" + c);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (hasRelative) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        checkArgument(relativeParameterCount \u003e\u003d args.length,",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            \"unused arguments: expected %s, received %s\", relativeParameterCount, args.length);",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (hasIndexed) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        List\u003cString\u003e unused \u003d new ArrayList\u003c\u003e();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        for (int i \u003d 0; i \u003c args.length; i++) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (indexedParameterCount[i] \u003d\u003d 0) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            unused.add(\"$\" + (i + 1));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        String s \u003d unused.size() \u003d\u003d 1 ? \"\" : \"s\";",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        checkArgument(unused.isEmpty(), \"unused argument%s: %s\", s, String.join(\", \", unused));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return this;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "    private Builder() {",
      "className": "com.squareup.javapoet.CodeBlock.Builder",
      "id": "MethodSignatureBackedByPsiMethod: Builder([])_-565723585",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    }
  ],
  "edges": [
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: Object([])_1244393370",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:Class\u003c?\u003e])_1688850359",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:Class\u003c?\u003e])_-1207780032",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: builder([PsiType:Type, PsiType:String, PsiType:Modifier[]])_1682631724",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: remove([PsiType:int])_1840305554",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-878279766",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: isFalse([])_-1261418089",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: assertThat([PsiType:Boolean])_1073247655",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:Class\u003c?\u003e])_1688850359",
      "target": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:ClassName])_1000527824",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:Class\u003c?\u003e])_1688850359",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-691554390",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:Class\u003c?\u003e])_-1207780032",
      "target": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:ClassName])_-671839231",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:Class\u003c?\u003e])_-1207780032",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1295221771",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:Type, PsiType:String, PsiType:Modifier[]])_1682631724",
      "target": "MethodSignatureBackedByPsiMethod: builder([PsiType:TypeName, PsiType:String, PsiType:Modifier[]])_-2042012362",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:Type, PsiType:String, PsiType:Modifier[]])_1682631724",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type])_515557760",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-878279766",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_-669321259",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-878279766",
      "target": "MethodSignatureBackedByPsiMethod: getClass([])_-1030695070",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-878279766",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1361995775",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-878279766",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_-14787694",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-878279766",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_-1971775342",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:ClassName])_1000527824",
      "target": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_1438687833",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:ClassName])_1000527824",
      "target": "MethodSignatureBackedByPsiMethod: build([])_1578513778",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:ClassName])_1000527824",
      "target": "MethodSignatureBackedByPsiMethod: builder([PsiType:ClassName])_-830114368",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-691554390",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1491991517",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-691554390",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1281406668",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-691554390",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_1346364336",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-691554390",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-263495824",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-691554390",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_407383395",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-691554390",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-299983870",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-691554390",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_1800262124",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-691554390",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_1761773287",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-691554390",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-346334494",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-691554390",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-2108948462",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-691554390",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_-1478259002",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-691554390",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-1340470822",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-691554390",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1928804887",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-691554390",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_336280741",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-691554390",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1582569234",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-691554390",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_1325052740",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-691554390",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1818207675",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-691554390",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_308600548",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-691554390",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-1216956914",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-691554390",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1620411002",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-691554390",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_909945629",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-691554390",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1371695379",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-691554390",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1697752039",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:ClassName])_-671839231",
      "target": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_1902841724",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:ClassName])_-671839231",
      "target": "MethodSignatureBackedByPsiMethod: build([])_839069721",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:ClassName])_-671839231",
      "target": "MethodSignatureBackedByPsiMethod: builder([PsiType:ClassName])_-396246777",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1295221771",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1094350778",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1295221771",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1756651661",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1295221771",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_1951604734",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1295221771",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1880321579",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1295221771",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1249157144",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1295221771",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1395981052",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1295221771",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_2061949866",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1295221771",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_-994601780",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1295221771",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_36191196",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1295221771",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1484228964",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1295221771",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_-1246454262",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1295221771",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1257829796",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1295221771",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1262353960",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1295221771",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_564828330",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1295221771",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1457314590",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1295221771",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1685830154",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1295221771",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-925659922",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1295221771",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_630611686",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1295221771",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-606494263",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1295221771",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1618103313",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1295221771",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-1577204607",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1295221771",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1620901619",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1295221771",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_347027319",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:TypeName, PsiType:String, PsiType:Modifier[]])_-2042012362",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1394771904",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:TypeName, PsiType:String, PsiType:Modifier[]])_-2042012362",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_2021556299",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:TypeName, PsiType:String, PsiType:Modifier[]])_-2042012362",
      "target": "MethodSignatureBackedByPsiMethod: isValidParameterName([PsiType:String])_655506956",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:TypeName, PsiType:String, PsiType:Modifier[]])_-2042012362",
      "target": "MethodSignatureBackedByPsiMethod: addModifiers([PsiType:Modifier[]])_2059306819",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:TypeName, PsiType:String, PsiType:Modifier[]])_-2042012362",
      "target": "MethodSignatureBackedByPsiMethod: Builder([PsiType:TypeName, PsiType:String])_-1393053864",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type])_515557760",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_902876656",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type])_515557760",
      "target": "MethodSignatureBackedByPsiMethod: LinkedHashMap([])_1389595936",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-14787694",
      "target": "MethodSignatureBackedByPsiMethod: StringBuilder([])_-1494871322",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-14787694",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_21762517",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-14787694",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:String, PsiType:Object[]])_-1239241037",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-14787694",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_-414495388",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_-14787694",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_1531344516",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_1578513778",
      "target": "MethodSignatureBackedByPsiMethod: keySet([])_-3915721",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_1578513778",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1965094120",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_1578513778",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1885657771",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_1578513778",
      "target": "MethodSignatureBackedByPsiMethod: isName([PsiType:CharSequence])_1591459565",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_1578513778",
      "target": "MethodSignatureBackedByPsiMethod: AnnotationSpec([PsiType:Builder])_-1254189610",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:ClassName])_-830114368",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_863026379",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:ClassName])_-830114368",
      "target": "MethodSignatureBackedByPsiMethod: Builder([PsiType:TypeName])_2104531856",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1491991517",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_1767858207",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1491991517",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_300857109",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1281406668",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-233712960",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1281406668",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_2110545098",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-263495824",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1651806223",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-263495824",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1299992280",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-299983870",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1242067866",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-299983870",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1603957308",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1620411002",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-1090975320",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1620411002",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_1900785459",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_909945629",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1592066640",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1371695379",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_894055020",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1371695379",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_208698387",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1371695379",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-974960285",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1371695379",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-546608882",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1371695379",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_242654795",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1371695379",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-853464519",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1371695379",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_-937676543",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1371695379",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_218869336",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1371695379",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1185198891",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1371695379",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_2078047877",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1371695379",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_721100404",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1371695379",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1483487349",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1371695379",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_913795841",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1371695379",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-1126787346",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1371695379",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-688741209",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1371695379",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_650797834",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1371695379",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-182852068",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1371695379",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-2053370572",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1371695379",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1445367291",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1371695379",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1189328124",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1371695379",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_1210323930",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1371695379",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_23428969",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1371695379",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1783862399",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_839069721",
      "target": "MethodSignatureBackedByPsiMethod: keySet([])_388560059",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_839069721",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1832499282",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_839069721",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1929601870",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_839069721",
      "target": "MethodSignatureBackedByPsiMethod: isName([PsiType:CharSequence])_-746722978",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_839069721",
      "target": "MethodSignatureBackedByPsiMethod: AnnotationSpec([PsiType:Builder])_-327536556",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:ClassName])_-396246777",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-220206757",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:ClassName])_-396246777",
      "target": "MethodSignatureBackedByPsiMethod: Builder([PsiType:TypeName])_-1101088178",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1094350778",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_2042380184",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1094350778",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1252138906",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1756651661",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-416161591",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1756651661",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1266338601",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1880321579",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_261901813",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1880321579",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1788705057",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1395981052",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_590048028",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1395981052",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_326902216",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1618103313",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-386335691",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1618103313",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_18168873",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-1577204607",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1912165118",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1620901619",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_208934207",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1620901619",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1427525749",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1620901619",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-1199213432",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1620901619",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_7050828",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1620901619",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1727791101",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1620901619",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-671782324",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1620901619",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_-1183500347",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1620901619",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_941943488",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1620901619",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-526620217",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1620901619",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_925610723",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1620901619",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_90353424",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1620901619",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1172079660",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1620901619",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1467845551",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1620901619",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_141587976",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1620901619",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1291703006",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1620901619",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_1519460798",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1620901619",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_194383636",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1620901619",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-1285072847",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1620901619",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-2104617822",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1620901619",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-758556525",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1620901619",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_1304982660",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1620901619",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1539429816",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1620901619",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1925464265",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1394771904",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_28080525",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1394771904",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1097950988",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_2021556299",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-782404195",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_2021556299",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-406924216",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: isValidParameterName([PsiType:String])_655506956",
      "target": "MethodSignatureBackedByPsiMethod: endsWith([PsiType:String])_-144474008",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: isValidParameterName([PsiType:String])_655506956",
      "target": "MethodSignatureBackedByPsiMethod: isIdentifier([PsiType:CharSequence])_686391224",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: isValidParameterName([PsiType:String])_655506956",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-1711189219",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: isValidParameterName([PsiType:String])_655506956",
      "target": "MethodSignatureBackedByPsiMethod: length([])_1062244968",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: isValidParameterName([PsiType:String])_655506956",
      "target": "MethodSignatureBackedByPsiMethod: length([])_162619407",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: isValidParameterName([PsiType:String])_655506956",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1738457766",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: isValidParameterName([PsiType:String])_655506956",
      "target": "MethodSignatureBackedByPsiMethod: isName([PsiType:CharSequence])_1865155012",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addModifiers([PsiType:Modifier[]])_2059306819",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eaddAll([PsiType:Collection\u003c? super T\u003e, PsiType:T[]])_-26532237",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_902876656",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_-1798094804",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_902876656",
      "target": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_689845386",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_902876656",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-645468080",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_902876656",
      "target": "MethodSignatureBackedByPsiMethod: getComponentType([])_-1969750702",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_902876656",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1655603197",
      "sourceAnchor": 13,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_902876656",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_839695342",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_902876656",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1226953162",
      "sourceAnchor": 19,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_902876656",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-135096969",
      "sourceAnchor": 22,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_902876656",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1604611474",
      "sourceAnchor": 25,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_902876656",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1342806203",
      "sourceAnchor": 28,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_21762517",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-198346791",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_21762517",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_1369270524",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_21762517",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-746977437",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:String, PsiType:Object[]])_-1239241037",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock])_-864325765",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:String, PsiType:Object[]])_-1239241037",
      "target": "MethodSignatureBackedByPsiMethod: of([PsiType:String, PsiType:Object[]])_83186169",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1965094120",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-963062260",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1965094120",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-89434540",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1885657771",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-603194096",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1885657771",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_151119977",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: AnnotationSpec([PsiType:Builder])_-1254189610",
      "target": "MethodSignatureBackedByPsiMethod: \u003cK, V\u003eimmutableMultimap([PsiType:Map\u003cK, List\u003cV\u003e\u003e])_-780818047",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_863026379",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-464044513",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_863026379",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_768433144",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-1090975320",
      "target": "MethodSignatureBackedByPsiMethod: TypeName([PsiType:List\u003cAnnotationSpec\u003e])_238330884",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-1090975320",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003erequireNonNull([PsiType:T, PsiType:String])_752037838",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-1090975320",
      "target": "MethodSignatureBackedByPsiMethod: isEmpty([])_-709505512",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1592066640",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-988292654",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1592066640",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_1870441441",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_894055020",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-1154289633",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_894055020",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_927493221",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_208698387",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-768532192",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_208698387",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1137064507",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-546608882",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1688892862",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-546608882",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_346844553",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-853464519",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1737866061",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-853464519",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1191725529",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1189328124",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-492975176",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1189328124",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_-1723395779",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_1210323930",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-3526926",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_23428969",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-542368356",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_23428969",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-147616064",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_23428969",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_720631942",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_23428969",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-903266732",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_23428969",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-323229158",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_23428969",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1037941074",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_23428969",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_-2065929981",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_23428969",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_1752762929",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_23428969",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_638386526",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_23428969",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-1704948197",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_23428969",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_3076487",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_23428969",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-211215173",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_23428969",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1542694692",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_23428969",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-294435689",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_23428969",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1546370073",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_23428969",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-843603740",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_23428969",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-1200443181",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_23428969",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-1314104324",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_23428969",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1219975188",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_23428969",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1797502500",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_23428969",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-1448038231",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_23428969",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-165300138",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_23428969",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_453258347",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1832499282",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-1359237417",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1832499282",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-2017976265",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1929601870",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1549987315",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1929601870",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1826506933",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: AnnotationSpec([PsiType:Builder])_-327536556",
      "target": "MethodSignatureBackedByPsiMethod: \u003cK, V\u003eimmutableMultimap([PsiType:Map\u003cK, List\u003cV\u003e\u003e])_-389144813",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-220206757",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_501956112",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-220206757",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_751197952",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-386335691",
      "target": "MethodSignatureBackedByPsiMethod: TypeName([PsiType:List\u003cAnnotationSpec\u003e])_274783720",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-386335691",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003erequireNonNull([PsiType:T, PsiType:String])_-414109159",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-386335691",
      "target": "MethodSignatureBackedByPsiMethod: isEmpty([])_-1846832451",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1912165118",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-762835085",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1912165118",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_77825118",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_208934207",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_13342786",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_208934207",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-381660941",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1427525749",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_99308332",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1427525749",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-388232439",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_7050828",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1126100860",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_7050828",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1543898375",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-671782324",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_798931542",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-671782324",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1601621267",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-758556525",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-354705330",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-758556525",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_413484961",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_1304982660",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1207705581",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1539429816",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_818181197",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1539429816",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-2092497127",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1539429816",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_1916102575",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1539429816",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1328349352",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1539429816",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_2006267458",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1539429816",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_63204767",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1539429816",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_873152413",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1539429816",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_1617457684",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1539429816",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-22917495",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1539429816",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-149579575",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1539429816",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_4434370",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1539429816",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-632783209",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1539429816",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1419490725",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1539429816",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-2064650588",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1539429816",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-400799715",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1539429816",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-767027407",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1539429816",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-439748252",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1539429816",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-760252244",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1539429816",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_2061800256",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1539429816",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-309366758",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1539429816",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_1328355293",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1539429816",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-591313331",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1539429816",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_914121867",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_689845386",
      "target": "MethodSignatureBackedByPsiMethod: ArrayTypeName([PsiType:TypeName])_-661287023",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-645468080",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_991888858",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-645468080",
      "target": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_-1410141274",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-645468080",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-504074339",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-645468080",
      "target": "MethodSignatureBackedByPsiMethod: getComponentType([])_-1719518138",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-645468080",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_997793760",
      "sourceAnchor": 13,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-645468080",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1469228913",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-645468080",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-348627192",
      "sourceAnchor": 19,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-645468080",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-715788804",
      "sourceAnchor": 22,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-645468080",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_-2084467526",
      "sourceAnchor": 25,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-645468080",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_335324125",
      "sourceAnchor": 28,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1655603197",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1525778499",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1655603197",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-770857878",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1655603197",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-676424564",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1655603197",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_917006052",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1655603197",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-2125698332",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1655603197",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-755840926",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1655603197",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_1654641960",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1655603197",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_398611773",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1655603197",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1036357874",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1655603197",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1285913397",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1655603197",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_193324960",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1655603197",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1387969736",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1655603197",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_862754599",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1655603197",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_1316091988",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1655603197",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1059474203",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1655603197",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1904870924",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1655603197",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1490753742",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1655603197",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_879226170",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1655603197",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_2066917612",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1655603197",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1211208643",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1655603197",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-1317465844",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1655603197",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1001712521",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1655603197",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_747095520",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_839695342",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-2136822026",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_839695342",
      "target": "MethodSignatureBackedByPsiMethod: getRawType([])_-470628407",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_839695342",
      "target": "MethodSignatureBackedByPsiMethod: getOwnerType([])_1194416499",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_839695342",
      "target": "MethodSignatureBackedByPsiMethod: isStatic([PsiType:int])_1398387927",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_839695342",
      "target": "MethodSignatureBackedByPsiMethod: getModifiers([])_-192406968",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_839695342",
      "target": "MethodSignatureBackedByPsiMethod: getRawType([])_-699910528",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_839695342",
      "target": "MethodSignatureBackedByPsiMethod: getOwnerType([])_119637083",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_839695342",
      "target": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_1314397845",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_839695342",
      "target": "MethodSignatureBackedByPsiMethod: getActualTypeArguments([])_-1623863174",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_839695342",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String, PsiType:List\u003cTypeName\u003e])_1778173494",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_839695342",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1289569861",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_839695342",
      "target": "MethodSignatureBackedByPsiMethod: simpleName([])_-1288785191",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_839695342",
      "target": "MethodSignatureBackedByPsiMethod: ParameterizedTypeName([PsiType:ParameterizedTypeName, PsiType:ClassName, PsiType:List\u003cTypeName\u003e])_-1220748431",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1226953162",
      "target": "MethodSignatureBackedByPsiMethod: WildcardTypeName([PsiType:List\u003cTypeName\u003e, PsiType:List\u003cTypeName\u003e])_-995067737",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1226953162",
      "target": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-1571386808",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1226953162",
      "target": "MethodSignatureBackedByPsiMethod: getUpperBounds([])_343086767",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1226953162",
      "target": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-1243210118",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1226953162",
      "target": "MethodSignatureBackedByPsiMethod: getLowerBounds([])_965079234",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-135096969",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Object])_-1168336045",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-135096969",
      "target": "MethodSignatureBackedByPsiMethod: ArrayList([])_1951589378",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-135096969",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eunmodifiableList([PsiType:List\u003c? extends T\u003e])_1935089735",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-135096969",
      "target": "MethodSignatureBackedByPsiMethod: TypeVariableName([PsiType:String, PsiType:List\u003cTypeName\u003e])_100404824",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-135096969",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-70407567",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-135096969",
      "target": "MethodSignatureBackedByPsiMethod: put([PsiType:K, PsiType:V])_761892469",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-135096969",
      "target": "MethodSignatureBackedByPsiMethod: getBounds([])_1084944695",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-135096969",
      "target": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_202969359",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-135096969",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1492166494",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-135096969",
      "target": "MethodSignatureBackedByPsiMethod: remove([PsiType:Object])_-1454423694",
      "sourceAnchor": 11,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1604611474",
      "target": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_280801754",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1604611474",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-1624213860",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1604611474",
      "target": "MethodSignatureBackedByPsiMethod: getGenericComponentType([])_-1685256162",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-198346791",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Map\u003cString, ClassName\u003e, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-68220030",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-198346791",
      "target": "MethodSignatureBackedByPsiMethod: \u003cK, V\u003eemptyMap([])_-801800780",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock])_-864325765",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-412350415",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: of([PsiType:String, PsiType:Object[]])_83186169",
      "target": "MethodSignatureBackedByPsiMethod: build([])_-414467228",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: of([PsiType:String, PsiType:Object[]])_83186169",
      "target": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_-1396446497",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: of([PsiType:String, PsiType:Object[]])_83186169",
      "target": "MethodSignatureBackedByPsiMethod: Builder([])_-565723585",
      "sourceAnchor": 1,
      "targetAnchor": 0
    }
  ]
}
