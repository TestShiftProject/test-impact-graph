{
  "nodes": [
    {
      "signature": "    public void modifyAnnotations_assSep5() throws Exception {",
      "className": "com.squareup.javapoet.ParameterSpecTest",
      "id": "root",
      "lines": [
        {
          "code": "        ParameterSpec.Builder builder \u003d ParameterSpec.builder(int.class, \"foo\").addAnnotation(Override.class).addAnnotation(SuppressWarnings.class);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        AnnotationSpec o_modifyAnnotations__5 \u003d builder.annotations.remove(1);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        Truth.assertThat(((int) (((AnnotationSpec) (o_modifyAnnotations__5)).hashCode()))).isEqualTo(-1410730048);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": true,
      "nodeLevel": 0
    },
    {
      "signature": "    public Builder addAnnotation(Class\u003c?\u003e annotation) {",
      "className": "com.squareup.javapoet.ParameterSpec.Builder",
      "id": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:Class\u003c?\u003e])_1614269737",
      "lines": [
        {
          "code": "      return addAnnotation(ClassName.get(annotation));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 1
    },
    {
      "signature": "    public Builder addAnnotation(Class\u003c?\u003e annotation) {",
      "className": "com.squareup.javapoet.ParameterSpec.Builder",
      "id": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:Class\u003c?\u003e])_72674774",
      "lines": [
        {
          "code": "      return addAnnotation(ClassName.get(annotation));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 1
    },
    {
      "signature": "  public static Builder builder(Type type, String name, Modifier... modifiers) {",
      "className": "com.squareup.javapoet.ParameterSpec",
      "id": "MethodSignatureBackedByPsiMethod: builder([PsiType:Type, PsiType:String, PsiType:Modifier[]])_-779045922",
      "lines": [
        {
          "code": "    return builder(TypeName.get(type), name, modifiers);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 1
    },
    {
      "signature": "remove",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: remove([PsiType:int])_1770595521",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 1
    },
    {
      "signature": "isEqualTo",
      "className": "com.google.common.truth.Subject",
      "id": "MethodSignatureBackedByPsiMethod: isEqualTo([PsiType:Object])_553342626",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 1
    },
    {
      "signature": "assertThat",
      "className": "com.google.common.truth.Truth",
      "id": "MethodSignatureBackedByPsiMethod: assertThat([PsiType:Integer])_1905627711",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 1
    },
    {
      "signature": "  @Override public int hashCode() {",
      "className": "com.squareup.javapoet.AnnotationSpec",
      "id": "MethodSignatureBackedByPsiMethod: hashCode([])_-1971871508",
      "lines": [
        {
          "code": "    return toString().hashCode();",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        }
      ],
      "addCovered": true,
      "nodeLevel": 1
    },
    {
      "signature": "    public Builder addAnnotation(ClassName annotation) {",
      "className": "com.squareup.javapoet.ParameterSpec.Builder",
      "id": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:ClassName])_-399151501",
      "lines": [
        {
          "code": "      this.annotations.add(AnnotationSpec.builder(annotation).build());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return this;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1294763396",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "    public Builder addAnnotation(ClassName annotation) {",
      "className": "com.squareup.javapoet.ParameterSpec.Builder",
      "id": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:ClassName])_-971303186",
      "lines": [
        {
          "code": "      this.annotations.add(AnnotationSpec.builder(annotation).build());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return this;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-149714893",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  public static Builder builder(TypeName type, String name, Modifier... modifiers) {",
      "className": "com.squareup.javapoet.ParameterSpec",
      "id": "MethodSignatureBackedByPsiMethod: builder([PsiType:TypeName, PsiType:String, PsiType:Modifier[]])_1283392799",
      "lines": [
        {
          "code": "    checkNotNull(type, \"type \u003d\u003d null\");",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    checkArgument(isValidParameterName(name), \"not a valid name: %s\", name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return new Builder(type, name)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        .addModifiers(modifiers);",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  public static TypeName get(Type type) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type])_1807827429",
      "lines": [
        {
          "code": "    return get(type, new LinkedHashMap\u003c\u003e());",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "hashCode",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: hashCode([])_931091248",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 2
    },
    {
      "signature": "  @Override public String toString() {",
      "className": "com.squareup.javapoet.AnnotationSpec",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_1488510338",
      "lines": [
        {
          "code": "    StringBuilder out \u003d new StringBuilder();",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    try {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      CodeWriter codeWriter \u003d new CodeWriter(out);",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "      codeWriter.emit(\"$L\", this);",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "      return out.toString();",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "    } catch (IOException e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new AssertionError();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": true,
      "nodeLevel": 2
    },
    {
      "signature": "add",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_-1392917522",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "    public AnnotationSpec build() {",
      "className": "com.squareup.javapoet.AnnotationSpec.Builder",
      "id": "MethodSignatureBackedByPsiMethod: build([])_-1923700483",
      "lines": [
        {
          "code": "      for (String name : members.keySet()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        checkNotNull(name, \"name \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        checkArgument(SourceVersion.isName(name), \"not a valid name: %s\", name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new AnnotationSpec(this);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  public static Builder builder(ClassName type) {",
      "className": "com.squareup.javapoet.AnnotationSpec",
      "id": "MethodSignatureBackedByPsiMethod: builder([PsiType:ClassName])_1562654384",
      "lines": [
        {
          "code": "    checkNotNull(type, \"type \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return new Builder(type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_224154992",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_198647389",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_646197822",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1599769337",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_1386209936",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1831164059",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_361992616",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_427084088",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1131032094",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1122854619",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_857992026",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_873138246",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1345632907",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_1925619993",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_647244907",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-578730266",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_703476936",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_1718023390",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-931554054",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1076991562",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_1501924384",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_764212082",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_337969027",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "add",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_-1414534948",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "    public AnnotationSpec build() {",
      "className": "com.squareup.javapoet.AnnotationSpec.Builder",
      "id": "MethodSignatureBackedByPsiMethod: build([])_-194846503",
      "lines": [
        {
          "code": "      for (String name : members.keySet()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        checkNotNull(name, \"name \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        checkArgument(SourceVersion.isName(name), \"not a valid name: %s\", name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new AnnotationSpec(this);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  public static Builder builder(ClassName type) {",
      "className": "com.squareup.javapoet.AnnotationSpec",
      "id": "MethodSignatureBackedByPsiMethod: builder([PsiType:ClassName])_-1877436659",
      "lines": [
        {
          "code": "    checkNotNull(type, \"type \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return new Builder(type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_109695348",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_565545274",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-764253012",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_2126855033",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_570458367",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1671331201",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_1852235451",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_-1963459338",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_211135538",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_188963533",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_-1540291902",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-1143299747",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1624916668",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-1113699072",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1494341747",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_2144956295",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_262502448",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_928143043",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1437726889",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-367224593",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-840086137",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_790105546",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-609763490",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_972822933",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1768326786",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  private static boolean isValidParameterName(String name) {",
      "className": "com.squareup.javapoet.ParameterSpec",
      "id": "MethodSignatureBackedByPsiMethod: isValidParameterName([PsiType:String])_-1333569701",
      "lines": [
        {
          "code": "    // Allow \"this\" for explicit receiver parameters",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    // See https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.4.1.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (name.endsWith(\".this\")) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return SourceVersion.isIdentifier(name.substring(0, name.length() - \".this\".length()));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return name.equals(\"this\") || SourceVersion.isName(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "    public Builder addModifiers(Modifier... modifiers) {",
      "className": "com.squareup.javapoet.ParameterSpec.Builder",
      "id": "MethodSignatureBackedByPsiMethod: addModifiers([PsiType:Modifier[]])_1062354652",
      "lines": [
        {
          "code": "      Collections.addAll(this.modifiers, modifiers);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return this;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "    private Builder(TypeName type, String name) {",
      "className": "com.squareup.javapoet.ParameterSpec.Builder",
      "id": "MethodSignatureBackedByPsiMethod: Builder([PsiType:TypeName, PsiType:String])_1358377509",
      "lines": [
        {
          "code": "      this.type \u003d type;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      this.name \u003d name;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-195649962",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "LinkedHashMap",
      "className": "java.util.LinkedHashMap",
      "id": "MethodSignatureBackedByPsiMethod: LinkedHashMap([])_1187637520",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "StringBuilder",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: StringBuilder([])_-1653563469",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  CodeWriter(Appendable out) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_413589592",
      "lines": [
        {
          "code": "    this(out, \"  \", Collections.emptySet(), Collections.emptySet());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "  public CodeWriter emit(String format, Object... args) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:String, PsiType:Object[]])_-126460724",
      "lines": [
        {
          "code": "    return emit(CodeBlock.of(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "toString",
      "className": "java.lang.StringBuilder",
      "id": "MethodSignatureBackedByPsiMethod: toString([])_-1150643750",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "AssertionError",
      "className": "java.lang.AssertionError",
      "id": "MethodSignatureBackedByPsiMethod: AssertionError([])_1770135176",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 3
    },
    {
      "signature": "keySet",
      "className": "java.util.Map",
      "id": "MethodSignatureBackedByPsiMethod: keySet([])_1874131354",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_625444368",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1007783753",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isName",
      "className": "javax.lang.model.SourceVersion",
      "id": "MethodSignatureBackedByPsiMethod: isName([PsiType:CharSequence])_1195995653",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private AnnotationSpec(Builder builder) {",
      "className": "com.squareup.javapoet.AnnotationSpec",
      "id": "MethodSignatureBackedByPsiMethod: AnnotationSpec([PsiType:Builder])_1767361517",
      "lines": [
        {
          "code": "    this.type \u003d builder.type;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.members \u003d Util.immutableMultimap(builder.members);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1953838024",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "    private Builder(TypeName type) {",
      "className": "com.squareup.javapoet.AnnotationSpec.Builder",
      "id": "MethodSignatureBackedByPsiMethod: Builder([PsiType:TypeName])_-568954101",
      "lines": [
        {
          "code": "      this.type \u003d type;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_827071505",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_141322508",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-256365720",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-525050702",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1733892673",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_340262867",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-1988508220",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-102396998",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName,",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-2132432499",
      "lines": [
        {
          "code": "      List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.packageName \u003d Objects.requireNonNull(packageName, \"packageName \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.enclosingClassName \u003d enclosingClassName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.simpleName \u003d simpleName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.canonicalName \u003d enclosingClassName !\u003d null",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (enclosingClassName.canonicalName + \u0027.\u0027 + simpleName)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : (packageName.isEmpty() ? simpleName : packageName + \u0027.\u0027 + simpleName);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "emptyList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_-1006966819",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_772094950",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-522744375",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1623593286",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_994460526",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1480561375",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_746425656",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1169402183",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_-852534381",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_-2132643226",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_1092256722",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-596603030",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_-1456858488",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1974440661",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_888493530",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-798179266",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1551480743",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_245853590",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1459951954",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-1781037322",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-1235128885",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1148490518",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-360444550",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-146573149",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1343848828",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "keySet",
      "className": "java.util.Map",
      "id": "MethodSignatureBackedByPsiMethod: keySet([])_384882300",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_205260438",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1330483547",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isName",
      "className": "javax.lang.model.SourceVersion",
      "id": "MethodSignatureBackedByPsiMethod: isName([PsiType:CharSequence])_-1789213880",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private AnnotationSpec(Builder builder) {",
      "className": "com.squareup.javapoet.AnnotationSpec",
      "id": "MethodSignatureBackedByPsiMethod: AnnotationSpec([PsiType:Builder])_1903365373",
      "lines": [
        {
          "code": "    this.type \u003d builder.type;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.members \u003d Util.immutableMultimap(builder.members);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-364424716",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "    private Builder(TypeName type) {",
      "className": "com.squareup.javapoet.AnnotationSpec.Builder",
      "id": "MethodSignatureBackedByPsiMethod: Builder([PsiType:TypeName])_625095775",
      "lines": [
        {
          "code": "      this.type \u003d type;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_430270958",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-942680337",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_422401581",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_185195561",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-808581389",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1367391935",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_32666538",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-45944950",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName,",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-825899835",
      "lines": [
        {
          "code": "      List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.packageName \u003d Objects.requireNonNull(packageName, \"packageName \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.enclosingClassName \u003d enclosingClassName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.simpleName \u003d simpleName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.canonicalName \u003d enclosingClassName !\u003d null",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (enclosingClassName.canonicalName + \u0027.\u0027 + simpleName)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : (packageName.isEmpty() ? simpleName : packageName + \u0027.\u0027 + simpleName);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "emptyList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_-1291722727",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_136767850",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-287773018",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_472245028",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-249055624",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_91800065",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-634596619",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1077144131",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_-1091911429",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_1040780515",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_495028533",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-1735677673",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_-299298945",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-1375410206",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1096914593",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-1949199950",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1263209705",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-100197131",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1855806819",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-413677203",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_750394051",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-657500102",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_1334096966",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-152658136",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-2031300086",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_975714877",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_586532271",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-1628906327",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_2109078853",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "endsWith",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: endsWith([PsiType:String])_-56243590",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isIdentifier",
      "className": "javax.lang.model.SourceVersion",
      "id": "MethodSignatureBackedByPsiMethod: isIdentifier([PsiType:CharSequence])_1124493773",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_427943619",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "length",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: length([])_-1597988903",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "length",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: length([])_-1233514976",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "equals",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1683197937",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isName",
      "className": "javax.lang.model.SourceVersion",
      "id": "MethodSignatureBackedByPsiMethod: isName([PsiType:CharSequence])_-48022604",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "addAll",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eaddAll([PsiType:Collection\u003c? super T\u003e, PsiType:T[]])_1156882075",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_-181025001",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public static ArrayTypeName of(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_-1961063466",
      "lines": [
        {
          "code": "    return new ArrayTypeName(componentType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1536226255",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "getComponentType",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getComponentType([])_-1809523289",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1322803388",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static ParameterizedTypeName get(ParameterizedType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1558108267",
      "lines": [
        {
          "code": "    ClassName rawType \u003d ClassName.get((Class\u003c?\u003e) type.getRawType());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    ParameterizedType ownerType \u003d (type.getOwnerType() instanceof ParameterizedType)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        \u0026\u0026 !Modifier.isStatic(((Class\u003c?\u003e) type.getRawType()).getModifiers())",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (ParameterizedType) type.getOwnerType() : null;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    List\u003cTypeName\u003e typeArguments \u003d TypeName.list(type.getActualTypeArguments(), map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return (ownerType !\u003d null)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? get(ownerType, map).nestedClass(rawType.simpleName(), typeArguments)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : new ParameterizedTypeName(null, rawType, typeArguments);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static TypeName get(WildcardType wildcardName, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.WildcardTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-719640486",
      "lines": [
        {
          "code": "    return new WildcardTypeName(",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getUpperBounds(), map),",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getLowerBounds(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static TypeVariableName get(java.lang.reflect.TypeVariable\u003c?\u003e type,",
      "className": "com.squareup.javapoet.TypeVariableName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-517937297",
      "lines": [
        {
          "code": "      Map\u003cType, TypeVariableName\u003e map) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    TypeVariableName result \u003d map.get(type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e bounds \u003d new ArrayList\u003c\u003e();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e visibleBounds \u003d Collections.unmodifiableList(bounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result \u003d new TypeVariableName(type.getName(), visibleBounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      map.put(type, result);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      for (Type bound : type.getBounds()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        bounds.add(TypeName.get(bound, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      bounds.remove(OBJECT);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  static ArrayTypeName get(GenericArrayType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_1399604235",
      "lines": [
        {
          "code": "    return ArrayTypeName.of(get(type.getGenericComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_756230195",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  CodeWriter(Appendable out, String indent, Set\u003cString\u003e staticImports, Set\u003cString\u003e alwaysQualify) {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-674470727",
      "lines": [
        {
          "code": "    this(out, indent, Collections.emptyMap(), staticImports, alwaysQualify);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-850300650",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "emptySet",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_770061845",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public CodeWriter emit(CodeBlock codeBlock) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock])_575574817",
      "lines": [
        {
          "code": "    return emit(codeBlock, false);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "  public static CodeBlock of(String format, Object... args) {",
      "className": "com.squareup.javapoet.CodeBlock",
      "id": "MethodSignatureBackedByPsiMethod: of([PsiType:String, PsiType:Object[]])_1001096651",
      "lines": [
        {
          "code": "    return new Builder().add(format, args).build();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 4
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-1482141698",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_981225810",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-450955157",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-164516973",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static \u003cK, V\u003e Map\u003cK, List\u003cV\u003e\u003e immutableMultimap(Map\u003cK, List\u003cV\u003e\u003e multimap) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cK, V\u003eimmutableMultimap([PsiType:Map\u003cK, List\u003cV\u003e\u003e])_-937315169",
      "lines": [
        {
          "code": "    LinkedHashMap\u003cK, List\u003cV\u003e\u003e result \u003d new LinkedHashMap\u003c\u003e();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    for (Map.Entry\u003cK, List\u003cV\u003e\u003e entry : multimap.entrySet()) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (entry.getValue().isEmpty()) continue;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result.put(entry.getKey(), immutableList(entry.getValue()));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return Collections.unmodifiableMap(result);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_1063932225",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1406691200",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  TypeName(List\u003cAnnotationSpec\u003e annotations) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: TypeName([PsiType:List\u003cAnnotationSpec\u003e])_-1912921829",
      "lines": [
        {
          "code": "    this(null, annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "requireNonNull",
      "className": "java.util.Objects",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003erequireNonNull([PsiType:T, PsiType:String])_1084079770",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isEmpty",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: isEmpty([])_1902040430",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName,",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_589014072",
      "lines": [
        {
          "code": "      List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.packageName \u003d Objects.requireNonNull(packageName, \"packageName \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.enclosingClassName \u003d enclosingClassName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.simpleName \u003d simpleName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.canonicalName \u003d enclosingClassName !\u003d null",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (enclosingClassName.canonicalName + \u0027.\u0027 + simpleName)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : (packageName.isEmpty() ? simpleName : packageName + \u0027.\u0027 + simpleName);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptyList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_1187274388",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_414629389",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_2111220284",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1455700557",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_187861441",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_262780457",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1193453084",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-421538807",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-403105642",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName,",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_44823808",
      "lines": [
        {
          "code": "      List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.packageName \u003d Objects.requireNonNull(packageName, \"packageName \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.enclosingClassName \u003d enclosingClassName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.simpleName \u003d simpleName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.canonicalName \u003d enclosingClassName !\u003d null",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (enclosingClassName.canonicalName + \u0027.\u0027 + simpleName)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : (packageName.isEmpty() ? simpleName : packageName + \u0027.\u0027 + simpleName);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptyList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_1700219325",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_272091201",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1625586204",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_543282339",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-1501960259",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1961815167",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_241953175",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-522716820",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_1348119615",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_1817587848",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_938135529",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-1113480809",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_1019606022",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-1063156746",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1782294728",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_617863703",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-48564607",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-455717053",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_96081102",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_1958653095",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_972708944",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1482776307",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-588714687",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1564304610",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_308886022",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-786831353",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_611161811",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-961414137",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1646103760",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static \u003cK, V\u003e Map\u003cK, List\u003cV\u003e\u003e immutableMultimap(Map\u003cK, List\u003cV\u003e\u003e multimap) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cK, V\u003eimmutableMultimap([PsiType:Map\u003cK, List\u003cV\u003e\u003e])_-78755658",
      "lines": [
        {
          "code": "    LinkedHashMap\u003cK, List\u003cV\u003e\u003e result \u003d new LinkedHashMap\u003c\u003e();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    for (Map.Entry\u003cK, List\u003cV\u003e\u003e entry : multimap.entrySet()) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (entry.getValue().isEmpty()) continue;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result.put(entry.getKey(), immutableList(entry.getValue()));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return Collections.unmodifiableMap(result);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-1847304677",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_856886384",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  TypeName(List\u003cAnnotationSpec\u003e annotations) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: TypeName([PsiType:List\u003cAnnotationSpec\u003e])_-471021162",
      "lines": [
        {
          "code": "    this(null, annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "requireNonNull",
      "className": "java.util.Objects",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003erequireNonNull([PsiType:T, PsiType:String])_-1055940516",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isEmpty",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: isEmpty([])_2047742180",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName,",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_848349954",
      "lines": [
        {
          "code": "      List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.packageName \u003d Objects.requireNonNull(packageName, \"packageName \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.enclosingClassName \u003d enclosingClassName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.simpleName \u003d simpleName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.canonicalName \u003d enclosingClassName !\u003d null",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (enclosingClassName.canonicalName + \u0027.\u0027 + simpleName)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : (packageName.isEmpty() ? simpleName : packageName + \u0027.\u0027 + simpleName);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptyList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_946609344",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "NullPointerException",
      "className": "java.lang.NullPointerException",
      "id": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-1651871053",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_2082354004",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1899360337",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-901210693",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1131006528",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-975903920",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-1779525515",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "format",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_711916317",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName,",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_1260752399",
      "lines": [
        {
          "code": "      List\u003cAnnotationSpec\u003e annotations) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    super(annotations);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.packageName \u003d Objects.requireNonNull(packageName, \"packageName \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.enclosingClassName \u003d enclosingClassName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.simpleName \u003d simpleName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.canonicalName \u003d enclosingClassName !\u003d null",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (enclosingClassName.canonicalName + \u0027.\u0027 + simpleName)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : (packageName.isEmpty() ? simpleName : packageName + \u0027.\u0027 + simpleName);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptyList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_-976679393",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-2088603175",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1076311739",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1056177825",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_7199821",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_419595602",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_578595559",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-383676891",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_-1079478319",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_1707273075",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1762001465",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1980860390",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_444174449",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-39189729",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-942927932",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-1470285051",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1668267419",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_623115614",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_185409559",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-491873177",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-892189894",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1314729356",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_898740444",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_860787696",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_742357241",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ArrayTypeName(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: ArrayTypeName([PsiType:TypeName])_-645925841",
      "lines": [
        {
          "code": "    this(componentType, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_564718802",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ArrayTypeName of(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_1479436528",
      "lines": [
        {
          "code": "    return new ArrayTypeName(componentType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_206921608",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getComponentType",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getComponentType([])_1972785537",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1588124322",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static ParameterizedTypeName get(ParameterizedType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_313983453",
      "lines": [
        {
          "code": "    ClassName rawType \u003d ClassName.get((Class\u003c?\u003e) type.getRawType());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    ParameterizedType ownerType \u003d (type.getOwnerType() instanceof ParameterizedType)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        \u0026\u0026 !Modifier.isStatic(((Class\u003c?\u003e) type.getRawType()).getModifiers())",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (ParameterizedType) type.getOwnerType() : null;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    List\u003cTypeName\u003e typeArguments \u003d TypeName.list(type.getActualTypeArguments(), map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return (ownerType !\u003d null)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? get(ownerType, map).nestedClass(rawType.simpleName(), typeArguments)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : new ParameterizedTypeName(null, rawType, typeArguments);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(WildcardType wildcardName, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.WildcardTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_796450895",
      "lines": [
        {
          "code": "    return new WildcardTypeName(",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getUpperBounds(), map),",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        list(wildcardName.getLowerBounds(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeVariableName get(java.lang.reflect.TypeVariable\u003c?\u003e type,",
      "className": "com.squareup.javapoet.TypeVariableName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-314540211",
      "lines": [
        {
          "code": "      Map\u003cType, TypeVariableName\u003e map) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    TypeVariableName result \u003d map.get(type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (result \u003d\u003d null) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e bounds \u003d new ArrayList\u003c\u003e();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      List\u003cTypeName\u003e visibleBounds \u003d Collections.unmodifiableList(bounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result \u003d new TypeVariableName(type.getName(), visibleBounds);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      map.put(type, result);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      for (Type bound : type.getBounds()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        bounds.add(TypeName.get(bound, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      bounds.remove(OBJECT);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static ArrayTypeName get(GenericArrayType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_-844387115",
      "lines": [
        {
          "code": "    return ArrayTypeName.of(get(type.getGenericComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "IllegalArgumentException",
      "className": "java.lang.IllegalArgumentException",
      "id": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1075833667",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static \u003cT\u003e T checkNotNull(T reference, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1630765086",
      "lines": [
        {
          "code": "    if (reference \u003d\u003d null) throw new NullPointerException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    return reference;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1009771899",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isPrimitive",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isPrimitive([])_1193513210",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1622890999",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "equals",
      "className": "java.lang.Object",
      "id": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_2038105933",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static void checkArgument(boolean condition, String format, Object... args) {",
      "className": "com.squareup.javapoet.Util",
      "id": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1917892468",
      "lines": [
        {
          "code": "    if (!condition) throw new IllegalArgumentException(String.format(format, args));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isArray",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isArray([])_-1977681467",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isAnonymousClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_1438882962",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-267843548",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1656353368",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_2122788966",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-1526091747",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1254496387",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getSimpleName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-673614541",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1356885367",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "lastIndexOf",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-72618999",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_356600744",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "substring",
      "className": "java.lang.String",
      "id": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-1200159006",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_1809577434",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private ClassName(String packageName, ClassName enclosingClassName, String simpleName) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1611204255",
      "lines": [
        {
          "code": "    this(packageName, enclosingClassName, simpleName, Collections.emptyList());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public ClassName nestedClass(String name) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_1325143438",
      "lines": [
        {
          "code": "    return new ClassName(packageName, this, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1371666286",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getEnclosingClass",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1757724726",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ClassName get(Class\u003c?\u003e clazz) {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_637700418",
      "lines": [
        {
          "code": "    checkNotNull(clazz, \"clazz \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isPrimitive(), \"primitive types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!void.class.equals(clazz), \"\u0027void\u0027 type cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    checkArgument(!clazz.isArray(), \"array types cannot be represented as a ClassName\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String anonymousSuffix \u003d \"\";",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    while (clazz.isAnonymousClass()) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDollar \u003d clazz.getName().lastIndexOf(\u0027$\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      anonymousSuffix \u003d clazz.getName().substring(lastDollar) + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      clazz \u003d clazz.getEnclosingClass();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    String name \u003d clazz.getSimpleName() + anonymousSuffix;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    if (clazz.getEnclosingClass() \u003d\u003d null) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      // Avoid unreliable Class.getPackage(). https://github.com/square/javapoet/issues/295",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int lastDot \u003d clazz.getName().lastIndexOf(\u0027.\u0027);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      String packageName \u003d (lastDot !\u003d -1) ? clazz.getName().substring(0, lastDot) : NO_PACKAGE;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return new ClassName(packageName, null, name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return ClassName.get(clazz.getEnclosingClass()).nestedClass(name);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getRawType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getRawType([])_294012952",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getOwnerType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getOwnerType([])_-2043118175",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "isStatic",
      "className": "java.lang.reflect.Modifier",
      "id": "MethodSignatureBackedByPsiMethod: isStatic([PsiType:int])_424490387",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getModifiers",
      "className": "java.lang.Class",
      "id": "MethodSignatureBackedByPsiMethod: getModifiers([])_-574718326",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getRawType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getRawType([])_-1254260271",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getOwnerType",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getOwnerType([])_-1473324580",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static List\u003cTypeName\u003e list(Type[] types, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_1207355514",
      "lines": [
        {
          "code": "    List\u003cTypeName\u003e result \u003d new ArrayList\u003c\u003e(types.length);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (Type type : types) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result.add(get(type, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getActualTypeArguments",
      "className": "java.lang.reflect.ParameterizedType",
      "id": "MethodSignatureBackedByPsiMethod: getActualTypeArguments([])_-616792370",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public ParameterizedTypeName nestedClass(String name, List\u003cTypeName\u003e typeArguments) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String, PsiType:List\u003cTypeName\u003e])_339668169",
      "lines": [
        {
          "code": "    checkNotNull(name, \"name \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return new ParameterizedTypeName(this, rawType.nestedClass(name), typeArguments,",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static ParameterizedTypeName get(ParameterizedType type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1423617496",
      "lines": [
        {
          "code": "    ClassName rawType \u003d ClassName.get((Class\u003c?\u003e) type.getRawType());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    ParameterizedType ownerType \u003d (type.getOwnerType() instanceof ParameterizedType)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        \u0026\u0026 !Modifier.isStatic(((Class\u003c?\u003e) type.getRawType()).getModifiers())",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? (ParameterizedType) type.getOwnerType() : null;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    List\u003cTypeName\u003e typeArguments \u003d TypeName.list(type.getActualTypeArguments(), map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return (ownerType !\u003d null)",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        ? get(ownerType, map).nestedClass(rawType.simpleName(), typeArguments)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        : new ParameterizedTypeName(null, rawType, typeArguments);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public String simpleName() {",
      "className": "com.squareup.javapoet.ClassName",
      "id": "MethodSignatureBackedByPsiMethod: simpleName([])_-478649773",
      "lines": [
        {
          "code": "    return simpleName;",
          "callsMethod": false,
          "covered": true,
          "addCovered": true
        }
      ],
      "addCovered": true,
      "nodeLevel": 5
    },
    {
      "signature": "  ParameterizedTypeName(ParameterizedTypeName enclosingType, ClassName rawType,",
      "className": "com.squareup.javapoet.ParameterizedTypeName",
      "id": "MethodSignatureBackedByPsiMethod: ParameterizedTypeName([PsiType:ParameterizedTypeName, PsiType:ClassName, PsiType:List\u003cTypeName\u003e])_642588306",
      "lines": [
        {
          "code": "      List\u003cTypeName\u003e typeArguments) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this(enclosingType, rawType, typeArguments, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private WildcardTypeName(List\u003cTypeName\u003e upperBounds, List\u003cTypeName\u003e lowerBounds) {",
      "className": "com.squareup.javapoet.WildcardTypeName",
      "id": "MethodSignatureBackedByPsiMethod: WildcardTypeName([PsiType:List\u003cTypeName\u003e, PsiType:List\u003cTypeName\u003e])_-570832708",
      "lines": [
        {
          "code": "    this(upperBounds, lowerBounds, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static List\u003cTypeName\u003e list(Type[] types, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-226927734",
      "lines": [
        {
          "code": "    List\u003cTypeName\u003e result \u003d new ArrayList\u003c\u003e(types.length);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (Type type : types) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result.add(get(type, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getUpperBounds",
      "className": "java.lang.reflect.WildcardType",
      "id": "MethodSignatureBackedByPsiMethod: getUpperBounds([])_879621706",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static List\u003cTypeName\u003e list(Type[] types, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-62448461",
      "lines": [
        {
          "code": "    List\u003cTypeName\u003e result \u003d new ArrayList\u003c\u003e(types.length);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (Type type : types) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      result.add(get(type, map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return result;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getLowerBounds",
      "className": "java.lang.reflect.WildcardType",
      "id": "MethodSignatureBackedByPsiMethod: getLowerBounds([])_-10620044",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "get",
      "className": "java.util.Map",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Object])_-269515622",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "ArrayList",
      "className": "java.util.ArrayList",
      "id": "MethodSignatureBackedByPsiMethod: ArrayList([])_230218207",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "unmodifiableList",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cT\u003eunmodifiableList([PsiType:List\u003c? extends T\u003e])_1094869288",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  private TypeVariableName(String name, List\u003cTypeName\u003e bounds) {",
      "className": "com.squareup.javapoet.TypeVariableName",
      "id": "MethodSignatureBackedByPsiMethod: TypeVariableName([PsiType:String, PsiType:List\u003cTypeName\u003e])_-1077931157",
      "lines": [
        {
          "code": "    this(name, bounds, new ArrayList\u003c\u003e());",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getName",
      "className": "java.lang.reflect.TypeVariable",
      "id": "MethodSignatureBackedByPsiMethod: getName([])_-161942186",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "put",
      "className": "java.util.Map",
      "id": "MethodSignatureBackedByPsiMethod: put([PsiType:K, PsiType:V])_-583030222",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getBounds",
      "className": "java.lang.reflect.TypeVariable",
      "id": "MethodSignatureBackedByPsiMethod: getBounds([])_1551348457",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "add",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_-402437965",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_628135987",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "remove",
      "className": "java.util.List",
      "id": "MethodSignatureBackedByPsiMethod: remove([PsiType:Object])_40944000",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public static ArrayTypeName of(TypeName componentType) {",
      "className": "com.squareup.javapoet.ArrayTypeName",
      "id": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_286349614",
      "lines": [
        {
          "code": "    return new ArrayTypeName(componentType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  static TypeName get(Type type, Map\u003cType, TypeVariableName\u003e map) {",
      "className": "com.squareup.javapoet.TypeName",
      "id": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_942835738",
      "lines": [
        {
          "code": "    if (type instanceof Class\u003c?\u003e) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      Class\u003c?\u003e classType \u003d (Class\u003c?\u003e) type;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d void.class) return VOID;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d boolean.class) return BOOLEAN;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d byte.class) return BYTE;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d short.class) return SHORT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d int.class) return INT;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d long.class) return LONG;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d char.class) return CHAR;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d float.class) return FLOAT;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (type \u003d\u003d double.class) return DOUBLE;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (classType.isArray()) return ArrayTypeName.of(get(classType.getComponentType(), map));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ClassName.get(classType);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof ParameterizedType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ParameterizedTypeName.get((ParameterizedType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof WildcardType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return WildcardTypeName.get((WildcardType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof TypeVariable\u003c?\u003e) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return TypeVariableName.get((TypeVariable\u003c?\u003e) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else if (type instanceof GenericArrayType) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return ArrayTypeName.get((GenericArrayType) type, map);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      throw new IllegalArgumentException(\"unexpected type: \" + type);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "getGenericComponentType",
      "className": "java.lang.reflect.GenericArrayType",
      "id": "MethodSignatureBackedByPsiMethod: getGenericComponentType([])_-2126954379",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  CodeWriter(Appendable out,",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Map\u003cString, ClassName\u003e, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-2059927315",
      "lines": [
        {
          "code": "      String indent,",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      Map\u003cString, ClassName\u003e importedTypes,",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      Set\u003cString\u003e staticImports,",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      Set\u003cString\u003e alwaysQualify) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.out \u003d new LineWrapper(out, indent, 100);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.indent \u003d checkNotNull(indent, \"indent \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.importedTypes \u003d checkNotNull(importedTypes, \"importedTypes \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.staticImports \u003d checkNotNull(staticImports, \"staticImports \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.alwaysQualify \u003d checkNotNull(alwaysQualify, \"alwaysQualify \u003d\u003d null\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    this.staticImportClassNames \u003d new LinkedHashSet\u003c\u003e();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    for (String signature : staticImports) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      staticImportClassNames.add(signature.substring(0, signature.lastIndexOf(\u0027.\u0027)));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "emptyMap",
      "className": "java.util.Collections",
      "id": "MethodSignatureBackedByPsiMethod: \u003cK, V\u003eemptyMap([])_818420700",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "  public CodeWriter emit(CodeBlock codeBlock, boolean ensureTrailingNewline) throws IOException {",
      "className": "com.squareup.javapoet.CodeWriter",
      "id": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-2051930999",
      "lines": [
        {
          "code": "    int a \u003d 0;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    ClassName deferredTypeName \u003d null; // used by \"import static\" logic",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    ListIterator\u003cString\u003e partIterator \u003d codeBlock.formatParts.listIterator();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    while (partIterator.hasNext()) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      String part \u003d partIterator.next();",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      switch (part) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "        case \"$L\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitLiteral(codeBlock.args.get(a++));",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$N\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitAndIndent((String) codeBlock.args.get(a++));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$S\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          String string \u003d (String) codeBlock.args.get(a++);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          // Emit null as a literal null: no quotes.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitAndIndent(string !\u003d null",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "              ? stringLiteralWithDoubleQuotes(string, indent)",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "              : \"null\");",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$T\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          TypeName typeName \u003d (TypeName) codeBlock.args.get(a++);",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "          // defer \"typeName.emit(this)\" if next format part will be handled by the default case",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (typeName instanceof ClassName \u0026\u0026 partIterator.hasNext()) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "            if (!codeBlock.formatParts.get(partIterator.nextIndex()).startsWith(\"$\")) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "              ClassName candidate \u003d (ClassName) typeName;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "              if (staticImportClassNames.contains(candidate.canonicalName)) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "                checkState(deferredTypeName \u003d\u003d null, \"pending type for static import?!\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "                deferredTypeName \u003d candidate;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "                break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "              }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          typeName.emit(this);",
          "callsMethod": true,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": true,
          "addCovered": true
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$$\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitAndIndent(\"$\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$\u003e\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          indent();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$\u003c\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          unindent();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$[\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          checkState(statementLine \u003d\u003d -1, \"statement enter $[ followed by statement enter $[\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          statementLine \u003d 0;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$]\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          checkState(statementLine !\u003d -1, \"statement exit $] has no matching statement enter $[\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (statementLine \u003e 0) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            unindent(2); // End a multi-line statement. Decrease the indentation level.",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          statementLine \u003d -1;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$W\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.wrappingSpace(indentLevel + 2);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        case \"$Z\":",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          out.zeroWidthSpace(indentLevel + 2);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        default:",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          // handle deferred type",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (deferredTypeName !\u003d null) {",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "            if (part.startsWith(\".\")) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "              if (emitStaticImportMember(deferredTypeName.canonicalName, part)) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "                // okay, static import hit and all was emitted, so clean-up and jump to next part",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "                deferredTypeName \u003d null;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "                break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "              }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            deferredTypeName.emit(this);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            deferredTypeName \u003d null;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          emitAndIndent(part);",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "          break;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "    if (ensureTrailingNewline \u0026\u0026 out.lastChar() !\u003d \u0027\\n\u0027) {",
          "callsMethod": true,
          "covered": true,
          "addCovered": false
        },
        {
          "code": "      emit(\"\\n\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "    return this;",
          "callsMethod": false,
          "covered": true,
          "addCovered": false
        }
      ],
      "addCovered": true,
      "nodeLevel": 5
    },
    {
      "signature": "    public CodeBlock build() {",
      "className": "com.squareup.javapoet.CodeBlock.Builder",
      "id": "MethodSignatureBackedByPsiMethod: build([])_300376511",
      "lines": [
        {
          "code": "      return new CodeBlock(this);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "    public Builder add(String format, Object... args) {",
      "className": "com.squareup.javapoet.CodeBlock.Builder",
      "id": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_1004597891",
      "lines": [
        {
          "code": "      boolean hasRelative \u003d false;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      boolean hasIndexed \u003d false;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int relativeParameterCount \u003d 0;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      int[] indexedParameterCount \u003d new int[args.length];",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      for (int p \u003d 0; p \u003c format.length(); ) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (format.charAt(p) !\u003d \u0027$\u0027) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          int nextP \u003d format.indexOf(\u0027$\u0027, p + 1);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (nextP \u003d\u003d -1) nextP \u003d format.length();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          formatParts.add(format.substring(p, nextP));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          p \u003d nextP;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          continue;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        p++; // \u0027$\u0027.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        // Consume zero or more digits, leaving \u0027c\u0027 as the first non-digit char after the \u0027$\u0027.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        int indexStart \u003d p;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        char c;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        do {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          checkArgument(p \u003c format.length(), \"dangling format characters in \u0027%s\u0027\", format);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          c \u003d format.charAt(p++);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        } while (c \u003e\u003d \u00270\u0027 \u0026\u0026 c \u003c\u003d \u00279\u0027);",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        int indexEnd \u003d p - 1;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        // If \u0027c\u0027 doesn\u0027t take an argument, we\u0027re done.",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (isNoArgPlaceholder(c)) {",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          checkArgument(",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "              indexStart \u003d\u003d indexEnd, \"$$, $\u003e, $\u003c, $[, $], $W, and $Z may not have an index\");",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          formatParts.add(\"$\" + c);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          continue;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        // Find either the indexed argument, or the relative argument. (0-based).",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        int index;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        if (indexStart \u003c indexEnd) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          index \u003d Integer.parseInt(format.substring(indexStart, indexEnd)) - 1;",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          hasIndexed \u003d true;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (args.length \u003e 0) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            indexedParameterCount[index % args.length]++; // modulo is needed, checked below anyway",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        } else {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          index \u003d relativeParameterCount;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          hasRelative \u003d true;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          relativeParameterCount++;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        checkArgument(index \u003e\u003d 0 \u0026\u0026 index \u003c args.length,",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            \"index %d for \u0027%s\u0027 not in range (received %s arguments)\",",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            index + 1, format.substring(indexStart - 1, indexEnd + 1), args.length);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        checkArgument(!hasIndexed || !hasRelative, \"cannot mix indexed and positional parameters\");",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        addArgument(format, c, args[index]);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        formatParts.add(\"$\" + c);",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (hasRelative) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        checkArgument(relativeParameterCount \u003e\u003d args.length,",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            \"unused arguments: expected %s, received %s\", relativeParameterCount, args.length);",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      if (hasIndexed) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        List\u003cString\u003e unused \u003d new ArrayList\u003c\u003e();",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        for (int i \u003d 0; i \u003c args.length; i++) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          if (indexedParameterCount[i] \u003d\u003d 0) {",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "            unused.add(\"$\" + (i + 1));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "          }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        String s \u003d unused.size() \u003d\u003d 1 ? \"\" : \"s\";",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "        checkArgument(unused.isEmpty(), \"unused argument%s: %s\", s, String.join(\", \", unused));",
          "callsMethod": true,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      }",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        },
        {
          "code": "      return this;",
          "callsMethod": false,
          "covered": false,
          "addCovered": false
        }
      ],
      "addCovered": false,
      "nodeLevel": 5
    },
    {
      "signature": "    private Builder() {",
      "className": "com.squareup.javapoet.CodeBlock.Builder",
      "id": "MethodSignatureBackedByPsiMethod: Builder([])_-1150593220",
      "lines": [],
      "addCovered": false,
      "nodeLevel": 5
    }
  ],
  "edges": [
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:Class\u003c?\u003e])_1614269737",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:Class\u003c?\u003e])_72674774",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: builder([PsiType:Type, PsiType:String, PsiType:Modifier[]])_-779045922",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: remove([PsiType:int])_1770595521",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: isEqualTo([PsiType:Object])_553342626",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: assertThat([PsiType:Integer])_1905627711",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "root",
      "target": "MethodSignatureBackedByPsiMethod: hashCode([])_-1971871508",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:Class\u003c?\u003e])_1614269737",
      "target": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:ClassName])_-399151501",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:Class\u003c?\u003e])_1614269737",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1294763396",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:Class\u003c?\u003e])_72674774",
      "target": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:ClassName])_-971303186",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:Class\u003c?\u003e])_72674774",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-149714893",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:Type, PsiType:String, PsiType:Modifier[]])_-779045922",
      "target": "MethodSignatureBackedByPsiMethod: builder([PsiType:TypeName, PsiType:String, PsiType:Modifier[]])_1283392799",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:Type, PsiType:String, PsiType:Modifier[]])_-779045922",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type])_1807827429",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: hashCode([])_-1971871508",
      "target": "MethodSignatureBackedByPsiMethod: hashCode([])_931091248",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: hashCode([])_-1971871508",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_1488510338",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:ClassName])_-399151501",
      "target": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_-1392917522",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:ClassName])_-399151501",
      "target": "MethodSignatureBackedByPsiMethod: build([])_-1923700483",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:ClassName])_-399151501",
      "target": "MethodSignatureBackedByPsiMethod: builder([PsiType:ClassName])_1562654384",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1294763396",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_224154992",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1294763396",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_198647389",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1294763396",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_646197822",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1294763396",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1599769337",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1294763396",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_1386209936",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1294763396",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1831164059",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1294763396",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_361992616",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1294763396",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_427084088",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1294763396",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1131032094",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1294763396",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1122854619",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1294763396",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_857992026",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1294763396",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_873138246",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1294763396",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1345632907",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1294763396",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_1925619993",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1294763396",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_647244907",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1294763396",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-578730266",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1294763396",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_703476936",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1294763396",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_1718023390",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1294763396",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-931554054",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1294763396",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1076991562",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1294763396",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_1501924384",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1294763396",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_764212082",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1294763396",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_337969027",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:ClassName])_-971303186",
      "target": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_-1414534948",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:ClassName])_-971303186",
      "target": "MethodSignatureBackedByPsiMethod: build([])_-194846503",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addAnnotation([PsiType:ClassName])_-971303186",
      "target": "MethodSignatureBackedByPsiMethod: builder([PsiType:ClassName])_-1877436659",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-149714893",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_109695348",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-149714893",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_565545274",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-149714893",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-764253012",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-149714893",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_2126855033",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-149714893",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_570458367",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-149714893",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1671331201",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-149714893",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_1852235451",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-149714893",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_-1963459338",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-149714893",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_211135538",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-149714893",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_188963533",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-149714893",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_-1540291902",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-149714893",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-1143299747",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-149714893",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1624916668",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-149714893",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-1113699072",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-149714893",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1494341747",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-149714893",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_2144956295",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-149714893",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_262502448",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-149714893",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_928143043",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-149714893",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1437726889",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-149714893",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-367224593",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-149714893",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-840086137",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-149714893",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_790105546",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-149714893",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-609763490",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:TypeName, PsiType:String, PsiType:Modifier[]])_1283392799",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_972822933",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:TypeName, PsiType:String, PsiType:Modifier[]])_1283392799",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1768326786",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:TypeName, PsiType:String, PsiType:Modifier[]])_1283392799",
      "target": "MethodSignatureBackedByPsiMethod: isValidParameterName([PsiType:String])_-1333569701",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:TypeName, PsiType:String, PsiType:Modifier[]])_1283392799",
      "target": "MethodSignatureBackedByPsiMethod: addModifiers([PsiType:Modifier[]])_1062354652",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:TypeName, PsiType:String, PsiType:Modifier[]])_1283392799",
      "target": "MethodSignatureBackedByPsiMethod: Builder([PsiType:TypeName, PsiType:String])_1358377509",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type])_1807827429",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-195649962",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type])_1807827429",
      "target": "MethodSignatureBackedByPsiMethod: LinkedHashMap([])_1187637520",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1488510338",
      "target": "MethodSignatureBackedByPsiMethod: StringBuilder([])_-1653563469",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1488510338",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_413589592",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1488510338",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:String, PsiType:Object[]])_-126460724",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1488510338",
      "target": "MethodSignatureBackedByPsiMethod: toString([])_-1150643750",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: toString([])_1488510338",
      "target": "MethodSignatureBackedByPsiMethod: AssertionError([])_1770135176",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_-1923700483",
      "target": "MethodSignatureBackedByPsiMethod: keySet([])_1874131354",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_-1923700483",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_625444368",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_-1923700483",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1007783753",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_-1923700483",
      "target": "MethodSignatureBackedByPsiMethod: isName([PsiType:CharSequence])_1195995653",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_-1923700483",
      "target": "MethodSignatureBackedByPsiMethod: AnnotationSpec([PsiType:Builder])_1767361517",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:ClassName])_1562654384",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1953838024",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:ClassName])_1562654384",
      "target": "MethodSignatureBackedByPsiMethod: Builder([PsiType:TypeName])_-568954101",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_224154992",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_827071505",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_224154992",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_141322508",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_198647389",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-256365720",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_198647389",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-525050702",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1599769337",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1733892673",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1599769337",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_340262867",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1831164059",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-1988508220",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1831164059",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-102396998",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1076991562",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-2132432499",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1076991562",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_-1006966819",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_1501924384",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_772094950",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_764212082",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-522744375",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_764212082",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1623593286",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_764212082",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_994460526",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_764212082",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1480561375",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_764212082",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_746425656",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_764212082",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1169402183",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_764212082",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_-852534381",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_764212082",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_-2132643226",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_764212082",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_1092256722",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_764212082",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-596603030",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_764212082",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_-1456858488",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_764212082",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1974440661",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_764212082",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_888493530",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_764212082",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-798179266",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_764212082",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1551480743",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_764212082",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_245853590",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_764212082",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1459951954",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_764212082",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-1781037322",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_764212082",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-1235128885",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_764212082",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1148490518",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_764212082",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-360444550",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_764212082",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-146573149",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_764212082",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1343848828",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_-194846503",
      "target": "MethodSignatureBackedByPsiMethod: keySet([])_384882300",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_-194846503",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_205260438",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_-194846503",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1330483547",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_-194846503",
      "target": "MethodSignatureBackedByPsiMethod: isName([PsiType:CharSequence])_-1789213880",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: build([])_-194846503",
      "target": "MethodSignatureBackedByPsiMethod: AnnotationSpec([PsiType:Builder])_1903365373",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:ClassName])_-1877436659",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-364424716",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: builder([PsiType:ClassName])_-1877436659",
      "target": "MethodSignatureBackedByPsiMethod: Builder([PsiType:TypeName])_625095775",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_109695348",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_430270958",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_109695348",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-942680337",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_565545274",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_422401581",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_565545274",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_185195561",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_2126855033",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-808581389",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_2126855033",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1367391935",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1671331201",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_32666538",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1671331201",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-45944950",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-367224593",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-825899835",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-367224593",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_-1291722727",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-840086137",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_136767850",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_790105546",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-287773018",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_790105546",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_472245028",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_790105546",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-249055624",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_790105546",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_91800065",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_790105546",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-634596619",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_790105546",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1077144131",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_790105546",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_-1091911429",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_790105546",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_1040780515",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_790105546",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_495028533",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_790105546",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-1735677673",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_790105546",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_-299298945",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_790105546",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-1375410206",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_790105546",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1096914593",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_790105546",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-1949199950",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_790105546",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_1263209705",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_790105546",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-100197131",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_790105546",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1855806819",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_790105546",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-413677203",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_790105546",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_750394051",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_790105546",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-657500102",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_790105546",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_1334096966",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_790105546",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-152658136",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_790105546",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-2031300086",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_972822933",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_975714877",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_972822933",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_586532271",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1768326786",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-1628906327",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1768326786",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_2109078853",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: isValidParameterName([PsiType:String])_-1333569701",
      "target": "MethodSignatureBackedByPsiMethod: endsWith([PsiType:String])_-56243590",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: isValidParameterName([PsiType:String])_-1333569701",
      "target": "MethodSignatureBackedByPsiMethod: isIdentifier([PsiType:CharSequence])_1124493773",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: isValidParameterName([PsiType:String])_-1333569701",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_427943619",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: isValidParameterName([PsiType:String])_-1333569701",
      "target": "MethodSignatureBackedByPsiMethod: length([])_-1597988903",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: isValidParameterName([PsiType:String])_-1333569701",
      "target": "MethodSignatureBackedByPsiMethod: length([])_-1233514976",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: isValidParameterName([PsiType:String])_-1333569701",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_-1683197937",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: isValidParameterName([PsiType:String])_-1333569701",
      "target": "MethodSignatureBackedByPsiMethod: isName([PsiType:CharSequence])_-48022604",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: addModifiers([PsiType:Modifier[]])_1062354652",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eaddAll([PsiType:Collection\u003c? super T\u003e, PsiType:T[]])_1156882075",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-195649962",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_-181025001",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-195649962",
      "target": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_-1961063466",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-195649962",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1536226255",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-195649962",
      "target": "MethodSignatureBackedByPsiMethod: getComponentType([])_-1809523289",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-195649962",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1322803388",
      "sourceAnchor": 13,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-195649962",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1558108267",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-195649962",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-719640486",
      "sourceAnchor": 19,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-195649962",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-517937297",
      "sourceAnchor": 22,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-195649962",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_1399604235",
      "sourceAnchor": 25,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_-195649962",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_756230195",
      "sourceAnchor": 28,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_413589592",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-674470727",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_413589592",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_-850300650",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable])_413589592",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptySet([])_770061845",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:String, PsiType:Object[]])_-126460724",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock])_575574817",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:String, PsiType:Object[]])_-126460724",
      "target": "MethodSignatureBackedByPsiMethod: of([PsiType:String, PsiType:Object[]])_1001096651",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_625444368",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-1482141698",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_625444368",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_981225810",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1007783753",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-450955157",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1007783753",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-164516973",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: AnnotationSpec([PsiType:Builder])_1767361517",
      "target": "MethodSignatureBackedByPsiMethod: \u003cK, V\u003eimmutableMultimap([PsiType:Map\u003cK, List\u003cV\u003e\u003e])_-937315169",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1953838024",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_1063932225",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1953838024",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_1406691200",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-2132432499",
      "target": "MethodSignatureBackedByPsiMethod: TypeName([PsiType:List\u003cAnnotationSpec\u003e])_-1912921829",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-2132432499",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003erequireNonNull([PsiType:T, PsiType:String])_1084079770",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-2132432499",
      "target": "MethodSignatureBackedByPsiMethod: isEmpty([])_1902040430",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_772094950",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_589014072",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_772094950",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_1187274388",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-522744375",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_414629389",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-522744375",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_2111220284",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1623593286",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1455700557",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1623593286",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_187861441",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1480561375",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_262780457",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1480561375",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1193453084",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1169402183",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-421538807",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1169402183",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-403105642",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1148490518",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_44823808",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1148490518",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_1700219325",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-360444550",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_272091201",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-146573149",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1625586204",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-146573149",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_543282339",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-146573149",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_-1501960259",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-146573149",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1961815167",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-146573149",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_241953175",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-146573149",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-522716820",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-146573149",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_1348119615",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-146573149",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_1817587848",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-146573149",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_938135529",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-146573149",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-1113480809",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-146573149",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_1019606022",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-146573149",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-1063156746",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-146573149",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1782294728",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-146573149",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_617863703",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-146573149",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-48564607",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-146573149",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-455717053",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-146573149",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_96081102",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-146573149",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_1958653095",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-146573149",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_972708944",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-146573149",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_1482776307",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-146573149",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_-588714687",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-146573149",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1564304610",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-146573149",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_308886022",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_205260438",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-786831353",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_205260438",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_611161811",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1330483547",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-961414137",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1330483547",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-1646103760",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: AnnotationSpec([PsiType:Builder])_1903365373",
      "target": "MethodSignatureBackedByPsiMethod: \u003cK, V\u003eimmutableMultimap([PsiType:Map\u003cK, List\u003cV\u003e\u003e])_-78755658",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-364424716",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-1847304677",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-364424716",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_856886384",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-825899835",
      "target": "MethodSignatureBackedByPsiMethod: TypeName([PsiType:List\u003cAnnotationSpec\u003e])_-471021162",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-825899835",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003erequireNonNull([PsiType:T, PsiType:String])_-1055940516",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_-825899835",
      "target": "MethodSignatureBackedByPsiMethod: isEmpty([])_2047742180",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_136767850",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_848349954",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_136767850",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_946609344",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-287773018",
      "target": "MethodSignatureBackedByPsiMethod: NullPointerException([PsiType:String])_-1651871053",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-287773018",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_2082354004",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_472245028",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1899360337",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_472245028",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-901210693",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_91800065",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1131006528",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_91800065",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_-975903920",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1077144131",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_-1779525515",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1077144131",
      "target": "MethodSignatureBackedByPsiMethod: format([PsiType:String, PsiType:Object[]])_711916317",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-657500102",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String, PsiType:List\u003cAnnotationSpec\u003e])_1260752399",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-657500102",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eemptyList([])_-976679393",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_1334096966",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-2088603175",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-152658136",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_-1076311739",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-152658136",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1056177825",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-152658136",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_7199821",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-152658136",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_419595602",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-152658136",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_578595559",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-152658136",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-383676891",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-152658136",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_-1079478319",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-152658136",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_1707273075",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-152658136",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-1762001465",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-152658136",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1980860390",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-152658136",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_444174449",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-152658136",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-39189729",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-152658136",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-942927932",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-152658136",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-1470285051",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-152658136",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1668267419",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-152658136",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_623115614",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-152658136",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_185409559",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-152658136",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-491873177",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-152658136",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-892189894",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-152658136",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1314729356",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-152658136",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_898740444",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-152658136",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_860787696",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-152658136",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_742357241",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_-1961063466",
      "target": "MethodSignatureBackedByPsiMethod: ArrayTypeName([PsiType:TypeName])_-645925841",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1536226255",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_564718802",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1536226255",
      "target": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_1479436528",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1536226255",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_206921608",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1536226255",
      "target": "MethodSignatureBackedByPsiMethod: getComponentType([])_1972785537",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1536226255",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1588124322",
      "sourceAnchor": 13,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1536226255",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_313983453",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1536226255",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_796450895",
      "sourceAnchor": 19,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1536226255",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-314540211",
      "sourceAnchor": 22,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1536226255",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_-844387115",
      "sourceAnchor": 25,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_1536226255",
      "target": "MethodSignatureBackedByPsiMethod: IllegalArgumentException([PsiType:String])_1075833667",
      "sourceAnchor": 28,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1322803388",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003echeckNotNull([PsiType:T, PsiType:String, PsiType:Object[]])_1630765086",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1322803388",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_-1009771899",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1322803388",
      "target": "MethodSignatureBackedByPsiMethod: isPrimitive([])_1193513210",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1322803388",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1622890999",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1322803388",
      "target": "MethodSignatureBackedByPsiMethod: equals([PsiType:Object])_2038105933",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1322803388",
      "target": "MethodSignatureBackedByPsiMethod: checkArgument([PsiType:boolean, PsiType:String, PsiType:Object[]])_1917892468",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1322803388",
      "target": "MethodSignatureBackedByPsiMethod: isArray([])_-1977681467",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1322803388",
      "target": "MethodSignatureBackedByPsiMethod: isAnonymousClass([])_1438882962",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1322803388",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-267843548",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1322803388",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1656353368",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1322803388",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int])_2122788966",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1322803388",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-1526091747",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1322803388",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1254496387",
      "sourceAnchor": 10,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1322803388",
      "target": "MethodSignatureBackedByPsiMethod: getSimpleName([])_-673614541",
      "sourceAnchor": 12,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1322803388",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1356885367",
      "sourceAnchor": 14,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1322803388",
      "target": "MethodSignatureBackedByPsiMethod: lastIndexOf([PsiType:int])_-72618999",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1322803388",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_356600744",
      "sourceAnchor": 16,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1322803388",
      "target": "MethodSignatureBackedByPsiMethod: substring([PsiType:int, PsiType:int])_-1200159006",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1322803388",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_1809577434",
      "sourceAnchor": 17,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1322803388",
      "target": "MethodSignatureBackedByPsiMethod: ClassName([PsiType:String, PsiType:ClassName, PsiType:String])_-1611204255",
      "sourceAnchor": 18,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1322803388",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String])_1325143438",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1322803388",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_1371666286",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_-1322803388",
      "target": "MethodSignatureBackedByPsiMethod: getEnclosingClass([])_-1757724726",
      "sourceAnchor": 21,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1558108267",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Class\u003c?\u003e])_637700418",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1558108267",
      "target": "MethodSignatureBackedByPsiMethod: getRawType([])_294012952",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1558108267",
      "target": "MethodSignatureBackedByPsiMethod: getOwnerType([])_-2043118175",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1558108267",
      "target": "MethodSignatureBackedByPsiMethod: isStatic([PsiType:int])_424490387",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1558108267",
      "target": "MethodSignatureBackedByPsiMethod: getModifiers([])_-574718326",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1558108267",
      "target": "MethodSignatureBackedByPsiMethod: getRawType([])_-1254260271",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1558108267",
      "target": "MethodSignatureBackedByPsiMethod: getOwnerType([])_-1473324580",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1558108267",
      "target": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_1207355514",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1558108267",
      "target": "MethodSignatureBackedByPsiMethod: getActualTypeArguments([])_-616792370",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1558108267",
      "target": "MethodSignatureBackedByPsiMethod: nestedClass([PsiType:String, PsiType:List\u003cTypeName\u003e])_339668169",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1558108267",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_-1423617496",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1558108267",
      "target": "MethodSignatureBackedByPsiMethod: simpleName([])_-478649773",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:ParameterizedType, PsiType:Map\u003cType, TypeVariableName\u003e])_1558108267",
      "target": "MethodSignatureBackedByPsiMethod: ParameterizedTypeName([PsiType:ParameterizedTypeName, PsiType:ClassName, PsiType:List\u003cTypeName\u003e])_642588306",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-719640486",
      "target": "MethodSignatureBackedByPsiMethod: WildcardTypeName([PsiType:List\u003cTypeName\u003e, PsiType:List\u003cTypeName\u003e])_-570832708",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-719640486",
      "target": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-226927734",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-719640486",
      "target": "MethodSignatureBackedByPsiMethod: getUpperBounds([])_879621706",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-719640486",
      "target": "MethodSignatureBackedByPsiMethod: list([PsiType:Type[], PsiType:Map\u003cType, TypeVariableName\u003e])_-62448461",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:WildcardType, PsiType:Map\u003cType, TypeVariableName\u003e])_-719640486",
      "target": "MethodSignatureBackedByPsiMethod: getLowerBounds([])_-10620044",
      "sourceAnchor": 3,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-517937297",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Object])_-269515622",
      "sourceAnchor": 2,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-517937297",
      "target": "MethodSignatureBackedByPsiMethod: ArrayList([])_230218207",
      "sourceAnchor": 4,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-517937297",
      "target": "MethodSignatureBackedByPsiMethod: \u003cT\u003eunmodifiableList([PsiType:List\u003c? extends T\u003e])_1094869288",
      "sourceAnchor": 5,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-517937297",
      "target": "MethodSignatureBackedByPsiMethod: TypeVariableName([PsiType:String, PsiType:List\u003cTypeName\u003e])_-1077931157",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-517937297",
      "target": "MethodSignatureBackedByPsiMethod: getName([])_-161942186",
      "sourceAnchor": 6,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-517937297",
      "target": "MethodSignatureBackedByPsiMethod: put([PsiType:K, PsiType:V])_-583030222",
      "sourceAnchor": 7,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-517937297",
      "target": "MethodSignatureBackedByPsiMethod: getBounds([])_1551348457",
      "sourceAnchor": 8,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-517937297",
      "target": "MethodSignatureBackedByPsiMethod: add([PsiType:E])_-402437965",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-517937297",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_628135987",
      "sourceAnchor": 9,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:TypeVariable\u003c?\u003e, PsiType:Map\u003cType, TypeVariableName\u003e])_-517937297",
      "target": "MethodSignatureBackedByPsiMethod: remove([PsiType:Object])_40944000",
      "sourceAnchor": 11,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_1399604235",
      "target": "MethodSignatureBackedByPsiMethod: of([PsiType:TypeName])_286349614",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_1399604235",
      "target": "MethodSignatureBackedByPsiMethod: get([PsiType:Type, PsiType:Map\u003cType, TypeVariableName\u003e])_942835738",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: get([PsiType:GenericArrayType, PsiType:Map\u003cType, TypeVariableName\u003e])_1399604235",
      "target": "MethodSignatureBackedByPsiMethod: getGenericComponentType([])_-2126954379",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-674470727",
      "target": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Map\u003cString, ClassName\u003e, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-2059927315",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: CodeWriter([PsiType:Appendable, PsiType:String, PsiType:Set\u003cString\u003e, PsiType:Set\u003cString\u003e])_-674470727",
      "target": "MethodSignatureBackedByPsiMethod: \u003cK, V\u003eemptyMap([])_818420700",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock])_575574817",
      "target": "MethodSignatureBackedByPsiMethod: emit([PsiType:CodeBlock, PsiType:boolean])_-2051930999",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: of([PsiType:String, PsiType:Object[]])_1001096651",
      "target": "MethodSignatureBackedByPsiMethod: build([])_300376511",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: of([PsiType:String, PsiType:Object[]])_1001096651",
      "target": "MethodSignatureBackedByPsiMethod: add([PsiType:String, PsiType:Object[]])_1004597891",
      "sourceAnchor": 1,
      "targetAnchor": 0
    },
    {
      "source": "MethodSignatureBackedByPsiMethod: of([PsiType:String, PsiType:Object[]])_1001096651",
      "target": "MethodSignatureBackedByPsiMethod: Builder([])_-1150593220",
      "sourceAnchor": 1,
      "targetAnchor": 0
    }
  ]
}
